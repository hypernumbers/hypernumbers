%% Lexer for Italian frontend for Muin.
%% Hasan Veldstra <hasan@hypernumbers.com>
%% Generated by generate_lexer.rb on Fri Apr 10 10:39:21 +0100 2009

Definitions.

STRING    = (\"[^"\n]*\")
%" % Syntax highlighting fix.
WHITESPACE = ([\000-\s]*)
ALLOWED_PREFIXES = (\s+|=|\+|\-|\*|\/)

SMALL = ({ALLOWED_PREFIXES})(\120\111\103\103\117\114\117)(\s*)(\()
ISTEXT = ({ALLOWED_PREFIXES})(\126\101\114\56\124\105\123\124\117)(\s*)(\()
PI = ({ALLOWED_PREFIXES})(\120\111\56\107\122\105\103\117)(\s*)(\()
VARP = ({ALLOWED_PREFIXES})(\126\101\122\56\120\117\120)(\s*)(\()
GROWTH = ({ALLOWED_PREFIXES})(\103\122\105\123\103\111\124\101)(\s*)(\()
SECOND = ({ALLOWED_PREFIXES})(\123\105\103\117\116\104\117)(\s*)(\()
ODD = ({ALLOWED_PREFIXES})(\104\111\123\120\101\122\111)(\s*)(\()
GEOMEAN = ({ALLOWED_PREFIXES})(\115\105\104\111\101\56\107\105\117\115\105\124\122\111\103\101)(\s*)(\()
SKEW = ({ALLOWED_PREFIXES})(\101\123\111\115\115\105\124\122\111\101)(\s*)(\()
DMIN = ({ALLOWED_PREFIXES})(\104\102\56\115\111\116)(\s*)(\()
RIGHT = ({ALLOWED_PREFIXES})(\104\105\123\124\122\101)(\s*)(\()
VLOOKUP = ({ALLOWED_PREFIXES})(\103\105\122\103\101\56\126\105\122\124)(\s*)(\()
TRUE = ({ALLOWED_PREFIXES})(\126\105\122\117)(\s*)(\()
SIN = ({ALLOWED_PREFIXES})(\123\105\116)(\s*)(\()
GAMMALN = ({ALLOWED_PREFIXES})(\114\116\56\107\101\115\115\101)(\s*)(\()
TRIMMEAN = ({ALLOWED_PREFIXES})(\115\105\104\111\101\56\124\122\117\116\103\101\124\101)(\s*)(\()
COLUMN = ({ALLOWED_PREFIXES})(\122\111\106\56\103\117\114\117\116\116\101)(\s*)(\()
SUMIF = ({ALLOWED_PREFIXES})(\123\117\115\115\101\56\123\105)(\s*)(\()
HOUR = ({ALLOWED_PREFIXES})(\117\122\101)(\s*)(\()
FALSE = ({ALLOWED_PREFIXES})(\106\101\114\123\117)(\s*)(\()
DDB = ({ALLOWED_PREFIXES})(\101\115\115\117\122\124)(\s*)(\()
SQRT = ({ALLOWED_PREFIXES})(\122\101\104\121)(\s*)(\()
SUMSQ = ({ALLOWED_PREFIXES})(\123\117\115\115\101\56\121)(\s*)(\()
EVEN = ({ALLOWED_PREFIXES})(\120\101\122\111)(\s*)(\()
FACT = ({ALLOWED_PREFIXES})(\106\101\124\124\117\122\111\101\114\105)(\s*)(\()
RTD = ({ALLOWED_PREFIXES})(\122\124\104)(\s*)(\()
SLOPE = ({ALLOWED_PREFIXES})(\120\105\116\104\105\116\132\101)(\s*)(\()
ATAN2 = ({ALLOWED_PREFIXES})(\101\122\103\124\101\116\56\62)(\s*)(\()
SLN = ({ALLOWED_PREFIXES})(\101\115\115\117\122\124\56\103\117\123\124)(\s*)(\()
OFFSET = ({ALLOWED_PREFIXES})(\123\103\101\122\124\117)(\s*)(\()
CEILING = ({ALLOWED_PREFIXES})(\101\122\122\117\124\117\116\104\101\56\105\103\103\105\123\123\117)(\s*)(\()
ADDRESS = ({ALLOWED_PREFIXES})(\111\116\104\111\122\111\132\132\117)(\s*)(\()
BINOMDIST = ({ALLOWED_PREFIXES})(\104\111\123\124\122\111\102\56\102\111\116\117\115)(\s*)(\()
TYPE = ({ALLOWED_PREFIXES})(\124\111\120\117)(\s*)(\()
ISBLANK = ({ALLOWED_PREFIXES})(\126\101\114\56\126\125\117\124\117)(\s*)(\()
COSH = ({ALLOWED_PREFIXES})(\103\117\123\110)(\s*)(\()
NORMSINV = ({ALLOWED_PREFIXES})(\111\116\126\56\116\117\122\115\56\123\124)(\s*)(\()
INFO = ({ALLOWED_PREFIXES})(\101\115\102\111\105\116\124\105\56\111\116\106\117)(\s*)(\()
FTEST = ({ALLOWED_PREFIXES})(\124\105\123\124\56\106)(\s*)(\()
MINUTE = ({ALLOWED_PREFIXES})(\115\111\116\125\124\117)(\s*)(\()
IF = ({ALLOWED_PREFIXES})(\123\105)(\s*)(\()
WEIBULL = ({ALLOWED_PREFIXES})(\127\105\111\102\125\114\114)(\s*)(\()
WEEKDAY = ({ALLOWED_PREFIXES})(\107\111\117\122\116\117\56\123\105\124\124\111\115\101\116\101)(\s*)(\()
AREAS = ({ALLOWED_PREFIXES})(\101\122\105\105)(\s*)(\()
UNION = ({ALLOWED_PREFIXES})(\125\116\111\117\116)(\s*)(\()
MEDIAN = ({ALLOWED_PREFIXES})(\115\105\104\111\101\116\101)(\s*)(\()
NPV = ({ALLOWED_PREFIXES})(\126\101\116)(\s*)(\()
BETAINV = ({ALLOWED_PREFIXES})(\111\116\126\56\102\105\124\101)(\s*)(\()
TANH = ({ALLOWED_PREFIXES})(\124\101\116\110)(\s*)(\()
N = ({ALLOWED_PREFIXES})(\116\125\115)(\s*)(\()
PRODUCT = ({ALLOWED_PREFIXES})(\120\122\117\104\117\124\124\117)(\s*)(\()
VALUE = ({ALLOWED_PREFIXES})(\126\101\114\117\122\105)(\s*)(\()
ISNA = ({ALLOWED_PREFIXES})(\126\101\114\56\116\117\116\56\104\111\123\120)(\s*)(\()
BETADIST = ({ALLOWED_PREFIXES})(\104\111\123\124\122\111\102\56\102\105\124\101)(\s*)(\()
PV = ({ALLOWED_PREFIXES})(\126\101)(\s*)(\()
AVEDEV = ({ALLOWED_PREFIXES})(\115\105\104\111\101\56\104\105\126)(\s*)(\()
DEVSQ = ({ALLOWED_PREFIXES})(\104\105\126\56\121)(\s*)(\()
ROMAN = ({ALLOWED_PREFIXES})(\122\117\115\101\116\117)(\s*)(\()
FIND = ({ALLOWED_PREFIXES})(\124\122\117\126\101)(\s*)(\()
DVARP = ({ALLOWED_PREFIXES})(\104\102\56\126\101\122\56\120\117\120)(\s*)(\()
SINH = ({ALLOWED_PREFIXES})(\123\105\116\110)(\s*)(\()
UPPER = ({ALLOWED_PREFIXES})(\115\101\111\125\123\103)(\s*)(\()
SUM = ({ALLOWED_PREFIXES})(\123\117\115\115\101)(\s*)(\()
ISPMT = ({ALLOWED_PREFIXES})(\111\123\120\115\124)(\s*)(\()
HYPERLINK = ({ALLOWED_PREFIXES})(\110\131\120\105\122\114\111\116\113)(\s*)(\()
RAND = ({ALLOWED_PREFIXES})(\103\101\123\125\101\114\105)(\s*)(\()
FORECAST = ({ALLOWED_PREFIXES})(\120\122\105\126\111\123\111\117\116\105)(\s*)(\()
TINV = ({ALLOWED_PREFIXES})(\111\116\126\56\124)(\s*)(\()
DCOUNTA = ({ALLOWED_PREFIXES})(\104\102\56\103\117\116\124\101\56\126\101\114\117\122\111)(\s*)(\()
ISREF = ({ALLOWED_PREFIXES})(\126\101\114\56\122\111\106)(\s*)(\()
LOWER = ({ALLOWED_PREFIXES})(\115\111\116\125\123\103)(\s*)(\()
T = ({ALLOWED_PREFIXES})(\124)(\s*)(\()
ISERROR = ({ALLOWED_PREFIXES})(\126\101\114\56\105\122\122\117\122\105)(\s*)(\()
ATAN = ({ALLOWED_PREFIXES})(\101\122\103\124\101\116)(\s*)(\()
LOG10 = ({ALLOWED_PREFIXES})(\114\117\107\61\60)(\s*)(\()
INTERCEPT = ({ALLOWED_PREFIXES})(\111\116\124\105\122\103\105\124\124\101)(\s*)(\()
FIXED = ({ALLOWED_PREFIXES})(\106\111\123\123\117)(\s*)(\()
COMBIN = ({ALLOWED_PREFIXES})(\103\117\115\102\111\116\101\132\111\117\116\105)(\s*)(\()
FISHERINV = ({ALLOWED_PREFIXES})(\111\116\126\56\106\111\123\110\105\122)(\s*)(\()
DCOUNT = ({ALLOWED_PREFIXES})(\104\102\56\103\117\116\124\101\56\116\125\115\105\122\111)(\s*)(\()
REPT = ({ALLOWED_PREFIXES})(\122\111\120\105\124\111)(\s*)(\()
MODE = ({ALLOWED_PREFIXES})(\115\117\104\101)(\s*)(\()
DATE = ({ALLOWED_PREFIXES})(\104\101\124\101)(\s*)(\()
ISLOGICAL = ({ALLOWED_PREFIXES})(\126\101\114\56\114\117\107\111\103\117)(\s*)(\()
LOGEST = ({ALLOWED_PREFIXES})(\122\105\107\122\56\114\117\107)(\s*)(\()
TDIST = ({ALLOWED_PREFIXES})(\104\111\123\124\122\111\102\56\124)(\s*)(\()
TIME = ({ALLOWED_PREFIXES})(\117\122\101\122\111\117)(\s*)(\()
FV = ({ALLOWED_PREFIXES})(\126\101\114\56\106\125\124)(\s*)(\()
LN = ({ALLOWED_PREFIXES})(\114\116)(\s*)(\()
COUNTIF = ({ALLOWED_PREFIXES})(\103\117\116\124\101\56\123\105)(\s*)(\()
EXP = ({ALLOWED_PREFIXES})(\105\130\120)(\s*)(\()
DVAR = ({ALLOWED_PREFIXES})(\104\102\56\126\101\122)(\s*)(\()
DAY = ({ALLOWED_PREFIXES})(\107\111\117\122\116\117)(\s*)(\()
ISNUMBER = ({ALLOWED_PREFIXES})(\126\101\114\56\116\125\115\105\122\117)(\s*)(\()
LOOKUP = ({ALLOWED_PREFIXES})(\103\105\122\103\101)(\s*)(\()
MONTH = ({ALLOWED_PREFIXES})(\115\105\123\105)(\s*)(\()
NPER = ({ALLOWED_PREFIXES})(\116\125\115\56\122\101\124\105)(\s*)(\()
DAYS360 = ({ALLOWED_PREFIXES})(\107\111\117\122\116\117\63\66\60)(\s*)(\()
LOGINV = ({ALLOWED_PREFIXES})(\111\116\126\56\114\117\107\116\117\122\115)(\s*)(\()
RANK = ({ALLOWED_PREFIXES})(\122\101\116\107\117)(\s*)(\()
ACOSH = ({ALLOWED_PREFIXES})(\101\122\103\103\117\123\110)(\s*)(\()
CORREL = ({ALLOWED_PREFIXES})(\103\117\122\122\105\114\101\132\111\117\116\105)(\s*)(\()
CHIDIST = ({ALLOWED_PREFIXES})(\104\111\123\124\122\111\102\56\103\110\111)(\s*)(\()
LINEST = ({ALLOWED_PREFIXES})(\122\105\107\122\56\114\111\116)(\s*)(\()
GAMMAINV = ({ALLOWED_PREFIXES})(\111\116\126\56\107\101\115\115\101)(\s*)(\()
CHITEST = ({ALLOWED_PREFIXES})(\124\105\123\124\56\103\110\111)(\s*)(\()
DGET = ({ALLOWED_PREFIXES})(\104\102\56\126\101\114\117\122\111)(\s*)(\()
RATE = ({ALLOWED_PREFIXES})(\124\101\123\123\117)(\s*)(\()
INDEX = ({ALLOWED_PREFIXES})(\111\116\104\111\103\105)(\s*)(\()
ASINH = ({ALLOWED_PREFIXES})(\101\122\103\123\105\116\110)(\s*)(\()
CHAR = ({ALLOWED_PREFIXES})(\103\117\104\111\103\105\56\103\101\122\101\124\124)(\s*)(\()
STDEV = ({ALLOWED_PREFIXES})(\104\105\126\56\123\124)(\s*)(\()
ASIN = ({ALLOWED_PREFIXES})(\101\122\103\123\105\116)(\s*)(\()
ATANH = ({ALLOWED_PREFIXES})(\101\122\103\124\101\116\110)(\s*)(\()
NEGBINOMDIST = ({ALLOWED_PREFIXES})(\104\111\123\124\122\111\102\56\102\111\116\117\115\56\116\105\107)(\s*)(\()
DATEVALUE = ({ALLOWED_PREFIXES})(\104\101\124\101\56\126\101\114\117\122\105)(\s*)(\()
HYPGEOMDIST = ({ALLOWED_PREFIXES})(\104\111\123\124\122\111\102\56\111\120\105\122\107\105\117\115)(\s*)(\()
CHOOSE = ({ALLOWED_PREFIXES})(\123\103\105\107\114\111)(\s*)(\()
OR = ({ALLOWED_PREFIXES})(\117)(\s*)(\()
AVERAGEA = ({ALLOWED_PREFIXES})(\115\105\104\111\101\101)(\s*)(\()
NOT = ({ALLOWED_PREFIXES})(\116\117\116)(\s*)(\()
PERMUT = ({ALLOWED_PREFIXES})(\120\105\122\115\125\124\101\132\111\117\116\105)(\s*)(\()
PEARSON = ({ALLOWED_PREFIXES})(\120\105\101\122\123\117\116)(\s*)(\()
ERROR.TYPE = ({ALLOWED_PREFIXES})(\105\122\122\117\122\105\56\124\111\120\117)(\s*)(\()
COUNT = ({ALLOWED_PREFIXES})(\103\117\116\124\101\56\116\125\115\105\122\111)(\s*)(\()
MINVERSE = ({ALLOWED_PREFIXES})(\115\101\124\122\56\111\116\126\105\122\123\101)(\s*)(\()
CONFIDENCE = ({ALLOWED_PREFIXES})(\103\117\116\106\111\104\105\116\132\101)(\s*)(\()
VDB = ({ALLOWED_PREFIXES})(\101\115\115\117\122\124\56\126\101\122)(\s*)(\()
ROUNDDOWN = ({ALLOWED_PREFIXES})(\101\122\122\117\124\117\116\104\101\56\120\105\122\56\104\111\106)(\s*)(\()
COUNTA = ({ALLOWED_PREFIXES})(\103\117\116\124\101\56\126\101\114\117\122\111)(\s*)(\()
NOW = ({ALLOWED_PREFIXES})(\101\104\105\123\123\117)(\s*)(\()
COS = ({ALLOWED_PREFIXES})(\103\117\123)(\s*)(\()
STANDARDIZE = ({ALLOWED_PREFIXES})(\116\117\122\115\101\114\111\132\132\101)(\s*)(\()
NA = ({ALLOWED_PREFIXES})(\116\117\116\56\104\111\123\120)(\s*)(\()
COLUMNS = ({ALLOWED_PREFIXES})(\103\117\114\117\116\116\105)(\s*)(\()
FINV = ({ALLOWED_PREFIXES})(\111\116\126\56\106)(\s*)(\()
PERCENTRANK = ({ALLOWED_PREFIXES})(\120\105\122\103\105\116\124\56\122\101\116\107\117)(\s*)(\()
FREQUENCY = ({ALLOWED_PREFIXES})(\106\122\105\121\125\105\116\132\101)(\s*)(\()
SIGN = ({ALLOWED_PREFIXES})(\123\105\107\116\117)(\s*)(\()
STEYX = ({ALLOWED_PREFIXES})(\105\122\122\56\123\124\104\56\131\130)(\s*)(\()
PROPER = ({ALLOWED_PREFIXES})(\115\101\111\125\123\103\56\111\116\111\132)(\s*)(\()
LOG = ({ALLOWED_PREFIXES})(\114\117\107)(\s*)(\()
STDEVA = ({ALLOWED_PREFIXES})(\104\105\126\56\123\124\101)(\s*)(\()
MAX = ({ALLOWED_PREFIXES})(\115\101\130)(\s*)(\()
LARGE = ({ALLOWED_PREFIXES})(\107\122\101\116\104\105)(\s*)(\()
DSTDEVP = ({ALLOWED_PREFIXES})(\104\102\56\104\105\126\56\123\124\56\120\117\120)(\s*)(\()
FISHER = ({ALLOWED_PREFIXES})(\106\111\123\110\105\122)(\s*)(\()
INDIRECT = ({ALLOWED_PREFIXES})(\111\116\104\111\122\105\124\124\117)(\s*)(\()
MDETERM = ({ALLOWED_PREFIXES})(\115\101\124\122\56\104\105\124\105\122\115)(\s*)(\()
CLEAN = ({ALLOWED_PREFIXES})(\114\111\102\105\122\101)(\s*)(\()
NORMINV = ({ALLOWED_PREFIXES})(\111\116\126\56\116\117\122\115)(\s*)(\()
RSQ = ({ALLOWED_PREFIXES})(\122\121)(\s*)(\()
DPRODUCT = ({ALLOWED_PREFIXES})(\104\102\56\120\122\117\104\117\124\124\117)(\s*)(\()
TRANSPOSE = ({ALLOWED_PREFIXES})(\115\101\124\122\56\124\122\101\123\120\117\123\124\101)(\s*)(\()
TODAY = ({ALLOWED_PREFIXES})(\117\107\107\111)(\s*)(\()
CONCATENATE = ({ALLOWED_PREFIXES})(\103\117\116\103\101\124\105\116\101)(\s*)(\()
TTEST = ({ALLOWED_PREFIXES})(\124\105\123\124\56\124)(\s*)(\()
SUBTOTAL = ({ALLOWED_PREFIXES})(\123\125\102\124\117\124\101\114\105)(\s*)(\()
PROB = ({ALLOWED_PREFIXES})(\120\122\117\102\101\102\111\114\111\124\303\200)(\s*)(\()
CRITBINOM = ({ALLOWED_PREFIXES})(\103\122\111\124\56\102\111\116\117\115)(\s*)(\()
LOGNORMDIST = ({ALLOWED_PREFIXES})(\104\111\123\124\122\111\102\56\114\117\107\116\117\122\115)(\s*)(\()
FDIST = ({ALLOWED_PREFIXES})(\104\111\123\124\122\111\102\56\106)(\s*)(\()
DAVERAGE = ({ALLOWED_PREFIXES})(\104\102\56\115\105\104\111\101)(\s*)(\()
DB = ({ALLOWED_PREFIXES})(\101\115\115\117\122\124\56\106\111\123\123\117)(\s*)(\()
RADIANS = ({ALLOWED_PREFIXES})(\122\101\104\111\101\116\124\111)(\s*)(\()
KURT = ({ALLOWED_PREFIXES})(\103\125\122\124\117\123\111)(\s*)(\()
TEXT = ({ALLOWED_PREFIXES})(\124\105\123\124\117)(\s*)(\()
ROWS = ({ALLOWED_PREFIXES})(\122\111\107\110\105)(\s*)(\()
SUMPRODUCT = ({ALLOWED_PREFIXES})(\115\101\124\122\56\123\117\115\115\101\56\120\122\117\104\117\124\124\117)(\s*)(\()
MMULT = ({ALLOWED_PREFIXES})(\115\101\124\122\56\120\122\117\104\117\124\124\117)(\s*)(\()
VAR = ({ALLOWED_PREFIXES})(\126\101\122)(\s*)(\()
REPLACE = ({ALLOWED_PREFIXES})(\122\111\115\120\111\101\132\132\101)(\s*)(\()
DMAX = ({ALLOWED_PREFIXES})(\104\102\56\115\101\130)(\s*)(\()
IRR = ({ALLOWED_PREFIXES})(\124\111\122\56\103\117\123\124)(\s*)(\()
TIMEVALUE = ({ALLOWED_PREFIXES})(\117\122\101\122\111\117\56\126\101\114\117\122\105)(\s*)(\()
TRUNC = ({ALLOWED_PREFIXES})(\124\122\117\116\103\101)(\s*)(\()
PERCENTILE = ({ALLOWED_PREFIXES})(\120\105\122\103\105\116\124\111\114\105)(\s*)(\()
QUARTILE = ({ALLOWED_PREFIXES})(\121\125\101\122\124\111\114\105)(\s*)(\()
ISERR = ({ALLOWED_PREFIXES})(\126\101\114\56\105\122\122)(\s*)(\()
IPMT = ({ALLOWED_PREFIXES})(\111\116\124\105\122\105\123\123\111)(\s*)(\()
MID = ({ALLOWED_PREFIXES})(\123\124\122\111\116\107\101\56\105\123\124\122\101\111)(\s*)(\()
STDEVPA = ({ALLOWED_PREFIXES})(\104\105\126\56\123\124\56\120\117\120\101)(\s*)(\()
MATCH = ({ALLOWED_PREFIXES})(\103\117\116\106\122\117\116\124\101)(\s*)(\()
LEFT = ({ALLOWED_PREFIXES})(\123\111\116\111\123\124\122\101)(\s*)(\()
AVERAGE = ({ALLOWED_PREFIXES})(\115\105\104\111\101)(\s*)(\()
VARA = ({ALLOWED_PREFIXES})(\126\101\122\101)(\s*)(\()
STDEVP = ({ALLOWED_PREFIXES})(\104\105\126\56\123\124\56\120\117\120)(\s*)(\()
POWER = ({ALLOWED_PREFIXES})(\120\117\124\105\116\132\101)(\s*)(\()
HARMEAN = ({ALLOWED_PREFIXES})(\115\105\104\111\101\56\101\122\115\117\116\111\103\101)(\s*)(\()
LEN = ({ALLOWED_PREFIXES})(\114\125\116\107\110\105\132\132\101)(\s*)(\()
CODE = ({ALLOWED_PREFIXES})(\103\117\104\111\103\105)(\s*)(\()
SUMX2MY2 = ({ALLOWED_PREFIXES})(\123\117\115\115\101\56\104\111\106\106\56\121)(\s*)(\()
PMT = ({ALLOWED_PREFIXES})(\122\101\124\101)(\s*)(\()
HLOOKUP = ({ALLOWED_PREFIXES})(\103\105\122\103\101\56\117\122\111\132\132)(\s*)(\()
POISSON = ({ALLOWED_PREFIXES})(\120\117\111\123\123\117\116)(\s*)(\()
CELL = ({ALLOWED_PREFIXES})(\103\105\114\114\101)(\s*)(\()
EXACT = ({ALLOWED_PREFIXES})(\111\104\105\116\124\111\103\117)(\s*)(\()
INTERSECT = ({ALLOWED_PREFIXES})(\111\116\124\105\122\123\105\103\124)(\s*)(\()
GAMMADIST = ({ALLOWED_PREFIXES})(\104\111\123\124\122\111\102\56\107\101\115\115\101)(\s*)(\()
PPMT = ({ALLOWED_PREFIXES})(\120\56\122\101\124\101)(\s*)(\()
ROUNDUP = ({ALLOWED_PREFIXES})(\101\122\122\117\124\117\116\104\101\56\120\105\122\56\105\103\103)(\s*)(\()
EXPONDIST = ({ALLOWED_PREFIXES})(\104\111\123\124\122\111\102\56\105\130\120)(\s*)(\()
VARPA = ({ALLOWED_PREFIXES})(\126\101\122\56\120\117\120\101)(\s*)(\()
ROUND = ({ALLOWED_PREFIXES})(\101\122\122\117\124\117\116\104\101)(\s*)(\()
ABS = ({ALLOWED_PREFIXES})(\101\123\123)(\s*)(\()
AND = ({ALLOWED_PREFIXES})(\105)(\s*)(\()
MOD = ({ALLOWED_PREFIXES})(\122\105\123\124\117)(\s*)(\()
SUBSTITUTE = ({ALLOWED_PREFIXES})(\123\117\123\124\111\124\125\111\123\103\111)(\s*)(\()
SYD = ({ALLOWED_PREFIXES})(\101\115\115\117\122\124\56\101\116\116\125\117)(\s*)(\()
ACOS = ({ALLOWED_PREFIXES})(\101\122\103\103\117\123)(\s*)(\()
SUMX2PY2 = ({ALLOWED_PREFIXES})(\123\117\115\115\101\56\123\117\115\115\101\56\121)(\s*)(\()
NORMDIST = ({ALLOWED_PREFIXES})(\104\111\123\124\122\111\102\56\116\117\122\115)(\s*)(\()
COVAR = ({ALLOWED_PREFIXES})(\103\117\126\101\122\111\101\116\132\101)(\s*)(\()
MIN = ({ALLOWED_PREFIXES})(\115\111\116)(\s*)(\()
COUNTBLANK = ({ALLOWED_PREFIXES})(\103\117\116\124\101\56\126\125\117\124\105)(\s*)(\()
SEARCH = ({ALLOWED_PREFIXES})(\122\111\103\105\122\103\101)(\s*)(\()
DSUM = ({ALLOWED_PREFIXES})(\104\102\56\123\117\115\115\101)(\s*)(\()
GETPIVOTDATA = ({ALLOWED_PREFIXES})(\107\105\124\120\111\126\117\124\104\101\124\101)(\s*)(\()
FLOOR = ({ALLOWED_PREFIXES})(\101\122\122\117\124\117\116\104\101\56\104\111\106\105\124\124\117)(\s*)(\()
ISNONTEXT = ({ALLOWED_PREFIXES})(\126\101\114\56\116\117\116\56\124\105\123\124\117)(\s*)(\()
TAN = ({ALLOWED_PREFIXES})(\124\101\116)(\s*)(\()
TRIM = ({ALLOWED_PREFIXES})(\101\116\116\125\114\114\101\56\123\120\101\132\111)(\s*)(\()
CHIINV = ({ALLOWED_PREFIXES})(\111\116\126\56\103\110\111)(\s*)(\()
SUMXMY2 = ({ALLOWED_PREFIXES})(\123\117\115\115\101\56\121\56\104\111\106\106)(\s*)(\()
ROW = ({ALLOWED_PREFIXES})(\122\111\106\56\122\111\107\101)(\s*)(\()
MAXA = ({ALLOWED_PREFIXES})(\115\101\130\101)(\s*)(\()
ZTEST = ({ALLOWED_PREFIXES})(\124\105\123\124\56\132)(\s*)(\()
MINA = ({ALLOWED_PREFIXES})(\115\111\116\101)(\s*)(\()
DOLLAR = ({ALLOWED_PREFIXES})(\126\101\114\125\124\101)(\s*)(\()
MIRR = ({ALLOWED_PREFIXES})(\124\111\122\56\126\101\122)(\s*)(\()
DSTDEV = ({ALLOWED_PREFIXES})(\104\102\56\104\105\126\56\123\124)(\s*)(\()
NORMSDIST = ({ALLOWED_PREFIXES})(\104\111\123\124\122\111\102\56\116\117\122\115\56\123\124)(\s*)(\()
TREND = ({ALLOWED_PREFIXES})(\124\105\116\104\105\116\132\101)(\s*)(\()
YEAR = ({ALLOWED_PREFIXES})(\101\116\116\117)(\s*)(\()
DEGREES = ({ALLOWED_PREFIXES})(\107\122\101\104\111)(\s*)(\()
INT = ({ALLOWED_PREFIXES})(\111\116\124)(\s*)(\()


Rules.

% Preserve strings as-is.
{STRING} : {token, {string, YYtext}}.
% Kill whitespace.
{WHITESPACE} : {token, {whitespace, YYtext}}.

{SMALL} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SMALL("]};
         false -> {func, "SMALL("}
     end
 end
}.
{ISTEXT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ISTEXT("]};
         false -> {func, "ISTEXT("}
     end
 end
}.
{PI} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"PI("]};
         false -> {func, "PI("}
     end
 end
}.
{VARP} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"VARP("]};
         false -> {func, "VARP("}
     end
 end
}.
{GROWTH} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"GROWTH("]};
         false -> {func, "GROWTH("}
     end
 end
}.
{SECOND} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SECOND("]};
         false -> {func, "SECOND("}
     end
 end
}.
{ODD} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ODD("]};
         false -> {func, "ODD("}
     end
 end
}.
{GEOMEAN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"GEOMEAN("]};
         false -> {func, "GEOMEAN("}
     end
 end
}.
{SKEW} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SKEW("]};
         false -> {func, "SKEW("}
     end
 end
}.
{DMIN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DMIN("]};
         false -> {func, "DMIN("}
     end
 end
}.
{RIGHT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"RIGHT("]};
         false -> {func, "RIGHT("}
     end
 end
}.
{VLOOKUP} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"VLOOKUP("]};
         false -> {func, "VLOOKUP("}
     end
 end
}.
{TRUE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TRUE("]};
         false -> {func, "TRUE("}
     end
 end
}.
{SIN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SIN("]};
         false -> {func, "SIN("}
     end
 end
}.
{GAMMALN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"GAMMALN("]};
         false -> {func, "GAMMALN("}
     end
 end
}.
{TRIMMEAN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TRIMMEAN("]};
         false -> {func, "TRIMMEAN("}
     end
 end
}.
{COLUMN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"COLUMN("]};
         false -> {func, "COLUMN("}
     end
 end
}.
{SUMIF} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SUMIF("]};
         false -> {func, "SUMIF("}
     end
 end
}.
{HOUR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"HOUR("]};
         false -> {func, "HOUR("}
     end
 end
}.
{FALSE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"FALSE("]};
         false -> {func, "FALSE("}
     end
 end
}.
{DDB} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DDB("]};
         false -> {func, "DDB("}
     end
 end
}.
{SQRT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SQRT("]};
         false -> {func, "SQRT("}
     end
 end
}.
{SUMSQ} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SUMSQ("]};
         false -> {func, "SUMSQ("}
     end
 end
}.
{EVEN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"EVEN("]};
         false -> {func, "EVEN("}
     end
 end
}.
{FACT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"FACT("]};
         false -> {func, "FACT("}
     end
 end
}.
{RTD} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"RTD("]};
         false -> {func, "RTD("}
     end
 end
}.
{SLOPE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SLOPE("]};
         false -> {func, "SLOPE("}
     end
 end
}.
{ATAN2} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ATAN2("]};
         false -> {func, "ATAN2("}
     end
 end
}.
{SLN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SLN("]};
         false -> {func, "SLN("}
     end
 end
}.
{OFFSET} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"OFFSET("]};
         false -> {func, "OFFSET("}
     end
 end
}.
{CEILING} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"CEILING("]};
         false -> {func, "CEILING("}
     end
 end
}.
{ADDRESS} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ADDRESS("]};
         false -> {func, "ADDRESS("}
     end
 end
}.
{BINOMDIST} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"BINOMDIST("]};
         false -> {func, "BINOMDIST("}
     end
 end
}.
{TYPE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TYPE("]};
         false -> {func, "TYPE("}
     end
 end
}.
{ISBLANK} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ISBLANK("]};
         false -> {func, "ISBLANK("}
     end
 end
}.
{COSH} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"COSH("]};
         false -> {func, "COSH("}
     end
 end
}.
{NORMSINV} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"NORMSINV("]};
         false -> {func, "NORMSINV("}
     end
 end
}.
{INFO} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"INFO("]};
         false -> {func, "INFO("}
     end
 end
}.
{FTEST} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"FTEST("]};
         false -> {func, "FTEST("}
     end
 end
}.
{MINUTE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MINUTE("]};
         false -> {func, "MINUTE("}
     end
 end
}.
{IF} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"IF("]};
         false -> {func, "IF("}
     end
 end
}.
{WEIBULL} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"WEIBULL("]};
         false -> {func, "WEIBULL("}
     end
 end
}.
{WEEKDAY} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"WEEKDAY("]};
         false -> {func, "WEEKDAY("}
     end
 end
}.
{AREAS} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"AREAS("]};
         false -> {func, "AREAS("}
     end
 end
}.
{UNION} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"UNION("]};
         false -> {func, "UNION("}
     end
 end
}.
{MEDIAN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MEDIAN("]};
         false -> {func, "MEDIAN("}
     end
 end
}.
{NPV} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"NPV("]};
         false -> {func, "NPV("}
     end
 end
}.
{BETAINV} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"BETAINV("]};
         false -> {func, "BETAINV("}
     end
 end
}.
{TANH} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TANH("]};
         false -> {func, "TANH("}
     end
 end
}.
{N} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"N("]};
         false -> {func, "N("}
     end
 end
}.
{PRODUCT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"PRODUCT("]};
         false -> {func, "PRODUCT("}
     end
 end
}.
{VALUE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"VALUE("]};
         false -> {func, "VALUE("}
     end
 end
}.
{ISNA} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ISNA("]};
         false -> {func, "ISNA("}
     end
 end
}.
{BETADIST} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"BETADIST("]};
         false -> {func, "BETADIST("}
     end
 end
}.
{PV} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"PV("]};
         false -> {func, "PV("}
     end
 end
}.
{AVEDEV} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"AVEDEV("]};
         false -> {func, "AVEDEV("}
     end
 end
}.
{DEVSQ} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DEVSQ("]};
         false -> {func, "DEVSQ("}
     end
 end
}.
{ROMAN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ROMAN("]};
         false -> {func, "ROMAN("}
     end
 end
}.
{FIND} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"FIND("]};
         false -> {func, "FIND("}
     end
 end
}.
{DVARP} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DVARP("]};
         false -> {func, "DVARP("}
     end
 end
}.
{SINH} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SINH("]};
         false -> {func, "SINH("}
     end
 end
}.
{UPPER} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"UPPER("]};
         false -> {func, "UPPER("}
     end
 end
}.
{SUM} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SUM("]};
         false -> {func, "SUM("}
     end
 end
}.
{ISPMT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ISPMT("]};
         false -> {func, "ISPMT("}
     end
 end
}.
{HYPERLINK} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"HYPERLINK("]};
         false -> {func, "HYPERLINK("}
     end
 end
}.
{RAND} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"RAND("]};
         false -> {func, "RAND("}
     end
 end
}.
{FORECAST} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"FORECAST("]};
         false -> {func, "FORECAST("}
     end
 end
}.
{TINV} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TINV("]};
         false -> {func, "TINV("}
     end
 end
}.
{DCOUNTA} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DCOUNTA("]};
         false -> {func, "DCOUNTA("}
     end
 end
}.
{ISREF} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ISREF("]};
         false -> {func, "ISREF("}
     end
 end
}.
{LOWER} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"LOWER("]};
         false -> {func, "LOWER("}
     end
 end
}.
{T} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"T("]};
         false -> {func, "T("}
     end
 end
}.
{ISERROR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ISERROR("]};
         false -> {func, "ISERROR("}
     end
 end
}.
{ATAN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ATAN("]};
         false -> {func, "ATAN("}
     end
 end
}.
{LOG10} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"LOG10("]};
         false -> {func, "LOG10("}
     end
 end
}.
{INTERCEPT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"INTERCEPT("]};
         false -> {func, "INTERCEPT("}
     end
 end
}.
{FIXED} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"FIXED("]};
         false -> {func, "FIXED("}
     end
 end
}.
{COMBIN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"COMBIN("]};
         false -> {func, "COMBIN("}
     end
 end
}.
{FISHERINV} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"FISHERINV("]};
         false -> {func, "FISHERINV("}
     end
 end
}.
{DCOUNT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DCOUNT("]};
         false -> {func, "DCOUNT("}
     end
 end
}.
{REPT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"REPT("]};
         false -> {func, "REPT("}
     end
 end
}.
{MODE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MODE("]};
         false -> {func, "MODE("}
     end
 end
}.
{DATE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DATE("]};
         false -> {func, "DATE("}
     end
 end
}.
{ISLOGICAL} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ISLOGICAL("]};
         false -> {func, "ISLOGICAL("}
     end
 end
}.
{LOGEST} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"LOGEST("]};
         false -> {func, "LOGEST("}
     end
 end
}.
{TDIST} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TDIST("]};
         false -> {func, "TDIST("}
     end
 end
}.
{TIME} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TIME("]};
         false -> {func, "TIME("}
     end
 end
}.
{FV} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"FV("]};
         false -> {func, "FV("}
     end
 end
}.
{LN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"LN("]};
         false -> {func, "LN("}
     end
 end
}.
{COUNTIF} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"COUNTIF("]};
         false -> {func, "COUNTIF("}
     end
 end
}.
{EXP} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"EXP("]};
         false -> {func, "EXP("}
     end
 end
}.
{DVAR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DVAR("]};
         false -> {func, "DVAR("}
     end
 end
}.
{DAY} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DAY("]};
         false -> {func, "DAY("}
     end
 end
}.
{ISNUMBER} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ISNUMBER("]};
         false -> {func, "ISNUMBER("}
     end
 end
}.
{LOOKUP} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"LOOKUP("]};
         false -> {func, "LOOKUP("}
     end
 end
}.
{MONTH} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MONTH("]};
         false -> {func, "MONTH("}
     end
 end
}.
{NPER} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"NPER("]};
         false -> {func, "NPER("}
     end
 end
}.
{DAYS360} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DAYS360("]};
         false -> {func, "DAYS360("}
     end
 end
}.
{LOGINV} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"LOGINV("]};
         false -> {func, "LOGINV("}
     end
 end
}.
{RANK} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"RANK("]};
         false -> {func, "RANK("}
     end
 end
}.
{ACOSH} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ACOSH("]};
         false -> {func, "ACOSH("}
     end
 end
}.
{CORREL} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"CORREL("]};
         false -> {func, "CORREL("}
     end
 end
}.
{CHIDIST} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"CHIDIST("]};
         false -> {func, "CHIDIST("}
     end
 end
}.
{LINEST} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"LINEST("]};
         false -> {func, "LINEST("}
     end
 end
}.
{GAMMAINV} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"GAMMAINV("]};
         false -> {func, "GAMMAINV("}
     end
 end
}.
{CHITEST} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"CHITEST("]};
         false -> {func, "CHITEST("}
     end
 end
}.
{DGET} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DGET("]};
         false -> {func, "DGET("}
     end
 end
}.
{RATE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"RATE("]};
         false -> {func, "RATE("}
     end
 end
}.
{INDEX} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"INDEX("]};
         false -> {func, "INDEX("}
     end
 end
}.
{ASINH} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ASINH("]};
         false -> {func, "ASINH("}
     end
 end
}.
{CHAR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"CHAR("]};
         false -> {func, "CHAR("}
     end
 end
}.
{STDEV} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"STDEV("]};
         false -> {func, "STDEV("}
     end
 end
}.
{ASIN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ASIN("]};
         false -> {func, "ASIN("}
     end
 end
}.
{ATANH} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ATANH("]};
         false -> {func, "ATANH("}
     end
 end
}.
{NEGBINOMDIST} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"NEGBINOMDIST("]};
         false -> {func, "NEGBINOMDIST("}
     end
 end
}.
{DATEVALUE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DATEVALUE("]};
         false -> {func, "DATEVALUE("}
     end
 end
}.
{HYPGEOMDIST} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"HYPGEOMDIST("]};
         false -> {func, "HYPGEOMDIST("}
     end
 end
}.
{CHOOSE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"CHOOSE("]};
         false -> {func, "CHOOSE("}
     end
 end
}.
{OR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"OR("]};
         false -> {func, "OR("}
     end
 end
}.
{AVERAGEA} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"AVERAGEA("]};
         false -> {func, "AVERAGEA("}
     end
 end
}.
{NOT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"NOT("]};
         false -> {func, "NOT("}
     end
 end
}.
{PERMUT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"PERMUT("]};
         false -> {func, "PERMUT("}
     end
 end
}.
{PEARSON} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"PEARSON("]};
         false -> {func, "PEARSON("}
     end
 end
}.
{ERROR.TYPE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ERROR.TYPE("]};
         false -> {func, "ERROR.TYPE("}
     end
 end
}.
{COUNT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"COUNT("]};
         false -> {func, "COUNT("}
     end
 end
}.
{MINVERSE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MINVERSE("]};
         false -> {func, "MINVERSE("}
     end
 end
}.
{CONFIDENCE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"CONFIDENCE("]};
         false -> {func, "CONFIDENCE("}
     end
 end
}.
{VDB} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"VDB("]};
         false -> {func, "VDB("}
     end
 end
}.
{ROUNDDOWN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ROUNDDOWN("]};
         false -> {func, "ROUNDDOWN("}
     end
 end
}.
{COUNTA} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"COUNTA("]};
         false -> {func, "COUNTA("}
     end
 end
}.
{NOW} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"NOW("]};
         false -> {func, "NOW("}
     end
 end
}.
{COS} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"COS("]};
         false -> {func, "COS("}
     end
 end
}.
{STANDARDIZE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"STANDARDIZE("]};
         false -> {func, "STANDARDIZE("}
     end
 end
}.
{NA} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"NA("]};
         false -> {func, "NA("}
     end
 end
}.
{COLUMNS} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"COLUMNS("]};
         false -> {func, "COLUMNS("}
     end
 end
}.
{FINV} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"FINV("]};
         false -> {func, "FINV("}
     end
 end
}.
{PERCENTRANK} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"PERCENTRANK("]};
         false -> {func, "PERCENTRANK("}
     end
 end
}.
{FREQUENCY} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"FREQUENCY("]};
         false -> {func, "FREQUENCY("}
     end
 end
}.
{SIGN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SIGN("]};
         false -> {func, "SIGN("}
     end
 end
}.
{STEYX} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"STEYX("]};
         false -> {func, "STEYX("}
     end
 end
}.
{PROPER} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"PROPER("]};
         false -> {func, "PROPER("}
     end
 end
}.
{LOG} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"LOG("]};
         false -> {func, "LOG("}
     end
 end
}.
{STDEVA} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"STDEVA("]};
         false -> {func, "STDEVA("}
     end
 end
}.
{MAX} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MAX("]};
         false -> {func, "MAX("}
     end
 end
}.
{LARGE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"LARGE("]};
         false -> {func, "LARGE("}
     end
 end
}.
{DSTDEVP} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DSTDEVP("]};
         false -> {func, "DSTDEVP("}
     end
 end
}.
{FISHER} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"FISHER("]};
         false -> {func, "FISHER("}
     end
 end
}.
{INDIRECT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"INDIRECT("]};
         false -> {func, "INDIRECT("}
     end
 end
}.
{MDETERM} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MDETERM("]};
         false -> {func, "MDETERM("}
     end
 end
}.
{CLEAN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"CLEAN("]};
         false -> {func, "CLEAN("}
     end
 end
}.
{NORMINV} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"NORMINV("]};
         false -> {func, "NORMINV("}
     end
 end
}.
{RSQ} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"RSQ("]};
         false -> {func, "RSQ("}
     end
 end
}.
{DPRODUCT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DPRODUCT("]};
         false -> {func, "DPRODUCT("}
     end
 end
}.
{TRANSPOSE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TRANSPOSE("]};
         false -> {func, "TRANSPOSE("}
     end
 end
}.
{TODAY} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TODAY("]};
         false -> {func, "TODAY("}
     end
 end
}.
{CONCATENATE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"CONCATENATE("]};
         false -> {func, "CONCATENATE("}
     end
 end
}.
{TTEST} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TTEST("]};
         false -> {func, "TTEST("}
     end
 end
}.
{SUBTOTAL} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SUBTOTAL("]};
         false -> {func, "SUBTOTAL("}
     end
 end
}.
{PROB} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"PROB("]};
         false -> {func, "PROB("}
     end
 end
}.
{CRITBINOM} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"CRITBINOM("]};
         false -> {func, "CRITBINOM("}
     end
 end
}.
{LOGNORMDIST} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"LOGNORMDIST("]};
         false -> {func, "LOGNORMDIST("}
     end
 end
}.
{FDIST} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"FDIST("]};
         false -> {func, "FDIST("}
     end
 end
}.
{DAVERAGE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DAVERAGE("]};
         false -> {func, "DAVERAGE("}
     end
 end
}.
{DB} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DB("]};
         false -> {func, "DB("}
     end
 end
}.
{RADIANS} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"RADIANS("]};
         false -> {func, "RADIANS("}
     end
 end
}.
{KURT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"KURT("]};
         false -> {func, "KURT("}
     end
 end
}.
{TEXT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TEXT("]};
         false -> {func, "TEXT("}
     end
 end
}.
{ROWS} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ROWS("]};
         false -> {func, "ROWS("}
     end
 end
}.
{SUMPRODUCT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SUMPRODUCT("]};
         false -> {func, "SUMPRODUCT("}
     end
 end
}.
{MMULT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MMULT("]};
         false -> {func, "MMULT("}
     end
 end
}.
{VAR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"VAR("]};
         false -> {func, "VAR("}
     end
 end
}.
{REPLACE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"REPLACE("]};
         false -> {func, "REPLACE("}
     end
 end
}.
{DMAX} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DMAX("]};
         false -> {func, "DMAX("}
     end
 end
}.
{IRR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"IRR("]};
         false -> {func, "IRR("}
     end
 end
}.
{TIMEVALUE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TIMEVALUE("]};
         false -> {func, "TIMEVALUE("}
     end
 end
}.
{TRUNC} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TRUNC("]};
         false -> {func, "TRUNC("}
     end
 end
}.
{PERCENTILE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"PERCENTILE("]};
         false -> {func, "PERCENTILE("}
     end
 end
}.
{QUARTILE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"QUARTILE("]};
         false -> {func, "QUARTILE("}
     end
 end
}.
{ISERR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ISERR("]};
         false -> {func, "ISERR("}
     end
 end
}.
{IPMT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"IPMT("]};
         false -> {func, "IPMT("}
     end
 end
}.
{MID} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MID("]};
         false -> {func, "MID("}
     end
 end
}.
{STDEVPA} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"STDEVPA("]};
         false -> {func, "STDEVPA("}
     end
 end
}.
{MATCH} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MATCH("]};
         false -> {func, "MATCH("}
     end
 end
}.
{LEFT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"LEFT("]};
         false -> {func, "LEFT("}
     end
 end
}.
{AVERAGE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"AVERAGE("]};
         false -> {func, "AVERAGE("}
     end
 end
}.
{VARA} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"VARA("]};
         false -> {func, "VARA("}
     end
 end
}.
{STDEVP} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"STDEVP("]};
         false -> {func, "STDEVP("}
     end
 end
}.
{POWER} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"POWER("]};
         false -> {func, "POWER("}
     end
 end
}.
{HARMEAN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"HARMEAN("]};
         false -> {func, "HARMEAN("}
     end
 end
}.
{LEN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"LEN("]};
         false -> {func, "LEN("}
     end
 end
}.
{CODE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"CODE("]};
         false -> {func, "CODE("}
     end
 end
}.
{SUMX2MY2} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SUMX2MY2("]};
         false -> {func, "SUMX2MY2("}
     end
 end
}.
{PMT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"PMT("]};
         false -> {func, "PMT("}
     end
 end
}.
{HLOOKUP} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"HLOOKUP("]};
         false -> {func, "HLOOKUP("}
     end
 end
}.
{POISSON} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"POISSON("]};
         false -> {func, "POISSON("}
     end
 end
}.
{CELL} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"CELL("]};
         false -> {func, "CELL("}
     end
 end
}.
{EXACT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"EXACT("]};
         false -> {func, "EXACT("}
     end
 end
}.
{INTERSECT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"INTERSECT("]};
         false -> {func, "INTERSECT("}
     end
 end
}.
{GAMMADIST} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"GAMMADIST("]};
         false -> {func, "GAMMADIST("}
     end
 end
}.
{PPMT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"PPMT("]};
         false -> {func, "PPMT("}
     end
 end
}.
{ROUNDUP} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ROUNDUP("]};
         false -> {func, "ROUNDUP("}
     end
 end
}.
{EXPONDIST} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"EXPONDIST("]};
         false -> {func, "EXPONDIST("}
     end
 end
}.
{VARPA} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"VARPA("]};
         false -> {func, "VARPA("}
     end
 end
}.
{ROUND} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ROUND("]};
         false -> {func, "ROUND("}
     end
 end
}.
{ABS} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ABS("]};
         false -> {func, "ABS("}
     end
 end
}.
{AND} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"AND("]};
         false -> {func, "AND("}
     end
 end
}.
{MOD} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MOD("]};
         false -> {func, "MOD("}
     end
 end
}.
{SUBSTITUTE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SUBSTITUTE("]};
         false -> {func, "SUBSTITUTE("}
     end
 end
}.
{SYD} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SYD("]};
         false -> {func, "SYD("}
     end
 end
}.
{ACOS} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ACOS("]};
         false -> {func, "ACOS("}
     end
 end
}.
{SUMX2PY2} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SUMX2PY2("]};
         false -> {func, "SUMX2PY2("}
     end
 end
}.
{NORMDIST} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"NORMDIST("]};
         false -> {func, "NORMDIST("}
     end
 end
}.
{COVAR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"COVAR("]};
         false -> {func, "COVAR("}
     end
 end
}.
{MIN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MIN("]};
         false -> {func, "MIN("}
     end
 end
}.
{COUNTBLANK} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"COUNTBLANK("]};
         false -> {func, "COUNTBLANK("}
     end
 end
}.
{SEARCH} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SEARCH("]};
         false -> {func, "SEARCH("}
     end
 end
}.
{DSUM} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DSUM("]};
         false -> {func, "DSUM("}
     end
 end
}.
{GETPIVOTDATA} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"GETPIVOTDATA("]};
         false -> {func, "GETPIVOTDATA("}
     end
 end
}.
{FLOOR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"FLOOR("]};
         false -> {func, "FLOOR("}
     end
 end
}.
{ISNONTEXT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ISNONTEXT("]};
         false -> {func, "ISNONTEXT("}
     end
 end
}.
{TAN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TAN("]};
         false -> {func, "TAN("}
     end
 end
}.
{TRIM} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TRIM("]};
         false -> {func, "TRIM("}
     end
 end
}.
{CHIINV} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"CHIINV("]};
         false -> {func, "CHIINV("}
     end
 end
}.
{SUMXMY2} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SUMXMY2("]};
         false -> {func, "SUMXMY2("}
     end
 end
}.
{ROW} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ROW("]};
         false -> {func, "ROW("}
     end
 end
}.
{MAXA} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MAXA("]};
         false -> {func, "MAXA("}
     end
 end
}.
{ZTEST} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ZTEST("]};
         false -> {func, "ZTEST("}
     end
 end
}.
{MINA} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MINA("]};
         false -> {func, "MINA("}
     end
 end
}.
{DOLLAR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DOLLAR("]};
         false -> {func, "DOLLAR("}
     end
 end
}.
{MIRR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MIRR("]};
         false -> {func, "MIRR("}
     end
 end
}.
{DSTDEV} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DSTDEV("]};
         false -> {func, "DSTDEV("}
     end
 end
}.
{NORMSDIST} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"NORMSDIST("]};
         false -> {func, "NORMSDIST("}
     end
 end
}.
{TREND} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TREND("]};
         false -> {func, "TREND("}
     end
 end
}.
{YEAR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"YEAR("]};
         false -> {func, "YEAR("}
     end
 end
}.
{DEGREES} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DEGREES("]};
         false -> {func, "DEGREES("}
     end
 end
}.
{INT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"INT("]};
         false -> {func, "INT("}
     end
 end
}.

\n : {end_token, {'$end'}}.
.  : {token, {stuff, YYtext}}.

