#!/usr/bin/env escript
%% -*- erlang -*-
%%! -boot ebin/start_ssl -proto_dist inet_ssl -ssl_dist_opt server_certfile "priv/keys/servercert.pem" -ssl_dist_opt client_certfile "priv/keys/clientcert.pem" -ssl_dist_opt keyfile "priv/keys/key.pem"

main([File]) -> test(File).

test(File) ->
    code:add_patha("../../../mochiweb/ebin"),
    {ok, Terms} = file:consult(File),
    Ret = test_encoding(Terms, true),
    case Ret of
        true  -> io:format("Json is good: writing .hrl file~n"),
                 make_hrl(Terms, []);
        false -> io:format("Json is bad: not writing .hrl file~n")
    end.

make_hrl([], Acc) -> Delim = io_lib:format(",~n", []),
                     File = "-define(FNS_EN_GB, "
                         ++ string:join(lists:reverse(Acc), Delim) ++ ").",
                     write(File);
make_hrl([H | T], Acc) ->
    Str = io_lib:print(H), 
    make_hrl(T, [Str, Acc]).

write(File) ->
    case file:open("funs_en_gb.hrl", [write]) of
        {ok, Id} ->
            io:fwrite(Id, "~s~n", [File]),
            file:close(Id);
        _ ->
            error
    end.

test_encoding([], Status) -> Status;
test_encoding([H | T], Status) ->
    NewStatus = try
                    mochijson:encode(H),
                    Status
                catch
                    exit: Err ->
                        io:format("Error ~p~nwhen making json for Term ~p~n", [Err, H]),
                        false
                end,    
    test_encoding(T, NewStatus).
