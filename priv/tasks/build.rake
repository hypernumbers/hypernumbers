# =============================================================================
# = Description: Tasks to build the codebase.                                 =
# = Author:      Hasan Veldstra <hasan@hypernumbers.com>                      =
# =              Originally ported from build scripts by Gordon Guthrie.      =
# = Created:     4 Nov 2007                                                   =
# =============================================================================

require "find"

# Add files to be compiled to one of the arrays below.

CODE_PATHS = [
  "/opt/eunit/ebin/"
]

INCLUDES = [
  "#{SVNROOT}/conf/include/development",
  "#{SVNROOT}/include",
  "#{SVNROOT}/lib/read_excel-1.0/include",
  "#{SVNROOT}/lib/ibrowse-1.1/include",
  "#{SVNROOT}priv/parsers/include",
  "/usr/local/lib/yaws/include",
  "/usr/local/lib/erlang/lib/xmerl-1.1.4/include"
]

prepend_svnroot = Proc.new { |p| [p[0], File.join(SVNROOT, p[1]), File.join(SVNROOT, p[2])] }

# This is for code that will be part of the production system.
# All paths are relative to SVNROOT.
# Each entry consists of: [description of code, source directory, output directory].
PRODUCTION_CODE = [
   ["engine", "/lib/engine-1.0/src/", "/lib/engine-1.0/ebin/"],
   ["db_access", "/lib/db_access-1.0/src/", "/lib/db_access-1.0/ebin/"],
   ["utilities", "/lib/utilities-1.0/src/", "/lib/utilities-1.0/ebin/"],
   ["remoting", "/lib/remoting-1.0/src/", "/lib/remoting-1.0/ebin/"],
   ["read_excel", "/lib/read_excel-1.0/src/", "/lib/read_excel-1.0/ebin"],
   ["pp_man", "/lib/pp_man-1.0/src/", "/lib/pp_man-1.0/ebin"],
   ["ejson", "/lib/ejson-1/src/", "/lib/ejson-1/ebin"],
   ["hypernumbers website", "/lib/hypernumbers.com-1.0/src/", "/lib/hypernumbers.com-1.0/ebin"]
].map(&prepend_svnroot)

# This is for any code that production code depends on, utilities etc.
HELPER_CODE = [
  ["Parsers compile files", "/priv/parsers/src/", "/priv/parsers/ebin/"],
  ["Utility files for the parsers", "/lib/parser-1.0/src/", "/lib/parser-1.0/ebin"],
  ["Bits and bobs", "/src/", "/ebin/"]
].map(&prepend_svnroot)

FLEX_FILES = [
  ["charts", "priv/flex/chart.mxml", "include/docroot/charts/chart.swf"],
  ["spriki GUI", "priv/flex/spriki.mxml", "include/docroot/swf/spriki.swf"],
  ["administration GUI", "priv/flex/pageadmin.mxml", "include/docroot/swf/pageadmin.swf"]
  
  # Demo apps
  # ["", "priv/flex/jeteasy.mxml", "include/docroot/swf/jeteasy.swf"],
  # ["", "priv/flex/jeteasyindex.mxml", "include/docroot/swf/jeteasyindex.swf"],
  # ["", "priv/flex/bryanair.mxml", "include/docroot/swf/bryanair.swf"],
  # ["", "priv/flex/bryanairindex.mxml", "include/docroot/swf/bryanairindex.swf"],
  # ["", "priv/flex/fr.mxml", "include/docroot/swf/fr.swf"],
  # ["", "priv/flex/frindex.mxml", "include/docroot/swf/frindex.swf"]
].map(&prepend_svnroot)


# Given an array of records (like PRODUCTION_CODE, or HELPER_CODE), compiles all
# .erl files under specified directories, and prints errors if there are any.
def compile(records)  
  records.each do |rec|
    puts ">>>> #{rec[0]}"
    Find.find(rec[1]) do |file|
      if /(.erl)$/.match(file)
        with_code_paths = CODE_PATHS.collect { |p| "-pa #{p}" }.join(" ")
        with_includes = INCLUDES.collect { |i| "-I #{i}" }.join(" ")
        output = %x{erlc #{with_code_paths} #{with_includes} -o #{rec[2]} #{file}}
        
        if $?.success?
          puts "- #{File.basename(file)} => OK"
        else
          puts "- #{File.basename(file)} => ERROR"
          print_error(output)
        end
      end
    end
  end
end

# TODO: Show compilation warnings.
desc "Does the full build."
task :build => [:prepare_dirs, :compile_flex, :compile_code] do
  print_banner("Building the codebase")
  puts ""
end

desc "Compiles code."
task :compile_code do
  puts "* Compiling helper code"
  compile(HELPER_CODE)
  
  puts "\n* Compiling production code"
  compile(PRODUCTION_CODE)
  
  puts "\n* Compiling lexer and parser"
  output = %x{erl -noshell -pa #{File.join(SVNROOT, "priv", "parsers", "ebin")} -s make_parser make -s init stop}
  if $?.success?
    puts "- OK"
  else
    puts "- ERROR"
    print_error(output)
  end  
end

desc "Compiles Flex GUIs."
task :compile_flex do
  print_banner("Compiling Flex GUIs")
  
  # Have to use absolute paths because this will run in a cron job, which have
  # no access to environment variables like $PATH.
  compiler = "/usr/local/bin/mxmlc"
  options = "-keep-generated-actionscript --strict=true"

  FLEX_FILES.each do |rec|
    output = %x{#{compiler} #{options} --file-specs #{rec[1]} --output #{rec[2]}}
    
    if $?.success?
      puts "#{File.basename(rec[1])} => OK"
    else
      puts "#{File.basename(rec[1])} => OK"
      print_error(output)
    end
  end
end

desc "Creates directories that build depends on."
task :prepare_dirs do
  `mkdir #{SVNROOT}/ebin 2>/dev/null`
  `mkdir /tmp/spriki/yaws 2>/dev/null`
end

desc "Cleans *.beam files generated by build task"
task :clean do
  print_banner("Removing *.beam files generated by build task.")
  `find . -name "*.beam" | grep -v test_server | grep -v yaws | grep -v eunit | grep -v scratch_boot | xargs rm`
  puts "- OK" if $?.success?
end
