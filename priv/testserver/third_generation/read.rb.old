#!/usr/bin/env ruby -wKU

# Reads an Excel file and dumps the result in two sets of Yaml.
# The arguments are a filename and a list of ranges
# These ranges refer to cell ranges on a series of sheets reading left to right in
# an Excel workbook
#
# This function first iterates over the ranges for the contiguous set of sheets and generates a Yaml
# output describing them - this Yaml ouput is called filename.test.yaml and will be used to generate
# the test suite
#
# Then this function reads *all* the sheets - and iterates over *all* the cells on each of them and
# generates a Yaml file - this Yaml file is used to setup the tests.
#
# The purpose of this is that it allows us to seperate to do test setup in a spreadsheet and then to
# remove the setup from the actual list of tests.
#
# Example - a file simple.xls has three sheets "basic", "advanced" and "data". This function is invoked
# with read simple.xls A1:B10 A1:G17
#
# The test suite will be set up with all cells on all three sheets, but there will only be an actual
# for populated cells in range A1:B10 on sheet "basic" and range A1:G17 on sheet "advanced"
# <hasan@hypernumbers.com>

require "workbook"
require "yaml"
require "win32ole"

filename = ARGV[0]
ranges = ARGV[1..ARGV.length - 1]

w = Workbook.new(ARGV[0])

# First generate the test Yaml
hash = {}
hash["data"] = {}

(0..ranges.length - 1).to_a.zip(ranges).each { |pair|
  sheet_idx = pair[0]
  range = pair[1]

  hash["data"] = w.range(range, sheet_idx)
}

hash["source-file"] = filename
hash["generated-on"] = Time.now

File.open("#{File.basename(ARGV[0])}.test.yaml", "w") { |f| f << hash.to_yaml }

# Now generate the full Yaml
w.ole_methods.each {|method|
    puts "Method is #{method}"
  }

NoOfSheets=w.Worksheets.count
puts "Total no of worksheets is #{NoOfSheets}"