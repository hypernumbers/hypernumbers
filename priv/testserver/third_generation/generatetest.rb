#!/usr/bin/env ruby -wKU
#-------------------------------------------------------------------------------
# Description: Takes a YAML file describing an Excel file (generated by 
#              readexcel.rb), and creates a reverse compile test suite from it.
#
# Author:      Hasan Veldstra <hasan@hypernumbers.com>
# Created on:  18 Oct 2007
#-------------------------------------------------------------------------------

#TODO: Think about using the extra information available to help debug import errors.

require "yaml"

# Determines the type of a cell given its contents (formula & value as read by Excel).
def get_type(cell_data)
  return :formula if cell_data["formula"][0,1] == "=" && cell_data["formula"].length > 1
  return :number if cell_data["value"].kind_of?(Numeric)
  return :string if cell_data["value"].kind_of?(String)
  return :date if cell_data["value"].kind_of?(Time)
  return :boolean if (cell_data["value"].class == TrueClass || cell_data["value"].class == FalseClass)
end

# ====================================
# = Erlang code generation functions =
# ====================================
def erl_testcase(name, expected, got, output, doc = "")
<<-eos
#{name}(doc) -> [{userdata,[{"#{doc}"}]}];
#{name}(Config) -> 
  #{output}
  test_util:expected2(#{expected}, #{got}).
  
eos
end

def module_header(source_file, timestamp, modname)
<<-eos
% This module has been generated by generatetest.rb
% DO NOT EDIT MANUALLY.
%
% Source file: #{source_file}
% Generated on: #{timestamp}

-module(#{modname}).
-compile(export_all).
-include("ct.hrl").


eos
end

def init_per_suite(source_file,mod_name)
<<-eos
init_per_suite(Config) ->
    code:add_patha("../../../../ebin"),
    production_boot:setup_paths(),
    Data = test_util:read_excel_file("/Win Excel 2007 (as 97)/#{source_file}"),
    %% io:format("in init_per_suite Data is ~p~n",[Data]),
    lists:merge([Config, [{#{mod_name}, Data}]]).
  
eos
end

def end_per_suite
<<-eos
end_per_suite(_Config) ->
    ok.
  
eos
end

def init_per_testcase
<<-eos
init_per_testcase(_TestCase, Config) -> Config.

eos
end

def end_per_testcase
<<-eos
end_per_testcase(_TestCase, _Config) -> ok.

eos
end

def read_from_excel_data(mod_name)
<<-eos
read_from_excel_data(Config,{Sheet,Row,Col}) ->
  test_util:read_from_excel_data(Config,#{mod_name},{Sheet,Row,Col}).

eos
end

def all(test_cases)
<<-eos
all() -> 
    [#{test_cases}
    ].
  
eos
end

# ==============================================================
# = Main part: read YAML file, and generate test case from it. =
# ==============================================================

hash = File.open(ARGV[0]) { |f| YAML::load(f) }

modname = "#{File.basename(ARGV[0], ".yaml").downcase}_SUITE"
puts "modname is #{modname}"

File.open("#{modname}.erl", "w") do |suite|
  suite << module_header(hash["source-file"], Time.now.to_s, modname) +
           init_per_suite(hash["source-file"], modname) +
           end_per_suite() +
           init_per_testcase() +
           end_per_testcase() + 
           read_from_excel_data(modname)
  
  # Keep a list of names of generated test cases for all().
  test_names = []
  
  # Write test cases.
  hash.each do |sheet|
    #puts "sheet is #{sheet}"
     if sheet[0] != "source-file" && sheet[0] != "generated-on"
      sheet[1].each do |col_cells|
      #puts "col_cells are #{col_cells}"
      # col_cells will contain something like:
      # ["B", 
      #   { 5 => {"formula"=>"=UPPER(\"hello\")", "value"=>"HELLO"}, 
      #     3 => {"formula"=>"=1>0", "value"=>true},
      #     4 => {"formula"=>"zhopa", "value"=>"zhopa"}}]
      # Where "B" is, of course, the name of the column, and the elements in the
      # hash are { row_number => value } pairs.
    
        col_cells[1].each do |row_data|
          #puts "row data is #{row_data}"
          # row_data data will contain something like:
          # [1, {"formula" => "=2 * 2.5", "value" => 5}]
        
          # This will give us a name like sheet1_c15_test
          name = "#{sheet[0].downcase}_#{col_cells[0].downcase}#{row_data[0]}_test"
          test_names << name
          #puts "get_type(row_data[1]) is #{get_type(row_data[1])}"
          got, type =  case get_type(row_data[1])
                                     when :formula
                                       ["\"#{row_data[1]["formula"]}\"", :formula]
                                     when :number
                                       ["#{row_data[1]["value"]}", :number]
                                     when :boolean
                                       ["#{row_data[1]["value"]}", :boolean]
                                     when :string
                                       ["\"#{row_data[1]["value"]}\"", :string]
                                     when :date
                                       ["\"#{row_data[1]["value"]}\"", :date]
                                     else
                                       ["\"not tested (type not supported by generatetest.rb yet)\"", 0, :not_supported]
                                     end

          got2 = "{#{type.to_s},#{got}}"
          expected="read_from_excel_data(Config,{\"#{sheet[0]}\",#{row_data[0]-1},#{col_cells[0][-1]-65}})"
          output = "io:format(\"Expected : ~p~nGot      : ~p~n\",[#{got2},#{expected}]),"
        suite << erl_testcase(name, expected, got2, output)
        end
      end
    end
  end
  
  # Three spaces after the line break, so that the output is formatted nicely.
  suite << all(test_names.join(",\n   ")) 
end