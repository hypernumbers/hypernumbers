%% Lexer for Russian frontend for Muin.
%% Hasan Veldstra <hasan@hypernumbers.com>
%% Generated by generate_lexer.rb on Tue Aug 26 17:05:04 BST 2008

Definitions.

STRING    = (\"[^"\n]*\")
%" % Syntax highlighting fix.
WHITESPACE = ([\000-\s]*)
ALLOWED_PREFIXES = (\s+|=|\+|\-|\*|\/)

IPMT = ({ALLOWED_PREFIXES})(\320\237\320\233\320\237\320\240\320\236\320\246)(\s*)(\()
SMALL = ({ALLOWED_PREFIXES})(\320\235\320\220\320\230\320\234\320\225\320\235\320\254\320\250\320\230\320\231)(\s*)(\()
PI = ({ALLOWED_PREFIXES})(\320\237\320\230)(\s*)(\()
MATCH = ({ALLOWED_PREFIXES})(\320\237\320\236\320\230\320\241\320\232\320\237\320\236\320\227)(\s*)(\()
SECOND = ({ALLOWED_PREFIXES})(\320\241\320\225\320\232\320\243\320\235\320\224\320\253)(\s*)(\()
DOLLARDE = ({ALLOWED_PREFIXES})(\320\240\320\243\320\221\320\233\320\254\56\320\224\320\225\320\241)(\s*)(\()
ISERROR = ({ALLOWED_PREFIXES})(\320\225\320\236\320\250\320\230\320\221\320\232\320\220)(\s*)(\()
ODD = ({ALLOWED_PREFIXES})(\320\235\320\225\320\247\320\201\320\242)(\s*)(\()
IMEXP = ({ALLOWED_PREFIXES})(\320\234\320\235\320\230\320\234\56\105\130\120)(\s*)(\()
ISREF = ({ALLOWED_PREFIXES})(\320\225\320\241\320\241\320\253\320\233\320\232\320\220)(\s*)(\()
LOWER = ({ALLOWED_PREFIXES})(\320\241\320\242\320\240\320\236\320\247\320\235)(\s*)(\()
RIGHT = ({ALLOWED_PREFIXES})(\320\237\320\240\320\220\320\222\320\241\320\230\320\234\320\222)(\s*)(\()
LOG10 = ({ALLOWED_PREFIXES})(\114\117\107\61\60)(\s*)(\()
YIELDDISC = ({ALLOWED_PREFIXES})(\320\224\320\236\320\245\320\236\320\224\320\241\320\232\320\230\320\224\320\232\320\220)(\s*)(\()
VLOOKUP = ({ALLOWED_PREFIXES})(\320\222\320\237\320\240)(\s*)(\()
TRIMMEAN = ({ALLOWED_PREFIXES})(\320\243\320\240\320\225\320\241\320\240\320\225\320\224\320\235\320\225\320\225)(\s*)(\()
CODE = ({ALLOWED_PREFIXES})(\320\232\320\236\320\224\320\241\320\230\320\234\320\222)(\s*)(\()
PRICEMAT = ({ALLOWED_PREFIXES})(\320\246\320\225\320\235\320\220\320\237\320\236\320\223\320\220\320\250)(\s*)(\()
HOUR = ({ALLOWED_PREFIXES})(\320\247\320\220\320\241)(\s*)(\()
DATE = ({ALLOWED_PREFIXES})(\320\224\320\220\320\242\320\220)(\s*)(\()
DDB = ({ALLOWED_PREFIXES})(\320\224\320\224\320\236\320\221)(\s*)(\()
CELL = ({ALLOWED_PREFIXES})(\320\257\320\247\320\225\320\231\320\232\320\220)(\s*)(\()
EXACT = ({ALLOWED_PREFIXES})(\320\241\320\236\320\222\320\237\320\220\320\224)(\s*)(\()
IMSIN = ({ALLOWED_PREFIXES})(\320\234\320\235\320\230\320\234\56\123\111\116)(\s*)(\()
DURATION = ({ALLOWED_PREFIXES})(\320\224\320\233\320\230\320\242)(\s*)(\()
SQRT = ({ALLOWED_PREFIXES})(\320\232\320\236\320\240\320\225\320\235\320\254)(\s*)(\()
HLOOKUP = ({ALLOWED_PREFIXES})(\320\223\320\237\320\240)(\s*)(\()
ISLOGICAL = ({ALLOWED_PREFIXES})(\320\225\320\233\320\236\320\223\320\230\320\247)(\s*)(\()
FACT = ({ALLOWED_PREFIXES})(\320\244\320\220\320\232\320\242\320\240)(\s*)(\()
LOGEST = ({ALLOWED_PREFIXES})(\320\233\320\223\320\240\320\244\320\237\320\240\320\230\320\221\320\233)(\s*)(\()
IMCONJUGATE = ({ALLOWED_PREFIXES})(\320\234\320\235\320\230\320\234\56\320\241\320\236\320\237\320\240\320\257\320\226)(\s*)(\()
ERF = ({ALLOWED_PREFIXES})(\320\244\320\236\320\250)(\s*)(\()
DVAR = ({ALLOWED_PREFIXES})(\320\221\320\224\320\224\320\230\320\241\320\237)(\s*)(\()
SLOPE = ({ALLOWED_PREFIXES})(\320\235\320\220\320\232\320\233\320\236\320\235)(\s*)(\()
MROUND = ({ALLOWED_PREFIXES})(\320\236\320\232\320\240\320\243\320\223\320\233\320\242)(\s*)(\()
IMSUB = ({ALLOWED_PREFIXES})(\320\234\320\235\320\230\320\234\56\320\240\320\220\320\227\320\235)(\s*)(\()
BINOMDIST = ({ALLOWED_PREFIXES})(\320\221\320\230\320\235\320\236\320\234\320\240\320\220\320\241\320\237)(\s*)(\()
ROUNDUP = ({ALLOWED_PREFIXES})(\320\236\320\232\320\240\320\243\320\223\320\233\320\222\320\222\320\225\320\240\320\245)(\s*)(\()
ACOSH = ({ALLOWED_PREFIXES})(\101\103\117\123\110)(\s*)(\()
WORKDAY = ({ALLOWED_PREFIXES})(\320\240\320\220\320\221\320\224\320\225\320\235\320\254)(\s*)(\()
ROUND = ({ALLOWED_PREFIXES})(\320\236\320\232\320\240\320\243\320\223\320\233)(\s*)(\()
GAMMAINV = ({ALLOWED_PREFIXES})(\320\223\320\220\320\234\320\234\320\220\320\236\320\221\320\240)(\s*)(\()
NETWORKDAYS = ({ALLOWED_PREFIXES})(\320\247\320\230\320\241\320\242\320\240\320\220\320\221\320\224\320\235\320\230)(\s*)(\()
IMLN = ({ALLOWED_PREFIXES})(\320\234\320\235\320\230\320\234\56\114\116)(\s*)(\()
COUPNUM = ({ALLOWED_PREFIXES})(\320\247\320\230\320\241\320\233\320\232\320\243\320\237\320\236\320\235)(\s*)(\()
IF = ({ALLOWED_PREFIXES})(\320\225\320\241\320\233\320\230)(\s*)(\()
DGET = ({ALLOWED_PREFIXES})(\320\221\320\230\320\227\320\222\320\233\320\225\320\247\320\254)(\s*)(\()
INDEX = ({ALLOWED_PREFIXES})(\320\230\320\235\320\224\320\225\320\232\320\241)(\s*)(\()
WEEKDAY = ({ALLOWED_PREFIXES})(\320\224\320\225\320\235\320\254\320\235\320\225\320\224)(\s*)(\()
SEARCH = ({ALLOWED_PREFIXES})(\320\237\320\236\320\230\320\241\320\232)(\s*)(\()
ATANH = ({ALLOWED_PREFIXES})(\101\124\101\116\110)(\s*)(\()
NPV = ({ALLOWED_PREFIXES})(\320\235\320\237\320\227)(\s*)(\()
SQRTPI = ({ALLOWED_PREFIXES})(\320\232\320\236\320\240\320\225\320\235\320\254\320\237\320\230)(\s*)(\()
ODDLPRICE = ({ALLOWED_PREFIXES})(\320\246\320\225\320\235\320\220\320\237\320\236\320\241\320\233\320\235\320\225\320\240\320\225\320\223)(\s*)(\()
ISNONTEXT = ({ALLOWED_PREFIXES})(\320\225\320\235\320\225\320\242\320\225\320\232\320\241\320\242)(\s*)(\()
TRIM = ({ALLOWED_PREFIXES})(\320\241\320\226\320\237\320\240\320\236\320\221\320\225\320\233\320\253)(\s*)(\()
SUMXMY2 = ({ALLOWED_PREFIXES})(\320\241\320\243\320\234\320\234\320\232\320\222\320\240\320\220\320\227\320\235)(\s*)(\()
IMCOS = ({ALLOWED_PREFIXES})(\320\234\320\235\320\230\320\234\56\103\117\123)(\s*)(\()
N = ({ALLOWED_PREFIXES})(\320\247)(\s*)(\()
VALUE = ({ALLOWED_PREFIXES})(\320\227\320\235\320\220\320\247\320\225\320\235)(\s*)(\()
OCT2DEC = ({ALLOWED_PREFIXES})(\320\222\320\236\320\241\320\254\320\234\56\320\222\56\320\224\320\225\320\241)(\s*)(\()
TBILLEQ = ({ALLOWED_PREFIXES})(\320\240\320\220\320\222\320\235\320\236\320\232\320\247\320\225\320\232)(\s*)(\()
PV = ({ALLOWED_PREFIXES})(\320\237\320\227)(\s*)(\()
TREND = ({ALLOWED_PREFIXES})(\320\242\320\225\320\235\320\224\320\225\320\235\320\246\320\230\320\257)(\s*)(\()
AVEDEV = ({ALLOWED_PREFIXES})(\320\241\320\240\320\236\320\242\320\232\320\233)(\s*)(\()
TBILLYIELD = ({ALLOWED_PREFIXES})(\320\224\320\236\320\245\320\236\320\224\320\247\320\225\320\232)(\s*)(\()
DSTDEV = ({ALLOWED_PREFIXES})(\320\224\320\241\320\242\320\220\320\235\320\224\320\236\320\242\320\232\320\233)(\s*)(\()
YEAR = ({ALLOWED_PREFIXES})(\320\223\320\236\320\224)(\s*)(\()
PRICEDISC = ({ALLOWED_PREFIXES})(\320\246\320\225\320\235\320\220\320\241\320\232\320\230\320\224\320\232\320\220)(\s*)(\()
ISODD = ({ALLOWED_PREFIXES})(\320\225\320\235\320\225\320\247\320\201\320\242)(\s*)(\()
ERROR.TYPE = ({ALLOWED_PREFIXES})(\320\242\320\230\320\237\56\320\236\320\250\320\230\320\221\320\232\320\230)(\s*)(\()
FIND = ({ALLOWED_PREFIXES})(\320\235\320\220\320\231\320\242\320\230)(\s*)(\()
SINH = ({ALLOWED_PREFIXES})(\123\111\116\110)(\s*)(\()
DVARP = ({ALLOWED_PREFIXES})(\320\221\320\224\320\224\320\230\320\241\320\237\320\237)(\s*)(\()
COUPDAYBS = ({ALLOWED_PREFIXES})(\320\224\320\235\320\225\320\231\320\232\320\243\320\237\320\236\320\235\320\224\320\236)(\s*)(\()
SUM = ({ALLOWED_PREFIXES})(\320\241\320\243\320\234\320\234)(\s*)(\()
ODDFPRICE = ({ALLOWED_PREFIXES})(\320\246\320\225\320\235\320\220\320\237\320\225\320\240\320\235\320\225\320\240\320\225\320\223)(\s*)(\()
COLUMNS = ({ALLOWED_PREFIXES})(\320\247\320\230\320\241\320\233\320\241\320\242\320\236\320\233\320\221)(\s*)(\()
RAND = ({ALLOWED_PREFIXES})(\320\241\320\233\320\247\320\230\320\241)(\s*)(\()
HEX2OCT = ({ALLOWED_PREFIXES})(\320\250\320\225\320\241\320\242\320\235\56\320\222\56\320\222\320\236\320\241\320\254\320\234)(\s*)(\()
XIRR = ({ALLOWED_PREFIXES})(\320\247\320\230\320\241\320\242\320\222\320\235\320\224\320\236\320\245)(\s*)(\()
DMIN = ({ALLOWED_PREFIXES})(\320\224\320\234\320\230\320\235)(\s*)(\()
IMSUM = ({ALLOWED_PREFIXES})(\320\234\320\235\320\230\320\234\56\320\241\320\243\320\234\320\234)(\s*)(\()
T = ({ALLOWED_PREFIXES})(\320\242)(\s*)(\()
ATAN = ({ALLOWED_PREFIXES})(\101\124\101\116)(\s*)(\()
TRUE = ({ALLOWED_PREFIXES})(\320\230\320\241\320\242\320\230\320\235\320\220)(\s*)(\()
FIXED = ({ALLOWED_PREFIXES})(\320\244\320\230\320\232\320\241\320\230\320\240\320\236\320\222\320\220\320\235\320\235\320\253\320\231)(\s*)(\()
CUMPRINC = ({ALLOWED_PREFIXES})(\320\236\320\221\320\251\320\224\320\236\320\245\320\236\320\224)(\s*)(\()
EDATE = ({ALLOWED_PREFIXES})(\320\224\320\220\320\242\320\220\320\234\320\225\320\241)(\s*)(\()
DCOUNT = ({ALLOWED_PREFIXES})(\320\221\320\241\320\247\320\201\320\242)(\s*)(\()
NOMINAL = ({ALLOWED_PREFIXES})(\320\235\320\236\320\234\320\230\320\235\320\220\320\233)(\s*)(\()
REPT = ({ALLOWED_PREFIXES})(\320\237\320\236\320\222\320\242\320\236\320\240)(\s*)(\()
CLEAN = ({ALLOWED_PREFIXES})(\320\237\320\225\320\247\320\241\320\230\320\234\320\222)(\s*)(\()
FVSCHEDULE = ({ALLOWED_PREFIXES})(\320\221\320\227\320\240\320\220\320\241\320\237\320\230\320\241)(\s*)(\()
LN = ({ALLOWED_PREFIXES})(\114\116)(\s*)(\()
EXP = ({ALLOWED_PREFIXES})(\105\130\120)(\s*)(\()
effect = ({ALLOWED_PREFIXES})(\320\247\320\230\320\241\320\233\320\232\320\236\320\234\320\221)(\s*)(\()
COUNTIF = ({ALLOWED_PREFIXES})(\320\241\320\247\320\201\320\242\320\225\320\241\320\233\320\230)(\s*)(\()
DAY = ({ALLOWED_PREFIXES})(\320\224\320\225\320\235\320\254)(\s*)(\()
IMPOWER = ({ALLOWED_PREFIXES})(\320\234\320\235\320\230\320\234\56\320\241\320\242\320\225\320\237\320\225\320\235\320\254)(\s*)(\()
LOOKUP = ({ALLOWED_PREFIXES})(\320\237\320\240\320\236\320\241\320\234\320\236\320\242\320\240)(\s*)(\()
CEILING = ({ALLOWED_PREFIXES})(\320\236\320\232\320\240\320\222\320\222\320\225\320\240\320\245)(\s*)(\()
MONTH = ({ALLOWED_PREFIXES})(\320\234\320\225\320\241\320\257\320\246)(\s*)(\()
ADDRESS = ({ALLOWED_PREFIXES})(\320\220\320\224\320\240\320\225\320\241)(\s*)(\()
OFFSET = ({ALLOWED_PREFIXES})(\320\241\320\234\320\225\320\251)(\s*)(\()
TYPE = ({ALLOWED_PREFIXES})(\320\242\320\230\320\237)(\s*)(\()
RANK = ({ALLOWED_PREFIXES})(\320\240\320\220\320\235\320\223)(\s*)(\()
RECEIVED = ({ALLOWED_PREFIXES})(\320\237\320\236\320\233\320\243\320\247\320\225\320\235\320\236)(\s*)(\()
COSH = ({ALLOWED_PREFIXES})(\103\117\123\110)(\s*)(\()
ACCRINT = ({ALLOWED_PREFIXES})(\320\235\320\220\320\232\320\236\320\237\320\224\320\236\320\245\320\236\320\224)(\s*)(\()
COUPPCD = ({ALLOWED_PREFIXES})(\320\224\320\220\320\242\320\220\320\232\320\243\320\237\320\236\320\235\320\224\320\236)(\s*)(\()
PROB = ({ALLOWED_PREFIXES})(\320\222\320\225\320\240\320\236\320\257\320\242\320\235\320\236\320\241\320\242\320\254)(\s*)(\()
LCM = ({ALLOWED_PREFIXES})(\320\235\320\236\320\232)(\s*)(\()
RATE = ({ALLOWED_PREFIXES})(\320\235\320\236\320\240\320\234\320\220)(\s*)(\()
RADIANS = ({ALLOWED_PREFIXES})(\320\240\320\220\320\224\320\230\320\220\320\235\320\253)(\s*)(\()
OCT2BIN = ({ALLOWED_PREFIXES})(\320\222\320\236\320\241\320\254\320\234\56\320\222\56\320\224\320\222)(\s*)(\()
INFO = ({ALLOWED_PREFIXES})(\320\230\320\235\320\244\320\236\320\240\320\234)(\s*)(\()
MINUTE = ({ALLOWED_PREFIXES})(\320\234\320\230\320\235\320\243\320\242\320\253)(\s*)(\()
ASIN = ({ALLOWED_PREFIXES})(\101\123\111\116)(\s*)(\()
YIELD = ({ALLOWED_PREFIXES})(\320\224\320\236\320\245\320\236\320\224)(\s*)(\()
AREAS = ({ALLOWED_PREFIXES})(\320\236\320\221\320\233\320\220\320\241\320\242\320\230)(\s*)(\()
HEX2DEC = ({ALLOWED_PREFIXES})(\320\250\320\225\320\241\320\242\320\235\56\320\222\56\320\224\320\225\320\241)(\s*)(\()
COUPDAYS = ({ALLOWED_PREFIXES})(\320\224\320\235\320\225\320\231\320\232\320\243\320\237\320\236\320\235)(\s*)(\()
MEDIAN = ({ALLOWED_PREFIXES})(\320\234\320\225\320\224\320\230\320\220\320\235\320\220)(\s*)(\()
MMULT = ({ALLOWED_PREFIXES})(\320\234\320\243\320\234\320\235\320\236\320\226)(\s*)(\()
TANH = ({ALLOWED_PREFIXES})(\124\101\116\110)(\s*)(\()
PRODUCT = ({ALLOWED_PREFIXES})(\320\237\320\240\320\236\320\230\320\227\320\222\320\225\320\224)(\s*)(\()
REPLACE = ({ALLOWED_PREFIXES})(\320\227\320\220\320\234\320\225\320\235\320\230\320\242\320\254)(\s*)(\()
HYPGEOMDIST = ({ALLOWED_PREFIXES})(\320\223\320\230\320\237\320\225\320\240\320\223\320\225\320\236\320\234\320\225\320\242)(\s*)(\()
OR = ({ALLOWED_PREFIXES})(\320\230\320\233\320\230)(\s*)(\()
ODDLYIELD = ({ALLOWED_PREFIXES})(\320\224\320\236\320\245\320\236\320\224\320\237\320\236\320\241\320\233\320\235\320\225\320\240\320\225\320\223)(\s*)(\()
ISNA = ({ALLOWED_PREFIXES})(\320\225\320\235\320\224)(\s*)(\()
EFFECT = ({ALLOWED_PREFIXES})(\320\255\320\244\320\244\320\225\320\232\320\242)(\s*)(\()
BIN2HEX = ({ALLOWED_PREFIXES})(\320\224\320\222\56\320\222\56\320\250\320\225\320\241\320\242\320\235)(\s*)(\()
DEC2HEX = ({ALLOWED_PREFIXES})(\320\224\320\225\320\241\56\320\222\56\320\250\320\225\320\241\320\242\320\235)(\s*)(\()
NOT = ({ALLOWED_PREFIXES})(\320\235\320\225)(\s*)(\()
ISERR = ({ALLOWED_PREFIXES})(\320\225\320\236\320\250)(\s*)(\()
GCD = ({ALLOWED_PREFIXES})(\320\235\320\236\320\224)(\s*)(\()
IMDIV = ({ALLOWED_PREFIXES})(\320\234\320\235\320\230\320\234\56\320\224\320\225\320\233)(\s*)(\()
ROMAN = ({ALLOWED_PREFIXES})(\320\240\320\230\320\234\320\241\320\232\320\236\320\225)(\s*)(\()
CONFIDENCE = ({ALLOWED_PREFIXES})(\320\224\320\236\320\222\320\225\320\240\320\230\320\242)(\s*)(\()
COS = ({ALLOWED_PREFIXES})(\103\117\123)(\s*)(\()
VDB = ({ALLOWED_PREFIXES})(\320\237\320\224\320\236\320\221)(\s*)(\()
SERIESSUM = ({ALLOWED_PREFIXES})(\320\240\320\257\320\224\56\320\241\320\243\320\234)(\s*)(\()
NOW = ({ALLOWED_PREFIXES})(\320\242\320\224\320\220\320\242\320\220)(\s*)(\()
NA = ({ALLOWED_PREFIXES})(\320\235\320\224)(\s*)(\()
UPPER = ({ALLOWED_PREFIXES})(\320\237\320\240\320\236\320\237\320\230\320\241\320\235)(\s*)(\()
PERCENTRANK = ({ALLOWED_PREFIXES})(\320\237\320\240\320\236\320\246\320\225\320\235\320\242\320\240\320\220\320\235\320\223)(\s*)(\()
FREQUENCY = ({ALLOWED_PREFIXES})(\320\247\320\220\320\241\320\242\320\236\320\242\320\220)(\s*)(\()
DISC = ({ALLOWED_PREFIXES})(\320\241\320\232\320\230\320\224\320\232\320\220)(\s*)(\()
SIGN = ({ALLOWED_PREFIXES})(\320\227\320\235\320\220\320\232)(\s*)(\()
POWER = ({ALLOWED_PREFIXES})(\320\241\320\242\320\225\320\237\320\225\320\235\320\254)(\s*)(\()
BIN2OCT = ({ALLOWED_PREFIXES})(\320\224\320\222\56\320\222\56\320\222\320\236\320\241\320\254\320\234)(\s*)(\()
DEC2OCT = ({ALLOWED_PREFIXES})(\320\224\320\225\320\241\56\320\222\56\320\222\320\236\320\241\320\254\320\234)(\s*)(\()
DCOUNTA = ({ALLOWED_PREFIXES})(\320\221\320\241\320\247\320\201\320\242\320\220)(\s*)(\()
LOG = ({ALLOWED_PREFIXES})(\114\117\107)(\s*)(\()
IMABS = ({ALLOWED_PREFIXES})(\320\234\320\235\320\230\320\234\56\101\102\123)(\s*)(\()
IMREAL = ({ALLOWED_PREFIXES})(\320\234\320\235\320\230\320\234\56\320\222\320\225\320\251)(\s*)(\()
MAX = ({ALLOWED_PREFIXES})(\320\234\320\220\320\232\320\241)(\s*)(\()
LARGE = ({ALLOWED_PREFIXES})(\320\235\320\220\320\230\320\221\320\236\320\233\320\254\320\250\320\230\320\231)(\s*)(\()
DSTDEVP = ({ALLOWED_PREFIXES})(\320\224\320\241\320\242\320\220\320\235\320\224\320\236\320\242\320\232\320\233\320\237)(\s*)(\()
INDIRECT = ({ALLOWED_PREFIXES})(\320\224\320\222\320\241\320\241\320\253\320\233)(\s*)(\()
MDETERM = ({ALLOWED_PREFIXES})(\320\234\320\236\320\237\320\240\320\225\320\224)(\s*)(\()
TIME = ({ALLOWED_PREFIXES})(\320\222\320\240\320\225\320\234\320\257)(\s*)(\()
PPMT = ({ALLOWED_PREFIXES})(\320\236\320\241\320\235\320\237\320\233\320\220\320\242)(\s*)(\()
AMORLINC = ({ALLOWED_PREFIXES})(\320\220\320\234\320\236\320\240\320\243\320\222)(\s*)(\()
TODAY = ({ALLOWED_PREFIXES})(\320\241\320\225\320\223\320\236\320\224\320\235\320\257)(\s*)(\()
DPRODUCT = ({ALLOWED_PREFIXES})(\320\221\320\224\320\237\320\240\320\236\320\230\320\227\320\222\320\225\320\224)(\s*)(\()
ISNUMBER = ({ALLOWED_PREFIXES})(\320\225\320\247\320\230\320\241\320\233\320\236)(\s*)(\()
DAYS360 = ({ALLOWED_PREFIXES})(\320\224\320\235\320\225\320\231\63\66\60)(\s*)(\()
IMPRODUCT = ({ALLOWED_PREFIXES})(\320\234\320\235\320\230\320\234\56\320\237\320\240\320\236\320\230\320\227\320\222\320\225\320\224)(\s*)(\()
COMPLEX = ({ALLOWED_PREFIXES})(\320\232\320\236\320\234\320\237\320\233\320\225\320\232\320\241\320\235)(\s*)(\()
CONCATENATE = ({ALLOWED_PREFIXES})(\320\241\320\246\320\225\320\237\320\230\320\242\320\254)(\s*)(\()
DOLLARFR = ({ALLOWED_PREFIXES})(\320\240\320\243\320\221\320\233\320\254\56\320\224\320\240\320\236\320\221\320\254)(\s*)(\()
NPER = ({ALLOWED_PREFIXES})(\320\232\320\237\320\225\320\240)(\s*)(\()
INTRATE = ({ALLOWED_PREFIXES})(\320\230\320\235\320\236\320\240\320\234\320\220)(\s*)(\()
PRICE = ({ALLOWED_PREFIXES})(\320\246\320\225\320\235\320\220)(\s*)(\()
HEX2BIN = ({ALLOWED_PREFIXES})(\320\250\320\225\320\241\320\242\320\235\56\320\222\56\320\224\320\222)(\s*)(\()
CUMIPMT = ({ALLOWED_PREFIXES})(\320\236\320\221\320\251\320\237\320\233\320\220\320\242)(\s*)(\()
LINEST = ({ALLOWED_PREFIXES})(\320\233\320\230\320\235\320\225\320\231\320\235)(\s*)(\()
GESTEP = ({ALLOWED_PREFIXES})(\320\237\320\236\320\240\320\236\320\223)(\s*)(\()
ASINH = ({ALLOWED_PREFIXES})(\101\123\111\116\110)(\s*)(\()
FLOOR = ({ALLOWED_PREFIXES})(\320\236\320\232\320\240\320\222\320\235\320\230\320\227)(\s*)(\()
DB = ({ALLOWED_PREFIXES})(\320\224\320\236\320\221)(\s*)(\()
COUPDAYSNC = ({ALLOWED_PREFIXES})(\320\224\320\235\320\225\320\231\320\232\320\243\320\237\320\236\320\235\320\237\320\236\320\241\320\233\320\225)(\s*)(\()
COUNTBLANK = ({ALLOWED_PREFIXES})(\320\241\320\247\320\230\320\242\320\220\320\242\320\254\320\237\320\243\320\241\320\242\320\236\320\242\320\253)(\s*)(\()
DSUM = ({ALLOWED_PREFIXES})(\320\221\320\224\320\241\320\243\320\234\320\234)(\s*)(\()
IMLOG2 = ({ALLOWED_PREFIXES})(\320\234\320\235\320\230\320\234\56\114\117\107\62)(\s*)(\()
CHAR = ({ALLOWED_PREFIXES})(\320\241\320\230\320\234\320\222\320\236\320\233)(\s*)(\()
KURT = ({ALLOWED_PREFIXES})(\320\255\320\232\320\241\320\246\320\225\320\241\320\241)(\s*)(\()
COUPNCD = ({ALLOWED_PREFIXES})(\320\224\320\220\320\242\320\220\320\232\320\243\320\237\320\236\320\235\320\237\320\236\320\241\320\233\320\225)(\s*)(\()
STDEV = ({ALLOWED_PREFIXES})(\320\241\320\242\320\220\320\235\320\224\320\236\320\242\320\232\320\233\320\236\320\235)(\s*)(\()
YIELDMAT = ({ALLOWED_PREFIXES})(\320\224\320\236\320\245\320\236\320\224\320\237\320\236\320\223\320\220\320\250)(\s*)(\()
EOMONTH = ({ALLOWED_PREFIXES})(\320\232\320\236\320\235\320\225\320\246\320\234\320\225\320\241\320\257\320\246\320\220)(\s*)(\()
ROWS = ({ALLOWED_PREFIXES})(\320\247\320\241\320\242\320\240\320\236\320\232)(\s*)(\()
SUMPRODUCT = ({ALLOWED_PREFIXES})(\320\241\320\243\320\234\320\234\320\237\320\240\320\236\320\230\320\227\320\222)(\s*)(\()
VAR = ({ALLOWED_PREFIXES})(\320\224\320\230\320\241\320\237)(\s*)(\()
TIMEVALUE = ({ALLOWED_PREFIXES})(\320\222\320\240\320\225\320\234\320\227\320\235\320\220\320\247)(\s*)(\()
DATEVALUE = ({ALLOWED_PREFIXES})(\320\224\320\220\320\242\320\220\320\227\320\235\320\220\320\247)(\s*)(\()
IRR = ({ALLOWED_PREFIXES})(\320\222\320\235\320\224\320\236\320\245)(\s*)(\()
BIN2DEC = ({ALLOWED_PREFIXES})(\320\224\320\222\56\320\222\56\320\224\320\225\320\241)(\s*)(\()
CHOOSE = ({ALLOWED_PREFIXES})(\320\222\320\253\320\221\320\236\320\240)(\s*)(\()
IMSQRT = ({ALLOWED_PREFIXES})(\320\234\320\235\320\230\320\234\56\320\232\320\236\320\240\320\225\320\235\320\254)(\s*)(\()
AMORDEGRC = ({ALLOWED_PREFIXES})(\320\220\320\234\320\236\320\240\320\243\320\234)(\s*)(\()
PERMUT = ({ALLOWED_PREFIXES})(\320\237\320\225\320\240\320\225\320\241\320\242)(\s*)(\()
DEGREES = ({ALLOWED_PREFIXES})(\320\223\320\240\320\220\320\224\320\243\320\241\320\253)(\s*)(\()
ODDFYIELD = ({ALLOWED_PREFIXES})(\320\224\320\236\320\245\320\236\320\224\320\237\320\225\320\240\320\222\320\235\320\225\320\240\320\225\320\223)(\s*)(\()
COUNT = ({ALLOWED_PREFIXES})(\320\241\320\247\320\201\320\242)(\s*)(\()
MINVERSE = ({ALLOWED_PREFIXES})(\320\234\320\236\320\221\320\240)(\s*)(\()
MID = ({ALLOWED_PREFIXES})(\320\237\320\241\320\242\320\240)(\s*)(\()
ISTEXT = ({ALLOWED_PREFIXES})(\320\225\320\242\320\225\320\232\320\241\320\242)(\s*)(\()
XNPV = ({ALLOWED_PREFIXES})(\320\247\320\230\320\241\320\242\320\235\320\227)(\s*)(\()
VARP = ({ALLOWED_PREFIXES})(\320\224\320\230\320\241\320\237\320\240)(\s*)(\()
STANDARDIZE = ({ALLOWED_PREFIXES})(\320\235\320\236\320\240\320\234\320\220\320\233\320\230\320\227\320\220\320\246\320\230\320\257)(\s*)(\()
LEFT = ({ALLOWED_PREFIXES})(\320\233\320\225\320\222\320\241\320\230\320\234\320\222)(\s*)(\()
IMARGUMENT = ({ALLOWED_PREFIXES})(\320\234\320\235\320\230\320\234\56\320\220\320\240\320\223\320\243\320\234\320\225\320\235\320\242)(\s*)(\()
TBILLPRICE = ({ALLOWED_PREFIXES})(\320\246\320\225\320\235\320\220\320\232\320\247\320\225\320\232)(\s*)(\()
ROUNDDOWN = ({ALLOWED_PREFIXES})(\320\236\320\232\320\240\320\243\320\223\320\233\320\222\320\235\320\230\320\227)(\s*)(\()
COUNTA = ({ALLOWED_PREFIXES})(\320\241\320\247\320\201\320\242\320\227)(\s*)(\()
AVERAGE = ({ALLOWED_PREFIXES})(\320\241\320\240\320\227\320\235\320\220\320\247)(\s*)(\()
COLUMN = ({ALLOWED_PREFIXES})(\320\241\320\242\320\236\320\233\320\221\320\225\320\246)(\s*)(\()
SUMIF = ({ALLOWED_PREFIXES})(\320\241\320\243\320\234\320\234\320\225\320\241\320\233\320\230)(\s*)(\()
STEYX = ({ALLOWED_PREFIXES})(\320\241\320\242\320\236\320\250\131\130)(\s*)(\()
LEN = ({ALLOWED_PREFIXES})(\320\224\320\233\320\241\320\242\320\240)(\s*)(\()
GAMMALN = ({ALLOWED_PREFIXES})(\320\223\320\220\320\234\320\234\320\220\320\235\320\233\320\236\320\223)(\s*)(\()
FALSE = ({ALLOWED_PREFIXES})(\320\233\320\236\320\226\320\254)(\s*)(\()
SUMX2MY2 = ({ALLOWED_PREFIXES})(\320\241\320\243\320\234\320\234\320\240\320\220\320\227\320\235\320\232\320\222)(\s*)(\()
PMT = ({ALLOWED_PREFIXES})(\320\237\320\237\320\233\320\220\320\242)(\s*)(\()
YEARFRAC = ({ALLOWED_PREFIXES})(\320\224\320\236\320\233\320\257\320\223\320\236\320\224\320\220)(\s*)(\()
GAMMADIST = ({ALLOWED_PREFIXES})(\320\223\320\220\320\234\320\234\320\220\320\240\320\220\320\241\320\237)(\s*)(\()
SUMSQ = ({ALLOWED_PREFIXES})(\320\241\320\243\320\234\320\234\320\232\320\222)(\s*)(\()
DELTA = ({ALLOWED_PREFIXES})(\320\224\320\225\320\233\320\254\320\242\320\220)(\s*)(\()
EVEN = ({ALLOWED_PREFIXES})(\320\247\320\201\320\242\320\235)(\s*)(\()
ATAN2 = ({ALLOWED_PREFIXES})(\101\124\101\116\62)(\s*)(\()
RANDBETWEEN = ({ALLOWED_PREFIXES})(\320\241\320\233\320\243\320\247\320\234\320\225\320\226\320\224\320\243)(\s*)(\()
FACTDOUBLE = ({ALLOWED_PREFIXES})(\320\224\320\222\320\244\320\220\320\232\320\242\320\240)(\s*)(\()
ISEVEN = ({ALLOWED_PREFIXES})(\320\225\320\247\320\201\320\242\320\235)(\s*)(\()
IMLOG10 = ({ALLOWED_PREFIXES})(\320\234\320\235\320\230\320\234\56\114\117\107\61\60)(\s*)(\()
TRANSPOSE = ({ALLOWED_PREFIXES})(\320\242\320\240\320\220\320\235\320\241\320\237)(\s*)(\()
EXPONDIST = ({ALLOWED_PREFIXES})(\320\255\320\232\320\241\320\237\320\240\320\220\320\241\320\237)(\s*)(\()
ABS = ({ALLOWED_PREFIXES})(\101\102\123)(\s*)(\()
AND = ({ALLOWED_PREFIXES})(\320\230)(\s*)(\()
ISBLANK = ({ALLOWED_PREFIXES})(\320\225\320\237\320\243\320\241\320\242\320\236)(\s*)(\()
MOD = ({ALLOWED_PREFIXES})(\320\236\320\241\320\242\320\220\320\242)(\s*)(\()
SUBSTITUTE = ({ALLOWED_PREFIXES})(\320\237\320\236\320\224\320\241\320\242\320\220\320\222\320\230\320\242\320\254)(\s*)(\()
SYD = ({ALLOWED_PREFIXES})(\320\220\320\234\320\223\320\224)(\s*)(\()
ACOS = ({ALLOWED_PREFIXES})(\101\103\117\123)(\s*)(\()
IMAGINARY = ({ALLOWED_PREFIXES})(\320\234\320\235\320\230\320\234\56\320\247\320\220\320\241\320\242\320\254)(\s*)(\()
SUMX2PY2 = ({ALLOWED_PREFIXES})(\320\241\320\243\320\234\320\234\320\241\320\243\320\234\320\234\320\232\320\222)(\s*)(\()
SUBTOTAL = ({ALLOWED_PREFIXES})(\320\237\320\240\320\236\320\234\320\225\320\226\320\243\320\242\320\236\320\247\320\235\320\253\320\225\56\320\230\320\242\320\236\320\223\320\230)(\s*)(\()
MIN = ({ALLOWED_PREFIXES})(\320\234\320\230\320\235)(\s*)(\()
DEC2BIN = ({ALLOWED_PREFIXES})(\320\224\320\225\320\241\56\320\222\56\320\224\320\222)(\s*)(\()
DAVERAGE = ({ALLOWED_PREFIXES})(\320\224\320\241\320\240\320\227\320\235\320\220\320\247)(\s*)(\()
ERFC = ({ALLOWED_PREFIXES})(\320\224\320\244\320\236\320\250)(\s*)(\()
TAN = ({ALLOWED_PREFIXES})(\124\101\116)(\s*)(\()
QUOTIENT = ({ALLOWED_PREFIXES})(\320\247\320\220\320\241\320\242\320\235\320\236\320\225)(\s*)(\()
TEXT = ({ALLOWED_PREFIXES})(\320\242\320\225\320\232\320\241\320\242)(\s*)(\()
ROW = ({ALLOWED_PREFIXES})(\320\241\320\242\320\240\320\236\320\232\320\220)(\s*)(\()
TRUNC = ({ALLOWED_PREFIXES})(\320\236\320\242\320\221\320\240)(\s*)(\()
DOLLAR = ({ALLOWED_PREFIXES})(\320\240\320\243\320\221\320\233\320\254)(\s*)(\()
MIRR = ({ALLOWED_PREFIXES})(\320\230\320\222\320\241\320\224)(\s*)(\()
DMAX = ({ALLOWED_PREFIXES})(\320\224\320\234\320\220\320\232\320\241)(\s*)(\()
DEVSQ = ({ALLOWED_PREFIXES})(\320\232\320\222\320\220\320\224\320\240\320\236\320\242\320\232\320\233)(\s*)(\()
OCT2HEX = ({ALLOWED_PREFIXES})(\320\222\320\236\320\241\320\254\320\234\56\320\222\56\320\250\320\225\320\241\320\242\320\235)(\s*)(\()
INT = ({ALLOWED_PREFIXES})(\320\246\320\225\320\233\320\236\320\225)(\s*)(\()


Rules.

% Preserve strings as-is.
{STRING} : {token, {string, YYtext}}.
% Kill whitespace.
{WHITESPACE} : .

{IPMT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"IPMT("]};
         false -> {func, "IPMT("}
     end
 end
}.
{SMALL} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SMALL("]};
         false -> {func, "SMALL("}
     end
 end
}.
{PI} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"PI("]};
         false -> {func, "PI("}
     end
 end
}.
{MATCH} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MATCH("]};
         false -> {func, "MATCH("}
     end
 end
}.
{SECOND} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SECOND("]};
         false -> {func, "SECOND("}
     end
 end
}.
{DOLLARDE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DOLLARDE("]};
         false -> {func, "DOLLARDE("}
     end
 end
}.
{ISERROR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ISERROR("]};
         false -> {func, "ISERROR("}
     end
 end
}.
{ODD} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ODD("]};
         false -> {func, "ODD("}
     end
 end
}.
{IMEXP} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"IMEXP("]};
         false -> {func, "IMEXP("}
     end
 end
}.
{ISREF} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ISREF("]};
         false -> {func, "ISREF("}
     end
 end
}.
{LOWER} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"LOWER("]};
         false -> {func, "LOWER("}
     end
 end
}.
{RIGHT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"RIGHT("]};
         false -> {func, "RIGHT("}
     end
 end
}.
{LOG10} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"LOG10("]};
         false -> {func, "LOG10("}
     end
 end
}.
{YIELDDISC} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"YIELDDISC("]};
         false -> {func, "YIELDDISC("}
     end
 end
}.
{VLOOKUP} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"VLOOKUP("]};
         false -> {func, "VLOOKUP("}
     end
 end
}.
{TRIMMEAN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TRIMMEAN("]};
         false -> {func, "TRIMMEAN("}
     end
 end
}.
{CODE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"CODE("]};
         false -> {func, "CODE("}
     end
 end
}.
{PRICEMAT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"PRICEMAT("]};
         false -> {func, "PRICEMAT("}
     end
 end
}.
{HOUR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"HOUR("]};
         false -> {func, "HOUR("}
     end
 end
}.
{DATE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DATE("]};
         false -> {func, "DATE("}
     end
 end
}.
{DDB} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DDB("]};
         false -> {func, "DDB("}
     end
 end
}.
{CELL} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"CELL("]};
         false -> {func, "CELL("}
     end
 end
}.
{EXACT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"EXACT("]};
         false -> {func, "EXACT("}
     end
 end
}.
{IMSIN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"IMSIN("]};
         false -> {func, "IMSIN("}
     end
 end
}.
{DURATION} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DURATION("]};
         false -> {func, "DURATION("}
     end
 end
}.
{SQRT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SQRT("]};
         false -> {func, "SQRT("}
     end
 end
}.
{HLOOKUP} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"HLOOKUP("]};
         false -> {func, "HLOOKUP("}
     end
 end
}.
{ISLOGICAL} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ISLOGICAL("]};
         false -> {func, "ISLOGICAL("}
     end
 end
}.
{FACT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"FACT("]};
         false -> {func, "FACT("}
     end
 end
}.
{LOGEST} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"LOGEST("]};
         false -> {func, "LOGEST("}
     end
 end
}.
{IMCONJUGATE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"IMCONJUGATE("]};
         false -> {func, "IMCONJUGATE("}
     end
 end
}.
{ERF} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ERF("]};
         false -> {func, "ERF("}
     end
 end
}.
{DVAR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DVAR("]};
         false -> {func, "DVAR("}
     end
 end
}.
{SLOPE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SLOPE("]};
         false -> {func, "SLOPE("}
     end
 end
}.
{MROUND} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MROUND("]};
         false -> {func, "MROUND("}
     end
 end
}.
{IMSUB} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"IMSUB("]};
         false -> {func, "IMSUB("}
     end
 end
}.
{BINOMDIST} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"BINOMDIST("]};
         false -> {func, "BINOMDIST("}
     end
 end
}.
{ROUNDUP} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ROUNDUP("]};
         false -> {func, "ROUNDUP("}
     end
 end
}.
{ACOSH} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ACOSH("]};
         false -> {func, "ACOSH("}
     end
 end
}.
{WORKDAY} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"WORKDAY("]};
         false -> {func, "WORKDAY("}
     end
 end
}.
{ROUND} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ROUND("]};
         false -> {func, "ROUND("}
     end
 end
}.
{GAMMAINV} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"GAMMAINV("]};
         false -> {func, "GAMMAINV("}
     end
 end
}.
{NETWORKDAYS} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"NETWORKDAYS("]};
         false -> {func, "NETWORKDAYS("}
     end
 end
}.
{IMLN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"IMLN("]};
         false -> {func, "IMLN("}
     end
 end
}.
{COUPNUM} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"COUPNUM("]};
         false -> {func, "COUPNUM("}
     end
 end
}.
{IF} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"IF("]};
         false -> {func, "IF("}
     end
 end
}.
{DGET} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DGET("]};
         false -> {func, "DGET("}
     end
 end
}.
{INDEX} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"INDEX("]};
         false -> {func, "INDEX("}
     end
 end
}.
{WEEKDAY} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"WEEKDAY("]};
         false -> {func, "WEEKDAY("}
     end
 end
}.
{SEARCH} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SEARCH("]};
         false -> {func, "SEARCH("}
     end
 end
}.
{ATANH} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ATANH("]};
         false -> {func, "ATANH("}
     end
 end
}.
{NPV} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"NPV("]};
         false -> {func, "NPV("}
     end
 end
}.
{SQRTPI} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SQRTPI("]};
         false -> {func, "SQRTPI("}
     end
 end
}.
{ODDLPRICE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ODDLPRICE("]};
         false -> {func, "ODDLPRICE("}
     end
 end
}.
{ISNONTEXT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ISNONTEXT("]};
         false -> {func, "ISNONTEXT("}
     end
 end
}.
{TRIM} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TRIM("]};
         false -> {func, "TRIM("}
     end
 end
}.
{SUMXMY2} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SUMXMY2("]};
         false -> {func, "SUMXMY2("}
     end
 end
}.
{IMCOS} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"IMCOS("]};
         false -> {func, "IMCOS("}
     end
 end
}.
{N} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"N("]};
         false -> {func, "N("}
     end
 end
}.
{VALUE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"VALUE("]};
         false -> {func, "VALUE("}
     end
 end
}.
{OCT2DEC} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"OCT2DEC("]};
         false -> {func, "OCT2DEC("}
     end
 end
}.
{TBILLEQ} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TBILLEQ("]};
         false -> {func, "TBILLEQ("}
     end
 end
}.
{PV} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"PV("]};
         false -> {func, "PV("}
     end
 end
}.
{TREND} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TREND("]};
         false -> {func, "TREND("}
     end
 end
}.
{AVEDEV} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"AVEDEV("]};
         false -> {func, "AVEDEV("}
     end
 end
}.
{TBILLYIELD} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TBILLYIELD("]};
         false -> {func, "TBILLYIELD("}
     end
 end
}.
{DSTDEV} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DSTDEV("]};
         false -> {func, "DSTDEV("}
     end
 end
}.
{YEAR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"YEAR("]};
         false -> {func, "YEAR("}
     end
 end
}.
{PRICEDISC} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"PRICEDISC("]};
         false -> {func, "PRICEDISC("}
     end
 end
}.
{ISODD} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ISODD("]};
         false -> {func, "ISODD("}
     end
 end
}.
{ERROR.TYPE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ERROR.TYPE("]};
         false -> {func, "ERROR.TYPE("}
     end
 end
}.
{FIND} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"FIND("]};
         false -> {func, "FIND("}
     end
 end
}.
{SINH} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SINH("]};
         false -> {func, "SINH("}
     end
 end
}.
{DVARP} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DVARP("]};
         false -> {func, "DVARP("}
     end
 end
}.
{COUPDAYBS} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"COUPDAYBS("]};
         false -> {func, "COUPDAYBS("}
     end
 end
}.
{SUM} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SUM("]};
         false -> {func, "SUM("}
     end
 end
}.
{ODDFPRICE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ODDFPRICE("]};
         false -> {func, "ODDFPRICE("}
     end
 end
}.
{COLUMNS} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"COLUMNS("]};
         false -> {func, "COLUMNS("}
     end
 end
}.
{RAND} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"RAND("]};
         false -> {func, "RAND("}
     end
 end
}.
{HEX2OCT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"HEX2OCT("]};
         false -> {func, "HEX2OCT("}
     end
 end
}.
{XIRR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"XIRR("]};
         false -> {func, "XIRR("}
     end
 end
}.
{DMIN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DMIN("]};
         false -> {func, "DMIN("}
     end
 end
}.
{IMSUM} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"IMSUM("]};
         false -> {func, "IMSUM("}
     end
 end
}.
{T} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"T("]};
         false -> {func, "T("}
     end
 end
}.
{ATAN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ATAN("]};
         false -> {func, "ATAN("}
     end
 end
}.
{TRUE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TRUE("]};
         false -> {func, "TRUE("}
     end
 end
}.
{FIXED} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"FIXED("]};
         false -> {func, "FIXED("}
     end
 end
}.
{CUMPRINC} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"CUMPRINC("]};
         false -> {func, "CUMPRINC("}
     end
 end
}.
{EDATE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"EDATE("]};
         false -> {func, "EDATE("}
     end
 end
}.
{DCOUNT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DCOUNT("]};
         false -> {func, "DCOUNT("}
     end
 end
}.
{NOMINAL} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"NOMINAL("]};
         false -> {func, "NOMINAL("}
     end
 end
}.
{REPT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"REPT("]};
         false -> {func, "REPT("}
     end
 end
}.
{CLEAN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"CLEAN("]};
         false -> {func, "CLEAN("}
     end
 end
}.
{FVSCHEDULE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"FVSCHEDULE("]};
         false -> {func, "FVSCHEDULE("}
     end
 end
}.
{LN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"LN("]};
         false -> {func, "LN("}
     end
 end
}.
{EXP} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"EXP("]};
         false -> {func, "EXP("}
     end
 end
}.
{effect} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"EFFECT("]};
         false -> {func, "EFFECT("}
     end
 end
}.
{COUNTIF} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"COUNTIF("]};
         false -> {func, "COUNTIF("}
     end
 end
}.
{DAY} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DAY("]};
         false -> {func, "DAY("}
     end
 end
}.
{IMPOWER} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"IMPOWER("]};
         false -> {func, "IMPOWER("}
     end
 end
}.
{LOOKUP} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"LOOKUP("]};
         false -> {func, "LOOKUP("}
     end
 end
}.
{CEILING} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"CEILING("]};
         false -> {func, "CEILING("}
     end
 end
}.
{MONTH} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MONTH("]};
         false -> {func, "MONTH("}
     end
 end
}.
{ADDRESS} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ADDRESS("]};
         false -> {func, "ADDRESS("}
     end
 end
}.
{OFFSET} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"OFFSET("]};
         false -> {func, "OFFSET("}
     end
 end
}.
{TYPE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TYPE("]};
         false -> {func, "TYPE("}
     end
 end
}.
{RANK} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"RANK("]};
         false -> {func, "RANK("}
     end
 end
}.
{RECEIVED} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"RECEIVED("]};
         false -> {func, "RECEIVED("}
     end
 end
}.
{COSH} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"COSH("]};
         false -> {func, "COSH("}
     end
 end
}.
{ACCRINT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ACCRINT("]};
         false -> {func, "ACCRINT("}
     end
 end
}.
{COUPPCD} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"COUPPCD("]};
         false -> {func, "COUPPCD("}
     end
 end
}.
{PROB} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"PROB("]};
         false -> {func, "PROB("}
     end
 end
}.
{LCM} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"LCM("]};
         false -> {func, "LCM("}
     end
 end
}.
{RATE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"RATE("]};
         false -> {func, "RATE("}
     end
 end
}.
{RADIANS} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"RADIANS("]};
         false -> {func, "RADIANS("}
     end
 end
}.
{OCT2BIN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"OCT2BIN("]};
         false -> {func, "OCT2BIN("}
     end
 end
}.
{INFO} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"INFO("]};
         false -> {func, "INFO("}
     end
 end
}.
{MINUTE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MINUTE("]};
         false -> {func, "MINUTE("}
     end
 end
}.
{ASIN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ASIN("]};
         false -> {func, "ASIN("}
     end
 end
}.
{YIELD} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"YIELD("]};
         false -> {func, "YIELD("}
     end
 end
}.
{AREAS} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"AREAS("]};
         false -> {func, "AREAS("}
     end
 end
}.
{HEX2DEC} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"HEX2DEC("]};
         false -> {func, "HEX2DEC("}
     end
 end
}.
{COUPDAYS} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"COUPDAYS("]};
         false -> {func, "COUPDAYS("}
     end
 end
}.
{MEDIAN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MEDIAN("]};
         false -> {func, "MEDIAN("}
     end
 end
}.
{MMULT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MMULT("]};
         false -> {func, "MMULT("}
     end
 end
}.
{TANH} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TANH("]};
         false -> {func, "TANH("}
     end
 end
}.
{PRODUCT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"PRODUCT("]};
         false -> {func, "PRODUCT("}
     end
 end
}.
{REPLACE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"REPLACE("]};
         false -> {func, "REPLACE("}
     end
 end
}.
{HYPGEOMDIST} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"HYPGEOMDIST("]};
         false -> {func, "HYPGEOMDIST("}
     end
 end
}.
{OR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"OR("]};
         false -> {func, "OR("}
     end
 end
}.
{ODDLYIELD} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ODDLYIELD("]};
         false -> {func, "ODDLYIELD("}
     end
 end
}.
{ISNA} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ISNA("]};
         false -> {func, "ISNA("}
     end
 end
}.
{EFFECT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"EFFECT("]};
         false -> {func, "EFFECT("}
     end
 end
}.
{BIN2HEX} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"BIN2HEX("]};
         false -> {func, "BIN2HEX("}
     end
 end
}.
{DEC2HEX} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DEC2HEX("]};
         false -> {func, "DEC2HEX("}
     end
 end
}.
{NOT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"NOT("]};
         false -> {func, "NOT("}
     end
 end
}.
{ISERR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ISERR("]};
         false -> {func, "ISERR("}
     end
 end
}.
{GCD} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"GCD("]};
         false -> {func, "GCD("}
     end
 end
}.
{IMDIV} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"IMDIV("]};
         false -> {func, "IMDIV("}
     end
 end
}.
{ROMAN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ROMAN("]};
         false -> {func, "ROMAN("}
     end
 end
}.
{CONFIDENCE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"CONFIDENCE("]};
         false -> {func, "CONFIDENCE("}
     end
 end
}.
{COS} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"COS("]};
         false -> {func, "COS("}
     end
 end
}.
{VDB} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"VDB("]};
         false -> {func, "VDB("}
     end
 end
}.
{SERIESSUM} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SERIESSUM("]};
         false -> {func, "SERIESSUM("}
     end
 end
}.
{NOW} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"NOW("]};
         false -> {func, "NOW("}
     end
 end
}.
{NA} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"NA("]};
         false -> {func, "NA("}
     end
 end
}.
{UPPER} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"UPPER("]};
         false -> {func, "UPPER("}
     end
 end
}.
{PERCENTRANK} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"PERCENTRANK("]};
         false -> {func, "PERCENTRANK("}
     end
 end
}.
{FREQUENCY} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"FREQUENCY("]};
         false -> {func, "FREQUENCY("}
     end
 end
}.
{DISC} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DISC("]};
         false -> {func, "DISC("}
     end
 end
}.
{SIGN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SIGN("]};
         false -> {func, "SIGN("}
     end
 end
}.
{POWER} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"POWER("]};
         false -> {func, "POWER("}
     end
 end
}.
{BIN2OCT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"BIN2OCT("]};
         false -> {func, "BIN2OCT("}
     end
 end
}.
{DEC2OCT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DEC2OCT("]};
         false -> {func, "DEC2OCT("}
     end
 end
}.
{DCOUNTA} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DCOUNTA("]};
         false -> {func, "DCOUNTA("}
     end
 end
}.
{LOG} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"LOG("]};
         false -> {func, "LOG("}
     end
 end
}.
{IMABS} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"IMABS("]};
         false -> {func, "IMABS("}
     end
 end
}.
{IMREAL} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"IMREAL("]};
         false -> {func, "IMREAL("}
     end
 end
}.
{MAX} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MAX("]};
         false -> {func, "MAX("}
     end
 end
}.
{LARGE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"LARGE("]};
         false -> {func, "LARGE("}
     end
 end
}.
{DSTDEVP} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DSTDEVP("]};
         false -> {func, "DSTDEVP("}
     end
 end
}.
{INDIRECT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"INDIRECT("]};
         false -> {func, "INDIRECT("}
     end
 end
}.
{MDETERM} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MDETERM("]};
         false -> {func, "MDETERM("}
     end
 end
}.
{TIME} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TIME("]};
         false -> {func, "TIME("}
     end
 end
}.
{PPMT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"PPMT("]};
         false -> {func, "PPMT("}
     end
 end
}.
{AMORLINC} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"AMORLINC("]};
         false -> {func, "AMORLINC("}
     end
 end
}.
{TODAY} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TODAY("]};
         false -> {func, "TODAY("}
     end
 end
}.
{DPRODUCT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DPRODUCT("]};
         false -> {func, "DPRODUCT("}
     end
 end
}.
{ISNUMBER} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ISNUMBER("]};
         false -> {func, "ISNUMBER("}
     end
 end
}.
{DAYS360} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DAYS360("]};
         false -> {func, "DAYS360("}
     end
 end
}.
{IMPRODUCT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"IMPRODUCT("]};
         false -> {func, "IMPRODUCT("}
     end
 end
}.
{COMPLEX} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"COMPLEX("]};
         false -> {func, "COMPLEX("}
     end
 end
}.
{CONCATENATE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"CONCATENATE("]};
         false -> {func, "CONCATENATE("}
     end
 end
}.
{DOLLARFR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DOLLARFR("]};
         false -> {func, "DOLLARFR("}
     end
 end
}.
{NPER} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"NPER("]};
         false -> {func, "NPER("}
     end
 end
}.
{INTRATE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"INTRATE("]};
         false -> {func, "INTRATE("}
     end
 end
}.
{PRICE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"PRICE("]};
         false -> {func, "PRICE("}
     end
 end
}.
{HEX2BIN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"HEX2BIN("]};
         false -> {func, "HEX2BIN("}
     end
 end
}.
{CUMIPMT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"CUMIPMT("]};
         false -> {func, "CUMIPMT("}
     end
 end
}.
{LINEST} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"LINEST("]};
         false -> {func, "LINEST("}
     end
 end
}.
{GESTEP} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"GESTEP("]};
         false -> {func, "GESTEP("}
     end
 end
}.
{ASINH} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ASINH("]};
         false -> {func, "ASINH("}
     end
 end
}.
{FLOOR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"FLOOR("]};
         false -> {func, "FLOOR("}
     end
 end
}.
{DB} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DB("]};
         false -> {func, "DB("}
     end
 end
}.
{COUPDAYSNC} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"COUPDAYSNC("]};
         false -> {func, "COUPDAYSNC("}
     end
 end
}.
{COUNTBLANK} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"COUNTBLANK("]};
         false -> {func, "COUNTBLANK("}
     end
 end
}.
{DSUM} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DSUM("]};
         false -> {func, "DSUM("}
     end
 end
}.
{IMLOG2} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"IMLOG2("]};
         false -> {func, "IMLOG2("}
     end
 end
}.
{CHAR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"CHAR("]};
         false -> {func, "CHAR("}
     end
 end
}.
{KURT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"KURT("]};
         false -> {func, "KURT("}
     end
 end
}.
{COUPNCD} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"COUPNCD("]};
         false -> {func, "COUPNCD("}
     end
 end
}.
{STDEV} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"STDEV("]};
         false -> {func, "STDEV("}
     end
 end
}.
{YIELDMAT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"YIELDMAT("]};
         false -> {func, "YIELDMAT("}
     end
 end
}.
{EOMONTH} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"EOMONTH("]};
         false -> {func, "EOMONTH("}
     end
 end
}.
{ROWS} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ROWS("]};
         false -> {func, "ROWS("}
     end
 end
}.
{SUMPRODUCT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SUMPRODUCT("]};
         false -> {func, "SUMPRODUCT("}
     end
 end
}.
{VAR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"VAR("]};
         false -> {func, "VAR("}
     end
 end
}.
{TIMEVALUE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TIMEVALUE("]};
         false -> {func, "TIMEVALUE("}
     end
 end
}.
{DATEVALUE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DATEVALUE("]};
         false -> {func, "DATEVALUE("}
     end
 end
}.
{IRR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"IRR("]};
         false -> {func, "IRR("}
     end
 end
}.
{BIN2DEC} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"BIN2DEC("]};
         false -> {func, "BIN2DEC("}
     end
 end
}.
{CHOOSE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"CHOOSE("]};
         false -> {func, "CHOOSE("}
     end
 end
}.
{IMSQRT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"IMSQRT("]};
         false -> {func, "IMSQRT("}
     end
 end
}.
{AMORDEGRC} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"AMORDEGRC("]};
         false -> {func, "AMORDEGRC("}
     end
 end
}.
{PERMUT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"PERMUT("]};
         false -> {func, "PERMUT("}
     end
 end
}.
{DEGREES} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DEGREES("]};
         false -> {func, "DEGREES("}
     end
 end
}.
{ODDFYIELD} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ODDFYIELD("]};
         false -> {func, "ODDFYIELD("}
     end
 end
}.
{COUNT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"COUNT("]};
         false -> {func, "COUNT("}
     end
 end
}.
{MINVERSE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MINVERSE("]};
         false -> {func, "MINVERSE("}
     end
 end
}.
{MID} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MID("]};
         false -> {func, "MID("}
     end
 end
}.
{ISTEXT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ISTEXT("]};
         false -> {func, "ISTEXT("}
     end
 end
}.
{XNPV} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"XNPV("]};
         false -> {func, "XNPV("}
     end
 end
}.
{VARP} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"VARP("]};
         false -> {func, "VARP("}
     end
 end
}.
{STANDARDIZE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"STANDARDIZE("]};
         false -> {func, "STANDARDIZE("}
     end
 end
}.
{LEFT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"LEFT("]};
         false -> {func, "LEFT("}
     end
 end
}.
{IMARGUMENT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"IMARGUMENT("]};
         false -> {func, "IMARGUMENT("}
     end
 end
}.
{TBILLPRICE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TBILLPRICE("]};
         false -> {func, "TBILLPRICE("}
     end
 end
}.
{ROUNDDOWN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ROUNDDOWN("]};
         false -> {func, "ROUNDDOWN("}
     end
 end
}.
{COUNTA} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"COUNTA("]};
         false -> {func, "COUNTA("}
     end
 end
}.
{AVERAGE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"AVERAGE("]};
         false -> {func, "AVERAGE("}
     end
 end
}.
{COLUMN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"COLUMN("]};
         false -> {func, "COLUMN("}
     end
 end
}.
{SUMIF} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SUMIF("]};
         false -> {func, "SUMIF("}
     end
 end
}.
{STEYX} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"STEYX("]};
         false -> {func, "STEYX("}
     end
 end
}.
{LEN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"LEN("]};
         false -> {func, "LEN("}
     end
 end
}.
{GAMMALN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"GAMMALN("]};
         false -> {func, "GAMMALN("}
     end
 end
}.
{FALSE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"FALSE("]};
         false -> {func, "FALSE("}
     end
 end
}.
{SUMX2MY2} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SUMX2MY2("]};
         false -> {func, "SUMX2MY2("}
     end
 end
}.
{PMT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"PMT("]};
         false -> {func, "PMT("}
     end
 end
}.
{YEARFRAC} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"YEARFRAC("]};
         false -> {func, "YEARFRAC("}
     end
 end
}.
{GAMMADIST} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"GAMMADIST("]};
         false -> {func, "GAMMADIST("}
     end
 end
}.
{SUMSQ} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SUMSQ("]};
         false -> {func, "SUMSQ("}
     end
 end
}.
{DELTA} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DELTA("]};
         false -> {func, "DELTA("}
     end
 end
}.
{EVEN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"EVEN("]};
         false -> {func, "EVEN("}
     end
 end
}.
{ATAN2} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ATAN2("]};
         false -> {func, "ATAN2("}
     end
 end
}.
{RANDBETWEEN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"RANDBETWEEN("]};
         false -> {func, "RANDBETWEEN("}
     end
 end
}.
{FACTDOUBLE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"FACTDOUBLE("]};
         false -> {func, "FACTDOUBLE("}
     end
 end
}.
{ISEVEN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ISEVEN("]};
         false -> {func, "ISEVEN("}
     end
 end
}.
{IMLOG10} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"IMLOG10("]};
         false -> {func, "IMLOG10("}
     end
 end
}.
{TRANSPOSE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TRANSPOSE("]};
         false -> {func, "TRANSPOSE("}
     end
 end
}.
{EXPONDIST} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"EXPONDIST("]};
         false -> {func, "EXPONDIST("}
     end
 end
}.
{ABS} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ABS("]};
         false -> {func, "ABS("}
     end
 end
}.
{AND} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"AND("]};
         false -> {func, "AND("}
     end
 end
}.
{ISBLANK} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ISBLANK("]};
         false -> {func, "ISBLANK("}
     end
 end
}.
{MOD} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MOD("]};
         false -> {func, "MOD("}
     end
 end
}.
{SUBSTITUTE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SUBSTITUTE("]};
         false -> {func, "SUBSTITUTE("}
     end
 end
}.
{SYD} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SYD("]};
         false -> {func, "SYD("}
     end
 end
}.
{ACOS} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ACOS("]};
         false -> {func, "ACOS("}
     end
 end
}.
{IMAGINARY} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"IMAGINARY("]};
         false -> {func, "IMAGINARY("}
     end
 end
}.
{SUMX2PY2} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SUMX2PY2("]};
         false -> {func, "SUMX2PY2("}
     end
 end
}.
{SUBTOTAL} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"SUBTOTAL("]};
         false -> {func, "SUBTOTAL("}
     end
 end
}.
{MIN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MIN("]};
         false -> {func, "MIN("}
     end
 end
}.
{DEC2BIN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DEC2BIN("]};
         false -> {func, "DEC2BIN("}
     end
 end
}.
{DAVERAGE} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DAVERAGE("]};
         false -> {func, "DAVERAGE("}
     end
 end
}.
{ERFC} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ERFC("]};
         false -> {func, "ERFC("}
     end
 end
}.
{TAN} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TAN("]};
         false -> {func, "TAN("}
     end
 end
}.
{QUOTIENT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"QUOTIENT("]};
         false -> {func, "QUOTIENT("}
     end
 end
}.
{TEXT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TEXT("]};
         false -> {func, "TEXT("}
     end
 end
}.
{ROW} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"ROW("]};
         false -> {func, "ROW("}
     end
 end
}.
{TRUNC} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"TRUNC("]};
         false -> {func, "TRUNC("}
     end
 end
}.
{DOLLAR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DOLLAR("]};
         false -> {func, "DOLLAR("}
     end
 end
}.
{MIRR} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"MIRR("]};
         false -> {func, "MIRR("}
     end
 end
}.
{DMAX} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DMAX("]};
         false -> {func, "DMAX("}
     end
 end
}.
{DEVSQ} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"DEVSQ("]};
         false -> {func, "DEVSQ("}
     end
 end
}.
{OCT2HEX} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"OCT2HEX("]};
         false -> {func, "OCT2HEX("}
     end
 end
}.
{INT} : {token,
 begin
     {ok, Nowhsp, _} = regexp:gsub(YYtext, " +", ""),
     Hd = hd(Nowhsp),
     case lists:member(Hd, [$+, $-, $*, $/, $=]) of
         true  -> {func, [Hd|"INT("]};
         false -> {func, "INT("}
     end
 end
}.

\n : {end_token, {'$end'}}.
.  : {token, {stuff, YYtext}}.

