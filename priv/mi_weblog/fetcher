#!/usr/bin/env escript
%% -*- erlang -*-
%%! -boot start_ssl -proto_dist inet_ssl -ssl_dist_opt server_certfile "/hn/hypernumbers/priv/keys/servercert.pem" -ssl_dist_opt client_certfile "/hn/hypernumbers/priv/keys/clientcert.pem" -ssl_dist_opt keyfile "/hn/hypernumbers/priv/keys/key.pem -connect_all false"

-mode(compile).

-define(COOKIE, 'completelysecure').
-define(OUTDIR, "/hn/Dropbox/Logs/").
-define(EPMD, "/usr/local/bin/epmd -daemon").

main([Target]) ->
    main([Target, "1", "."]);
main([Target, DaysAgo]) ->
    main([Target, DaysAgo, "."]);
main([Target, NStr, PostlogDir]) ->
    init(),
    io:format("running fetcher for ~p~n",[Target]),
    N = list_to_integer(NStr),
    TNode = list_to_atom(Target),
    Nodes = nodes(),
    io:format("Node ~p is connected? ~p~n", [lists:member(TNode, Nodes]),
    StartDate = relative_date(N),
    EndDate = relative_date(N-1),
    _Ret = rpc:cast(TNode, mochilog, stream_log, 
                [PostlogDir, StartDate, EndDate, self()]),
    start_loop(Target ++ StartDate);

main(_) ->
    io:format("usage: fetcher target [day_ago=1] [postlog_dir=\".\"]~n", []).

start_loop(FileName) ->
    receive
        {_, log_start} ->
            {ok, FD} = file:open([?OUTDIR, FileName], 
                                 [write, delayed_write, raw]),
            Ret = server_loop(FileName, FD),
            Msg = io_lib:format("Fetcher succeeded for ~p~n", [FileName]),
            ok = rpc:call('hnlive@hypernumbers.com', 'hn_net_util', email,
                          ["gordon@hypernumbers.com", "", atom_to_list(node()),
                           "Fetcher Succeeded!!", Msg]),
            Ret;
        {_, {log_error, Reason}} ->
            Msg = io_lib:format("Cos ~p for ~p~n", [Reason, FileName]),
            ok = rpc:call('hnlive@hypernumbers.com', 'hn_net_util', email,
                          ["gordon@hypernumbers.com", "", atom_to_list(node()),
                           "Fetcher failed!", Msg]),
            io:format("Server: ~p~n", [Reason])
    after 25000 ->
            Msg = io_lib:format("For ~p run number ~p - nodes() is showing ~p~n",
                                [FileName, N, nodes()]),
            ok = rpc:call('hnlive@hypernumbers.com', 'hn_net_util', email,
                          ["gordon@hypernumbers.com", "", atom_to_list(node()),
                           "Fetcher partially timed out!", Msg]),
            io:format("Error starting~n"),
    end.

server_loop(FileName, FD) ->
    receive
        {From, {log_chunk, Chunk}} ->
            [ok = file:write(FD, X) || X <- Chunk],
            From ! {self(), log_continue_stream},
            server_loop(FileName, FD);

        {_, log_finished} ->
            ok = file:close(FD)

    after 200000 ->
            Msg = io_lib:format("For ~p~n", [FileName]),
            ok = rpc:call('hnlive@hypernumbers.com', 'hn_net_util', email,
                          ["gordon@hypernumbers.com", "", atom_to_list(node()),
                           "Fetcher timed out in server loop!", Msg]),
            io:format(standard_error, "Lost connection to server~n", []),
            ok = file:close(FD),
            ok = file:delete([?OUTDIR, FileName])
    end.

init() ->
    os:cmd(?EPMD), 
    Host = net_adm:localhost(),
    Name = list_to_atom("mi_fetcher@" ++ Host),
    {ok, _} = net_kernel:start([Name, longnames]),
    true = auth:set_cookie(?COOKIE).
    
% filename(Str) ->
%     {H, M, S} = erlang:time(),
%     lists:flatten([Str, 
%                    " (",
%                    io_lib:format("~2.10.0b_~2.10.0b_~2.10.0b", [H,M,S]),
%                    ")"]).
    
relative_date(Offset) ->
    {Date, _} = calendar:now_to_local_time(erlang:now()),
    Day = calendar:date_to_gregorian_days(Date),
    format_date(calendar:gregorian_days_to_date(Day - Offset)).
    
format_date({Y, M, D}) ->
    lists:flatten(io_lib:format("~b-~b-~b", [D, M, Y])).
