#!/usr/bin/env escript
%% -*- erlang -*-
%%! -boot start_ssl -proto_dist inet_ssl -ssl_dist_opt server_certfile "/hn/hypernumbers/priv/keys/servercert.pem" -ssl_dist_opt client_certfile "/hn/hypernumbers/priv/keys/clientcert.pem" -ssl_dist_opt keyfile "/hn/hypernumbers/priv/keys/key.pem -kernel net_setuptime 120

% ET, call home

-mode(compile).

-include("/hn/hypernumbers/lib/twilio/include/twilio_acc.hrl").

-define(COOKIE, 'completelysecure').
-define(EPMD, "/usr/local/bin/epmd -daemon").
-define(SUCKER, "+447776251669").
-define(ROOT, "/hn/hypernumbers").

main([]) ->
    World = init(),
    [code:add_pathz(X ++ "/ebin") || X <- filelib:wildcard(?ROOT ++ "/lib/*")],
    UpNodes = nodes(),
    io:format("These ~p nodes are up~n", [UpNodes]),
    case all_well(World, UpNodes, []) of
    	 true -> io:format("all is well~n");
	 Msg  -> sms(Msg)
    end.

sms(Msg) ->
   ok = application:start(inets),
   ok = application:start(crypto),
   ok = application:start(public_key),
   ok = application:start(ssl),
   {ok, ok} = twilio:send_sms(?AccountSid, ?AuthToken, ?PhoneNo, ?SUCKER, Msg).

all_well([], _, [])  -> true;
all_well([], _, Acc) -> List = [atom_to_list(X) || X <- lists:reverse(Acc)],
                        List2 = string:join(List, ","),
			Msg = io_lib:format("The following nodes are down: ~p", 
			[List2]),
                        lists:flatten(Msg);
all_well([H | T], UpNodes, Acc) ->
     case lists:member(H, UpNodes) of
         true  -> all_well(T, UpNodes, Acc);
         false -> all_well(T, UpNodes, [H | Acc])
     end.

init() ->
    os:cmd(?EPMD),
    Host = net_adm:localhost(),
    Name = list_to_atom("et@" ++ Host),
    {ok, _} = net_kernel:start([Name, longnames]),
    true = auth:set_cookie(?COOKIE),
    net_adm:world().
