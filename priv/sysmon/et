#!/usr/bin/env escript
%% -*- erlang -*-
%%! -boot start_ssl -proto_dist inet_ssl -ssl_dist_opt server_certfile "/hn/hypernumbers/priv/keys/servercert.pem" -ssl_dist_opt client_certfile "/hn/hypernumbers/priv/keys/clientcert.pem" -ssl_dist_opt keyfile "/hn/hypernumbers/priv/keys/key.pem -kernel net_setuptime 120

% ET, call home

-mode(compile).

-include("/hn/hypernumbers/lib/twilio/include/twilio_acc.hrl").

-define(COOKIE, 'completelysecure').
-define(EPMD, "/usr/local/bin/epmd -daemon").
-define(SUCKER, "+447776251669").
-define(ROOT, "/hn/hypernumbers").
-define(NODES, [
                'hnlive@hypernumbers.com',
                'hnlive@node2.hypernumbers.com',
                'hnlive@node3.hypernumbers.com',
                'hnlive@node4.hypernumbers.com',
                'hnlive@node5.hypernumbers.com'
               ]).

main([]) ->
    file:set_cwd("/hn/hypernumbers/priv/sysmon/"),
    ok = init(),
    [code:add_pathz(X ++ "/ebin") || X <- filelib:wildcard(?ROOT ++ "/lib/*")],
    UpNodes = nodes(),
    io:format("UpNodes is ~p~n", [UpNodes]),
    case all_well(?NODES, UpNodes, []) of
        true -> io:format("all is well~n");
        Msg  -> sms(Msg)
    end.

sms(Msg) ->
    io:format("Texting ~p to ~p~n", [Msg, ?SUCKER]),
    ok = application:start(inets),
    ok = application:start(crypto),
    ok = application:start(public_key),
    ok = application:start(ssl),
    io:format("About to send sms~n"),
    {ok, ok} = twilio:send_sms(?AccountSid, ?AuthToken, ?PhoneNo, ?SUCKER, Msg).

all_well([], _, [])  -> true;
all_well([], _, Acc) -> List = [atom_to_list(X) || X <- lists:reverse(Acc)],
                        List2 = string:join(List, ","),
                        Msg = io_lib:format("The following nodes are down: ~p",
                                            [List2]),
                        lists:flatten(Msg);
all_well([H | T], UpNodes, Acc) ->
    io:format("H is ~p UpNodes is ~p Acc is ~p~n", [H, UpNodes, Acc]),
    case lists:member(H, UpNodes) of
        true  -> all_well(T, UpNodes, Acc);
        false -> all_well(T, UpNodes, [H | Acc])
    end.

init() ->
    os:cmd(?EPMD),
    Host = net_adm:localhost(),
    {_, _, Tag} = now(),
    NodeName = "et" ++ integer_to_list(Tag),
    Name = list_to_atom(NodeName ++ "@" ++ Host),
    {ok, _} = net_kernel:start([Name, longnames]),
    true = auth:set_cookie(?COOKIE),
    World = net_adm:world(),
    io:format("in init World is ~p~n", [World]),
    ok.