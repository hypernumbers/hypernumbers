% This module has been generated by generatetest.rb
% DO NOT EDIT MANUALLY.
%
% Source file: quadratic_equations.xls
% Generated on: Wed Jan 23 09:59:01 +0000 2008

-module(quadratic_equations_SUITE).
-compile(export_all).
-include("test_server.hrl").


init_per_suite(Config) ->
    code:add_patha("../../ebin"),
    production_boot:setup_paths(),
    Data = test_util:read_excel_file("/Win Excel 2007 (as 97)/quadratic_equations.xls"),
    io:format("in init_per_suite Data is ~p~n",[Data]),
    lists:merge([Config, [{quadratic_equations_SUITE, Data}]]).
  
end_per_suite(_Config) ->
    ok.
  
init_per_testcase(_TestCase, Config) -> Config.

end_per_testcase(_TestCase, _Config) -> ok.

read_from_excel_data(Config, {Row,Col}) ->
    {value, Result} = lists:keysearch(quadratic_equations_SUITE, 1, Config),
    Data = element(2, Result),
    Key={{row_index,Row},{col_index,Col}},
    {value, Result2} = lists:keysearch(Key, 1, Data),
    El=element(2, Result2),
    io:format("El is ~p~n",[El]),
    case El of
        {value, number, Number} -> {number,Number};
        {string,String}         -> {string,String};
        {formula,Formula}       -> {formula,Formula};
        {value,boolean,Boolean} -> {boolean,Boolean};
        {value,error,Error}     -> {error, Error};
        Other                   -> io:format("(in generatetest.rb - fix me Other is ~p~n",[Other])
    end.

a5_test(doc) -> [""];
a5_test(suite) -> [];
a5_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["C:",read_from_excel_data(Config,{4,0})]),
  test_util:expected(true, test_util:excel_equal({string,"C:"}, read_from_excel_data(Config,{4,0}))).
  
a1_test(doc) -> [""];
a1_test(suite) -> [];
a1_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Quadratic Equation Solver",read_from_excel_data(Config,{0,0})]),
  test_util:expected(true, test_util:excel_equal({string,"Quadratic Equation Solver"}, read_from_excel_data(Config,{0,0}))).
  
a7_test(doc) -> [""];
a7_test(suite) -> [];
a7_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Answers:",read_from_excel_data(Config,{6,0})]),
  test_util:expected(true, test_util:excel_equal({string,"Answers:"}, read_from_excel_data(Config,{6,0}))).
  
a13_test(doc) -> [""];
a13_test(suite) -> [];
a13_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["hello",read_from_excel_data(Config,{12,0})]),
  test_util:expected(true, test_util:excel_equal({string,"hello"}, read_from_excel_data(Config,{12,0}))).
  
a3_test(doc) -> [""];
a3_test(suite) -> [];
a3_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["A:",read_from_excel_data(Config,{2,0})]),
  test_util:expected(true, test_util:excel_equal({string,"A:"}, read_from_excel_data(Config,{2,0}))).
  
a14_test(doc) -> [""];
a14_test(suite) -> [];
a14_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[1.0,read_from_excel_data(Config,{13,0})]),
  test_util:expected(true, test_util:excel_equal({number,1.0}, read_from_excel_data(Config,{13,0}))).
  
a4_test(doc) -> [""];
a4_test(suite) -> [];
a4_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["B:",read_from_excel_data(Config,{3,0})]),
  test_util:expected(true, test_util:excel_equal({string,"B:"}, read_from_excel_data(Config,{3,0}))).
  
a15_test(doc) -> [""];
a15_test(suite) -> [];
a15_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[true,read_from_excel_data(Config,{14,0})]),
  test_util:expected(true, test_util:excel_equal({boolean,true}, read_from_excel_data(Config,{14,0}))).
  
b5_test(doc) -> [""];
b5_test(suite) -> [];
b5_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[4.78,read_from_excel_data(Config,{4,1})]),
  test_util:expected(true, test_util:excel_equal({number,4.78}, read_from_excel_data(Config,{4,1}))).
  
b7_test(doc) -> [""];
b7_test(suite) -> [];
b7_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=(-B4+SQRT(POWER(B4,2) - (4 *B3 *B5)))/(2*B3)",read_from_excel_data(Config,{6,1})]),
  test_util:expected(true, test_util:excel_equal({formula,"=(-B4+SQRT(POWER(B4,2) - (4 *B3 *B5)))/(2*B3)"}, read_from_excel_data(Config,{6,1}))).
  
b13_test(doc) -> [""];
b13_test(suite) -> [];
b13_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=AVERAGE(1,22,3)",read_from_excel_data(Config,{12,1})]),
  test_util:expected(true, test_util:excel_equal({formula,"=AVERAGE(1,22,3)"}, read_from_excel_data(Config,{12,1}))).
  
b8_test(doc) -> [""];
b8_test(suite) -> [];
b8_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=(-B4-SQRT(POWER(B4,2) - (4 *B3 *B5)))/(2*B3)",read_from_excel_data(Config,{7,1})]),
  test_util:expected(true, test_util:excel_equal({formula,"=(-B4-SQRT(POWER(B4,2) - (4 *B3 *B5)))/(2*B3)"}, read_from_excel_data(Config,{7,1}))).
  
b3_test(doc) -> [""];
b3_test(suite) -> [];
b3_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[3.5,read_from_excel_data(Config,{2,1})]),
  test_util:expected(true, test_util:excel_equal({number,3.5}, read_from_excel_data(Config,{2,1}))).
  
b4_test(doc) -> [""];
b4_test(suite) -> [];
b4_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[14.75,read_from_excel_data(Config,{3,1})]),
  test_util:expected(true, test_util:excel_equal({number,14.75}, read_from_excel_data(Config,{3,1}))).
  
c5_test(doc) -> [""];
c5_test(suite) -> [];
c5_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[1.0,read_from_excel_data(Config,{4,2})]),
  test_util:expected(true, test_util:excel_equal({number,1.0}, read_from_excel_data(Config,{4,2}))).
  
c7_test(doc) -> [""];
c7_test(suite) -> [];
c7_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=(-C4+SQRT(POWER(C4,2) - (4 *C3 *C5)))/(2*C3)",read_from_excel_data(Config,{6,2})]),
  test_util:expected(true, test_util:excel_equal({formula,"=(-C4+SQRT(POWER(C4,2) - (4 *C3 *C5)))/(2*C3)"}, read_from_excel_data(Config,{6,2}))).
  
c8_test(doc) -> [""];
c8_test(suite) -> [];
c8_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=(-C4-SQRT(POWER(C4,2) - (4 *C3 *C5)))/(2*C3)",read_from_excel_data(Config,{7,2})]),
  test_util:expected(true, test_util:excel_equal({formula,"=(-C4-SQRT(POWER(C4,2) - (4 *C3 *C5)))/(2*C3)"}, read_from_excel_data(Config,{7,2}))).
  
c3_test(doc) -> [""];
c3_test(suite) -> [];
c3_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[1.0,read_from_excel_data(Config,{2,2})]),
  test_util:expected(true, test_util:excel_equal({number,1.0}, read_from_excel_data(Config,{2,2}))).
  
c4_test(doc) -> [""];
c4_test(suite) -> [];
c4_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[20.0,read_from_excel_data(Config,{3,2})]),
  test_util:expected(true, test_util:excel_equal({number,20.0}, read_from_excel_data(Config,{3,2}))).
  
d5_test(doc) -> [""];
d5_test(suite) -> [];
d5_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[0.0,read_from_excel_data(Config,{4,3})]),
  test_util:expected(true, test_util:excel_equal({number,0.0}, read_from_excel_data(Config,{4,3}))).
  
d1_test(doc) -> [""];
d1_test(suite) -> [];
d1_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=UPPER(\"\")",read_from_excel_data(Config,{0,3})]),
  test_util:expected(true, test_util:excel_equal({formula,"=UPPER(\"\")"}, read_from_excel_data(Config,{0,3}))).
  
d7_test(doc) -> [""];
d7_test(suite) -> [];
d7_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=(-D4+SQRT(POWER(D4,2) - (4 *D3 *D5)))/(2*D3)",read_from_excel_data(Config,{6,3})]),
  test_util:expected(true, test_util:excel_equal({formula,"=(-D4+SQRT(POWER(D4,2) - (4 *D3 *D5)))/(2*D3)"}, read_from_excel_data(Config,{6,3}))).
  
d8_test(doc) -> [""];
d8_test(suite) -> [];
d8_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=(-D4-SQRT(POWER(D4,2) - (4 *D3 *D5)))/(2*D3)",read_from_excel_data(Config,{7,3})]),
  test_util:expected(true, test_util:excel_equal({formula,"=(-D4-SQRT(POWER(D4,2) - (4 *D3 *D5)))/(2*D3)"}, read_from_excel_data(Config,{7,3}))).
  
d3_test(doc) -> [""];
d3_test(suite) -> [];
d3_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[1.0,read_from_excel_data(Config,{2,3})]),
  test_util:expected(true, test_util:excel_equal({number,1.0}, read_from_excel_data(Config,{2,3}))).
  
d4_test(doc) -> [""];
d4_test(suite) -> [];
d4_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[0.0,read_from_excel_data(Config,{3,3})]),
  test_util:expected(true, test_util:excel_equal({number,0.0}, read_from_excel_data(Config,{3,3}))).
  
e5_test(doc) -> [""];
e5_test(suite) -> [];
e5_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[9.0,read_from_excel_data(Config,{4,4})]),
  test_util:expected(true, test_util:excel_equal({number,9.0}, read_from_excel_data(Config,{4,4}))).
  
e7_test(doc) -> [""];
e7_test(suite) -> [];
e7_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=(-E4+SQRT(POWER(E4,2) - (4 *E3 *E5)))/(2*E3)",read_from_excel_data(Config,{6,4})]),
  test_util:expected(true, test_util:excel_equal({formula,"=(-E4+SQRT(POWER(E4,2) - (4 *E3 *E5)))/(2*E3)"}, read_from_excel_data(Config,{6,4}))).
  
e8_test(doc) -> [""];
e8_test(suite) -> [];
e8_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=(-E4-SQRT(POWER(E4,2) - (4 *E3 *E5)))/(2*E3)",read_from_excel_data(Config,{7,4})]),
  test_util:expected(true, test_util:excel_equal({formula,"=(-E4-SQRT(POWER(E4,2) - (4 *E3 *E5)))/(2*E3)"}, read_from_excel_data(Config,{7,4}))).
  
e3_test(doc) -> [""];
e3_test(suite) -> [];
e3_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[12.0,read_from_excel_data(Config,{2,4})]),
  test_util:expected(true, test_util:excel_equal({number,12.0}, read_from_excel_data(Config,{2,4}))).
  
e4_test(doc) -> [""];
e4_test(suite) -> [];
e4_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[101.2,read_from_excel_data(Config,{3,4})]),
  test_util:expected(true, test_util:excel_equal({number,101.2}, read_from_excel_data(Config,{3,4}))).
  
f5_test(doc) -> [""];
f5_test(suite) -> [];
f5_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[123.9,read_from_excel_data(Config,{4,5})]),
  test_util:expected(true, test_util:excel_equal({number,123.9}, read_from_excel_data(Config,{4,5}))).
  
f7_test(doc) -> [""];
f7_test(suite) -> [];
f7_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=(-F4+SQRT(POWER(F4,2) - (4 *F3 *F5)))/(2*F3)",read_from_excel_data(Config,{6,5})]),
  test_util:expected(true, test_util:excel_equal({formula,"=(-F4+SQRT(POWER(F4,2) - (4 *F3 *F5)))/(2*F3)"}, read_from_excel_data(Config,{6,5}))).
  
f8_test(doc) -> [""];
f8_test(suite) -> [];
f8_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=(-F4-SQRT(POWER(F4,2) - (4 *F3 *F5)))/(2*F3)",read_from_excel_data(Config,{7,5})]),
  test_util:expected(true, test_util:excel_equal({formula,"=(-F4-SQRT(POWER(F4,2) - (4 *F3 *F5)))/(2*F3)"}, read_from_excel_data(Config,{7,5}))).
  
f3_test(doc) -> [""];
f3_test(suite) -> [];
f3_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[890.9,read_from_excel_data(Config,{2,5})]),
  test_util:expected(true, test_util:excel_equal({number,890.9}, read_from_excel_data(Config,{2,5}))).
  
f4_test(doc) -> [""];
f4_test(suite) -> [];
f4_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[1011.45,read_from_excel_data(Config,{3,5})]),
  test_util:expected(true, test_util:excel_equal({number,1011.45}, read_from_excel_data(Config,{3,5}))).
  
all(doc) -> [""];
all(suite) -> 
    [a5_test,
   a1_test,
   a7_test,
   a13_test,
   a3_test,
   a14_test,
   a4_test,
   a15_test,
   b5_test,
   b7_test,
   b13_test,
   b8_test,
   b3_test,
   b4_test,
   c5_test,
   c7_test,
   c8_test,
   c3_test,
   c4_test,
   d5_test,
   d1_test,
   d7_test,
   d8_test,
   d3_test,
   d4_test,
   e5_test,
   e7_test,
   e8_test,
   e3_test,
   e4_test,
   f5_test,
   f7_test,
   f8_test,
   f3_test,
   f4_test
    ].
  
