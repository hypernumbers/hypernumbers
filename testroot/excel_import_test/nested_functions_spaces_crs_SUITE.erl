% This module has been generated by generatetest.rb
% DO NOT EDIT MANUALLY.
%
% Source file: nested_functions_spaces_crs.xls
% Generated on: Wed Jan 23 09:59:08 +0000 2008

-module(nested_functions_spaces_crs_SUITE).
-compile(export_all).
-include("test_server.hrl").


init_per_suite(Config) ->
    code:add_patha("../../ebin"),
    production_boot:setup_paths(),
    Data = test_util:read_excel_file("/Win Excel 2007 (as 97)/nested_functions_spaces_crs.xls"),
    io:format("in init_per_suite Data is ~p~n",[Data]),
    lists:merge([Config, [{nested_functions_spaces_crs_SUITE, Data}]]).
  
end_per_suite(_Config) ->
    ok.
  
init_per_testcase(_TestCase, Config) -> Config.

end_per_testcase(_TestCase, _Config) -> ok.

read_from_excel_data(Config, {Row,Col}) ->
    {value, Result} = lists:keysearch(nested_functions_spaces_crs_SUITE, 1, Config),
    Data = element(2, Result),
    Key={{row_index,Row},{col_index,Col}},
    {value, Result2} = lists:keysearch(Key, 1, Data),
    El=element(2, Result2),
    io:format("El is ~p~n",[El]),
    case El of
        {value, number, Number} -> {number,Number};
        {string,String}         -> {string,String};
        {formula,Formula}       -> {formula,Formula};
        {value,boolean,Boolean} -> {boolean,Boolean};
        {value,error,Error}     -> {error, Error};
        Other                   -> io:format("(in generatetest.rb - fix me Other is ~p~n",[Other])
    end.

a16_test(doc) -> [""];
a16_test(suite) -> [];
a16_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Multiply nested functions, spaces and CR",read_from_excel_data(Config,{15,0})]),
  test_util:expected(true, test_util:excel_equal({string,"Multiply nested functions, spaces and CR"}, read_from_excel_data(Config,{15,0}))).
  
a11_test(doc) -> [""];
a11_test(suite) -> [];
a11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Single nested functions and spaces",read_from_excel_data(Config,{10,0})]),
  test_util:expected(true, test_util:excel_equal({string,"Single nested functions and spaces"}, read_from_excel_data(Config,{10,0}))).
  
a6_test(doc) -> [""];
a6_test(suite) -> [];
a6_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Argument with operators",read_from_excel_data(Config,{5,0})]),
  test_util:expected(true, test_util:excel_equal({string,"Argument with operators"}, read_from_excel_data(Config,{5,0}))).
  
a1_test(doc) -> [""];
a1_test(suite) -> [];
a1_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["This spreadsheet test nested function calls, spaces and formula formatting",read_from_excel_data(Config,{0,0})]),
  test_util:expected(true, test_util:excel_equal({string,"This spreadsheet test nested function calls, spaces and formula formatting"}, read_from_excel_data(Config,{0,0}))).
  
a12_test(doc) -> [""];
a12_test(suite) -> [];
a12_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Single nested functions, spaces and CR",read_from_excel_data(Config,{11,0})]),
  test_util:expected(true, test_util:excel_equal({string,"Single nested functions, spaces and CR"}, read_from_excel_data(Config,{11,0}))).
  
a7_test(doc) -> [""];
a7_test(suite) -> [];
a7_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Argument with operators and spaces",read_from_excel_data(Config,{6,0})]),
  test_util:expected(true, test_util:excel_equal({string,"Argument with operators and spaces"}, read_from_excel_data(Config,{6,0}))).
  
a2_test(doc) -> [""];
a2_test(suite) -> [];
a2_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Argument with operators",read_from_excel_data(Config,{1,0})]),
  test_util:expected(true, test_util:excel_equal({string,"Argument with operators"}, read_from_excel_data(Config,{1,0}))).
  
a8_test(doc) -> [""];
a8_test(suite) -> [];
a8_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Argument with operators, spaces and CR",read_from_excel_data(Config,{7,0})]),
  test_util:expected(true, test_util:excel_equal({string,"Argument with operators, spaces and CR"}, read_from_excel_data(Config,{7,0}))).
  
a3_test(doc) -> [""];
a3_test(suite) -> [];
a3_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Argument with operators and spaces",read_from_excel_data(Config,{2,0})]),
  test_util:expected(true, test_util:excel_equal({string,"Argument with operators and spaces"}, read_from_excel_data(Config,{2,0}))).
  
a14_test(doc) -> [""];
a14_test(suite) -> [];
a14_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Multiply nested functions",read_from_excel_data(Config,{13,0})]),
  test_util:expected(true, test_util:excel_equal({string,"Multiply nested functions"}, read_from_excel_data(Config,{13,0}))).
  
a4_test(doc) -> [""];
a4_test(suite) -> [];
a4_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Argument with operators, spaces and CR",read_from_excel_data(Config,{3,0})]),
  test_util:expected(true, test_util:excel_equal({string,"Argument with operators, spaces and CR"}, read_from_excel_data(Config,{3,0}))).
  
a15_test(doc) -> [""];
a15_test(suite) -> [];
a15_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Multiply nested functions and spaces",read_from_excel_data(Config,{14,0})]),
  test_util:expected(true, test_util:excel_equal({string,"Multiply nested functions and spaces"}, read_from_excel_data(Config,{14,0}))).
  
a10_test(doc) -> [""];
a10_test(suite) -> [];
a10_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Single nested functions",read_from_excel_data(Config,{9,0})]),
  test_util:expected(true, test_util:excel_equal({string,"Single nested functions"}, read_from_excel_data(Config,{9,0}))).
  
b16_test(doc) -> [""];
b16_test(suite) -> [];
b16_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=SUM(   SUM(    SUM(5,
6, 7)+
5-SUM(
3 ),
4 )-
SUM( 4,
5)   )",read_from_excel_data(Config,{15,1})]),
  test_util:expected(true, test_util:excel_equal({formula,"=SUM(   SUM(    SUM(5,
6, 7)+
5-SUM(
3 ),
4 )-
SUM( 4,
5)   )"}, read_from_excel_data(Config,{15,1}))).
  
b11_test(doc) -> [""];
b11_test(suite) -> [];
b11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=SUM(   SUM(   3,  4  )  -    SUM(   4,  5  )  )",read_from_excel_data(Config,{10,1})]),
  test_util:expected(true, test_util:excel_equal({formula,"=SUM(   SUM(   3,  4  )  -    SUM(   4,  5  )  )"}, read_from_excel_data(Config,{10,1}))).
  
b6_test(doc) -> [""];
b6_test(suite) -> [];
b6_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=SUM(1+2,(3*5+4))",read_from_excel_data(Config,{5,1})]),
  test_util:expected(true, test_util:excel_equal({formula,"=SUM(1+2,(3*5+4))"}, read_from_excel_data(Config,{5,1}))).
  
b12_test(doc) -> [""];
b12_test(suite) -> [];
b12_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=SUM(   SUM(   3,  4  )  -
SUM(   4,  5  )  )",read_from_excel_data(Config,{11,1})]),
  test_util:expected(true, test_util:excel_equal({formula,"=SUM(   SUM(   3,  4  )  -
SUM(   4,  5  )  )"}, read_from_excel_data(Config,{11,1}))).
  
b7_test(doc) -> [""];
b7_test(suite) -> [];
b7_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["= SUM(1 + 2, ( 3    *  5  +  4  )   )",read_from_excel_data(Config,{6,1})]),
  test_util:expected(true, test_util:excel_equal({formula,"= SUM(1 + 2, ( 3    *  5  +  4  )   )"}, read_from_excel_data(Config,{6,1}))).
  
b2_test(doc) -> [""];
b2_test(suite) -> [];
b2_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=SUM(1+2)",read_from_excel_data(Config,{1,1})]),
  test_util:expected(true, test_util:excel_equal({formula,"=SUM(1+2)"}, read_from_excel_data(Config,{1,1}))).
  
b8_test(doc) -> [""];
b8_test(suite) -> [];
b8_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["= SUM(1 + 2, ( 3    *
5  +  4  )   )",read_from_excel_data(Config,{7,1})]),
  test_util:expected(true, test_util:excel_equal({formula,"= SUM(1 + 2, ( 3    *
5  +  4  )   )"}, read_from_excel_data(Config,{7,1}))).
  
b3_test(doc) -> [""];
b3_test(suite) -> [];
b3_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["= SUM(  1 +2 )",read_from_excel_data(Config,{2,1})]),
  test_util:expected(true, test_util:excel_equal({formula,"= SUM(  1 +2 )"}, read_from_excel_data(Config,{2,1}))).
  
b14_test(doc) -> [""];
b14_test(suite) -> [];
b14_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=SUM(SUM(SUM(5,6,7)+5-SUM(3),4)-SUM(4,5))",read_from_excel_data(Config,{13,1})]),
  test_util:expected(true, test_util:excel_equal({formula,"=SUM(SUM(SUM(5,6,7)+5-SUM(3),4)-SUM(4,5))"}, read_from_excel_data(Config,{13,1}))).
  
b4_test(doc) -> [""];
b4_test(suite) -> [];
b4_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["= SUM(  1
+2 )",read_from_excel_data(Config,{3,1})]),
  test_util:expected(true, test_util:excel_equal({formula,"= SUM(  1
+2 )"}, read_from_excel_data(Config,{3,1}))).
  
b15_test(doc) -> [""];
b15_test(suite) -> [];
b15_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=SUM(   SUM(    SUM(5,  6, 7)+  5-SUM(  3 ),  4 )-  SUM( 4,5)   )",read_from_excel_data(Config,{14,1})]),
  test_util:expected(true, test_util:excel_equal({formula,"=SUM(   SUM(    SUM(5,  6, 7)+  5-SUM(  3 ),  4 )-  SUM( 4,5)   )"}, read_from_excel_data(Config,{14,1}))).
  
b10_test(doc) -> [""];
b10_test(suite) -> [];
b10_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=SUM(SUM(3,4)-SUM(4,5))",read_from_excel_data(Config,{9,1})]),
  test_util:expected(true, test_util:excel_equal({formula,"=SUM(SUM(3,4)-SUM(4,5))"}, read_from_excel_data(Config,{9,1}))).
  
all(doc) -> [""];
all(suite) -> 
    [a16_test,
   a11_test,
   a6_test,
   a1_test,
   a12_test,
   a7_test,
   a2_test,
   a8_test,
   a3_test,
   a14_test,
   a4_test,
   a15_test,
   a10_test,
   b16_test,
   b11_test,
   b6_test,
   b12_test,
   b7_test,
   b2_test,
   b8_test,
   b3_test,
   b14_test,
   b4_test,
   b15_test,
   b10_test
    ].
  
