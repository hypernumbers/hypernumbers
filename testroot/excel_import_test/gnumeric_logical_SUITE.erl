% This module has been generated by generatetest.rb
% DO NOT EDIT MANUALLY.
%
% Source file: gnumeric_logical.xls
% Generated on: Thu Jan 17 19:35:03 +0000 2008

-module(gnumeric_logical_SUITE).
-compile(export_all).
-include("test_server.hrl").


init_per_suite(Config) ->
    code:add_patha("../../ebin"),
    production_boot:setup_paths(),
    Data = test_util:read_excel_file("/Win Excel 2007 (as 97)/gnumeric_logical.xls"),
    io:format("in init_per_suite Data is ~p~n",[Data]),
    lists:merge([Config, [{gnumeric_logical_SUITE, Data}]]).
  
end_per_suite(_Config) ->
    ok.
  
init_per_testcase(_TestCase, Config) -> Config.

end_per_testcase(_TestCase, _Config) -> ok.

read_from_excel_data(Config, {Row,Col}) ->
    {value, Result} = lists:keysearch(gnumeric_logical_SUITE, 1, Config),
    Data = element(2, Result),
    Key={{row_index,Row},{col_index,Col}},
    {value, Result2} = lists:keysearch(Key, 1, Data),
    El=element(2, Result2),
    io:format("El is ~p~n",[El]),
    case El of
        {value, number, Number} -> {number,Number};
        {string,String}         -> {string,String};
        {formula,Formula}       -> {formula,Formula};
        {value,boolean,Boolean} -> {boolean,Boolean};
        {value,error,Error}     -> {error, Error};
        Other                   -> io:format("(in generatetest.rb - fix me Other is ~p~n",[Other])
    end.

a16_test(doc) -> [""];
a16_test(suite) -> [];
a16_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["OR",read_from_excel_data(Config,{15,0})]),
  test_util:expected(true, test_util:excel_equal({string,"OR"}, read_from_excel_data(Config,{15,0}))).
  
a11_test(doc) -> [""];
a11_test(suite) -> [];
a11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Function",read_from_excel_data(Config,{10,0})]),
  test_util:expected(true, test_util:excel_equal({string,"Function"}, read_from_excel_data(Config,{10,0}))).
  
a17_test(doc) -> [""];
a17_test(suite) -> [];
a17_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["TRUE",read_from_excel_data(Config,{16,0})]),
  test_util:expected(true, test_util:excel_equal({string,"TRUE"}, read_from_excel_data(Config,{16,0}))).
  
a1_test(doc) -> [""];
a1_test(suite) -> [];
a1_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["LOGICAL FUNCTIONS",read_from_excel_data(Config,{0,0})]),
  test_util:expected(true, test_util:excel_equal({string,"LOGICAL FUNCTIONS"}, read_from_excel_data(Config,{0,0}))).
  
a12_test(doc) -> [""];
a12_test(suite) -> [];
a12_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["AND",read_from_excel_data(Config,{11,0})]),
  test_util:expected(true, test_util:excel_equal({string,"AND"}, read_from_excel_data(Config,{11,0}))).
  
a7_test(doc) -> [""];
a7_test(suite) -> [];
a7_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["#Succeded",read_from_excel_data(Config,{6,0})]),
  test_util:expected(true, test_util:excel_equal({string,"#Succeded"}, read_from_excel_data(Config,{6,0}))).
  
a18_test(doc) -> [""];
a18_test(suite) -> [];
a18_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Total",read_from_excel_data(Config,{17,0})]),
  test_util:expected(true, test_util:excel_equal({string,"Total"}, read_from_excel_data(Config,{17,0}))).
  
a13_test(doc) -> [""];
a13_test(suite) -> [];
a13_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["FALSE",read_from_excel_data(Config,{12,0})]),
  test_util:expected(true, test_util:excel_equal({string,"FALSE"}, read_from_excel_data(Config,{12,0}))).
  
a8_test(doc) -> [""];
a8_test(suite) -> [];
a8_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=SUM(H12:H17)",read_from_excel_data(Config,{7,0})]),
  test_util:expected(true, test_util:excel_equal({formula,"=SUM(H12:H17)"}, read_from_excel_data(Config,{7,0}))).
  
a3_test(doc) -> [""];
a3_test(suite) -> [];
a3_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Test Status",read_from_excel_data(Config,{2,0})]),
  test_util:expected(true, test_util:excel_equal({string,"Test Status"}, read_from_excel_data(Config,{2,0}))).
  
a14_test(doc) -> [""];
a14_test(suite) -> [];
a14_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["IF",read_from_excel_data(Config,{13,0})]),
  test_util:expected(true, test_util:excel_equal({string,"IF"}, read_from_excel_data(Config,{13,0}))).
  
a4_test(doc) -> [""];
a4_test(suite) -> [];
a4_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=IF(A8=B8,\"All ok.\",\"FAILED!!\")",read_from_excel_data(Config,{3,0})]),
  test_util:expected(true, test_util:excel_equal({formula,"=IF(A8=B8,\"All ok.\",\"FAILED!!\")"}, read_from_excel_data(Config,{3,0}))).
  
a15_test(doc) -> [""];
a15_test(suite) -> [];
a15_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["NOT",read_from_excel_data(Config,{14,0})]),
  test_util:expected(true, test_util:excel_equal({string,"NOT"}, read_from_excel_data(Config,{14,0}))).
  
b16_test(doc) -> [""];
b16_test(suite) -> [];
b16_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=OR(1,0)",read_from_excel_data(Config,{15,1})]),
  test_util:expected(true, test_util:excel_equal({formula,"=OR(1,0)"}, read_from_excel_data(Config,{15,1}))).
  
b11_test(doc) -> [""];
b11_test(suite) -> [];
b11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["1st test",read_from_excel_data(Config,{10,1})]),
  test_util:expected(true, test_util:excel_equal({string,"1st test"}, read_from_excel_data(Config,{10,1}))).
  
b17_test(doc) -> [""];
b17_test(suite) -> [];
b17_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=TRUE()",read_from_excel_data(Config,{16,1})]),
  test_util:expected(true, test_util:excel_equal({formula,"=TRUE()"}, read_from_excel_data(Config,{16,1}))).
  
b12_test(doc) -> [""];
b12_test(suite) -> [];
b12_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=AND(1,1)",read_from_excel_data(Config,{11,1})]),
  test_util:expected(true, test_util:excel_equal({formula,"=AND(1,1)"}, read_from_excel_data(Config,{11,1}))).
  
b7_test(doc) -> [""];
b7_test(suite) -> [];
b7_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["#Total",read_from_excel_data(Config,{6,1})]),
  test_util:expected(true, test_util:excel_equal({string,"#Total"}, read_from_excel_data(Config,{6,1}))).
  
b13_test(doc) -> [""];
b13_test(suite) -> [];
b13_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=FALSE()",read_from_excel_data(Config,{12,1})]),
  test_util:expected(true, test_util:excel_equal({formula,"=FALSE()"}, read_from_excel_data(Config,{12,1}))).
  
b8_test(doc) -> [""];
b8_test(suite) -> [];
b8_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[6.0,read_from_excel_data(Config,{7,1})]),
  test_util:expected(true, test_util:excel_equal({number,6.0}, read_from_excel_data(Config,{7,1}))).
  
b14_test(doc) -> [""];
b14_test(suite) -> [];
b14_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=IF(1,\"true\",\"false\")",read_from_excel_data(Config,{13,1})]),
  test_util:expected(true, test_util:excel_equal({formula,"=IF(1,\"true\",\"false\")"}, read_from_excel_data(Config,{13,1}))).
  
b15_test(doc) -> [""];
b15_test(suite) -> [];
b15_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=NOT(TRUE)",read_from_excel_data(Config,{14,1})]),
  test_util:expected(true, test_util:excel_equal({formula,"=NOT(TRUE)"}, read_from_excel_data(Config,{14,1}))).
  
c16_test(doc) -> [""];
c16_test(suite) -> [];
c16_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[true,read_from_excel_data(Config,{15,2})]),
  test_util:expected(true, test_util:excel_equal({boolean,true}, read_from_excel_data(Config,{15,2}))).
  
c11_test(doc) -> [""];
c11_test(suite) -> [];
c11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Correct",read_from_excel_data(Config,{10,2})]),
  test_util:expected(true, test_util:excel_equal({string,"Correct"}, read_from_excel_data(Config,{10,2}))).
  
c17_test(doc) -> [""];
c17_test(suite) -> [];
c17_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[true,read_from_excel_data(Config,{16,2})]),
  test_util:expected(true, test_util:excel_equal({boolean,true}, read_from_excel_data(Config,{16,2}))).
  
c12_test(doc) -> [""];
c12_test(suite) -> [];
c12_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[true,read_from_excel_data(Config,{11,2})]),
  test_util:expected(true, test_util:excel_equal({boolean,true}, read_from_excel_data(Config,{11,2}))).
  
c13_test(doc) -> [""];
c13_test(suite) -> [];
c13_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[false,read_from_excel_data(Config,{12,2})]),
  test_util:expected(true, test_util:excel_equal({boolean,false}, read_from_excel_data(Config,{12,2}))).
  
c14_test(doc) -> [""];
c14_test(suite) -> [];
c14_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["true",read_from_excel_data(Config,{13,2})]),
  test_util:expected(true, test_util:excel_equal({string,"true"}, read_from_excel_data(Config,{13,2}))).
  
c15_test(doc) -> [""];
c15_test(suite) -> [];
c15_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[false,read_from_excel_data(Config,{14,2})]),
  test_util:expected(true, test_util:excel_equal({boolean,false}, read_from_excel_data(Config,{14,2}))).
  
d16_test(doc) -> [""];
d16_test(suite) -> [];
d16_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=OR(0)",read_from_excel_data(Config,{15,3})]),
  test_util:expected(true, test_util:excel_equal({formula,"=OR(0)"}, read_from_excel_data(Config,{15,3}))).
  
d11_test(doc) -> [""];
d11_test(suite) -> [];
d11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["2nd test",read_from_excel_data(Config,{10,3})]),
  test_util:expected(true, test_util:excel_equal({string,"2nd test"}, read_from_excel_data(Config,{10,3}))).
  
d17_test(doc) -> [""];
d17_test(suite) -> [];
d17_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=TRUE()",read_from_excel_data(Config,{16,3})]),
  test_util:expected(true, test_util:excel_equal({formula,"=TRUE()"}, read_from_excel_data(Config,{16,3}))).
  
d12_test(doc) -> [""];
d12_test(suite) -> [];
d12_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=AND(1)",read_from_excel_data(Config,{11,3})]),
  test_util:expected(true, test_util:excel_equal({formula,"=AND(1)"}, read_from_excel_data(Config,{11,3}))).
  
d13_test(doc) -> [""];
d13_test(suite) -> [];
d13_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=FALSE()",read_from_excel_data(Config,{12,3})]),
  test_util:expected(true, test_util:excel_equal({formula,"=FALSE()"}, read_from_excel_data(Config,{12,3}))).
  
d14_test(doc) -> [""];
d14_test(suite) -> [];
d14_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=IF(0,\"true\",\"false\")",read_from_excel_data(Config,{13,3})]),
  test_util:expected(true, test_util:excel_equal({formula,"=IF(0,\"true\",\"false\")"}, read_from_excel_data(Config,{13,3}))).
  
d15_test(doc) -> [""];
d15_test(suite) -> [];
d15_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=NOT(FALSE)",read_from_excel_data(Config,{14,3})]),
  test_util:expected(true, test_util:excel_equal({formula,"=NOT(FALSE)"}, read_from_excel_data(Config,{14,3}))).
  
e16_test(doc) -> [""];
e16_test(suite) -> [];
e16_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[false,read_from_excel_data(Config,{15,4})]),
  test_util:expected(true, test_util:excel_equal({boolean,false}, read_from_excel_data(Config,{15,4}))).
  
e11_test(doc) -> [""];
e11_test(suite) -> [];
e11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Correct",read_from_excel_data(Config,{10,4})]),
  test_util:expected(true, test_util:excel_equal({string,"Correct"}, read_from_excel_data(Config,{10,4}))).
  
e17_test(doc) -> [""];
e17_test(suite) -> [];
e17_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[true,read_from_excel_data(Config,{16,4})]),
  test_util:expected(true, test_util:excel_equal({boolean,true}, read_from_excel_data(Config,{16,4}))).
  
e12_test(doc) -> [""];
e12_test(suite) -> [];
e12_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[true,read_from_excel_data(Config,{11,4})]),
  test_util:expected(true, test_util:excel_equal({boolean,true}, read_from_excel_data(Config,{11,4}))).
  
e13_test(doc) -> [""];
e13_test(suite) -> [];
e13_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[false,read_from_excel_data(Config,{12,4})]),
  test_util:expected(true, test_util:excel_equal({boolean,false}, read_from_excel_data(Config,{12,4}))).
  
e14_test(doc) -> [""];
e14_test(suite) -> [];
e14_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["false",read_from_excel_data(Config,{13,4})]),
  test_util:expected(true, test_util:excel_equal({string,"false"}, read_from_excel_data(Config,{13,4}))).
  
e15_test(doc) -> [""];
e15_test(suite) -> [];
e15_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[true,read_from_excel_data(Config,{14,4})]),
  test_util:expected(true, test_util:excel_equal({boolean,true}, read_from_excel_data(Config,{14,4}))).
  
f16_test(doc) -> [""];
f16_test(suite) -> [];
f16_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=OR(1,1,1,1)",read_from_excel_data(Config,{15,5})]),
  test_util:expected(true, test_util:excel_equal({formula,"=OR(1,1,1,1)"}, read_from_excel_data(Config,{15,5}))).
  
f11_test(doc) -> [""];
f11_test(suite) -> [];
f11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["3rd test",read_from_excel_data(Config,{10,5})]),
  test_util:expected(true, test_util:excel_equal({string,"3rd test"}, read_from_excel_data(Config,{10,5}))).
  
f17_test(doc) -> [""];
f17_test(suite) -> [];
f17_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=TRUE()",read_from_excel_data(Config,{16,5})]),
  test_util:expected(true, test_util:excel_equal({formula,"=TRUE()"}, read_from_excel_data(Config,{16,5}))).
  
f12_test(doc) -> [""];
f12_test(suite) -> [];
f12_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=AND(1,1,0)",read_from_excel_data(Config,{11,5})]),
  test_util:expected(true, test_util:excel_equal({formula,"=AND(1,1,0)"}, read_from_excel_data(Config,{11,5}))).
  
f13_test(doc) -> [""];
f13_test(suite) -> [];
f13_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=FALSE()",read_from_excel_data(Config,{12,5})]),
  test_util:expected(true, test_util:excel_equal({formula,"=FALSE()"}, read_from_excel_data(Config,{12,5}))).
  
f14_test(doc) -> [""];
f14_test(suite) -> [];
f14_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=IF(0,\"true\",\"false\")",read_from_excel_data(Config,{13,5})]),
  test_util:expected(true, test_util:excel_equal({formula,"=IF(0,\"true\",\"false\")"}, read_from_excel_data(Config,{13,5}))).
  
f15_test(doc) -> [""];
f15_test(suite) -> [];
f15_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=NOT(NOT(TRUE))",read_from_excel_data(Config,{14,5})]),
  test_util:expected(true, test_util:excel_equal({formula,"=NOT(NOT(TRUE))"}, read_from_excel_data(Config,{14,5}))).
  
g16_test(doc) -> [""];
g16_test(suite) -> [];
g16_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[true,read_from_excel_data(Config,{15,6})]),
  test_util:expected(true, test_util:excel_equal({boolean,true}, read_from_excel_data(Config,{15,6}))).
  
g11_test(doc) -> [""];
g11_test(suite) -> [];
g11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Correct",read_from_excel_data(Config,{10,6})]),
  test_util:expected(true, test_util:excel_equal({string,"Correct"}, read_from_excel_data(Config,{10,6}))).
  
g17_test(doc) -> [""];
g17_test(suite) -> [];
g17_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[true,read_from_excel_data(Config,{16,6})]),
  test_util:expected(true, test_util:excel_equal({boolean,true}, read_from_excel_data(Config,{16,6}))).
  
g12_test(doc) -> [""];
g12_test(suite) -> [];
g12_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[false,read_from_excel_data(Config,{11,6})]),
  test_util:expected(true, test_util:excel_equal({boolean,false}, read_from_excel_data(Config,{11,6}))).
  
g13_test(doc) -> [""];
g13_test(suite) -> [];
g13_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[false,read_from_excel_data(Config,{12,6})]),
  test_util:expected(true, test_util:excel_equal({boolean,false}, read_from_excel_data(Config,{12,6}))).
  
g14_test(doc) -> [""];
g14_test(suite) -> [];
g14_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["false",read_from_excel_data(Config,{13,6})]),
  test_util:expected(true, test_util:excel_equal({string,"false"}, read_from_excel_data(Config,{13,6}))).
  
g15_test(doc) -> [""];
g15_test(suite) -> [];
g15_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[true,read_from_excel_data(Config,{14,6})]),
  test_util:expected(true, test_util:excel_equal({boolean,true}, read_from_excel_data(Config,{14,6}))).
  
h16_test(doc) -> [""];
h16_test(suite) -> [];
h16_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=IF(AND(B16=C16,D16=E16,F16=G16),1,0)",read_from_excel_data(Config,{15,7})]),
  test_util:expected(true, test_util:excel_equal({formula,"=IF(AND(B16=C16,D16=E16,F16=G16),1,0)"}, read_from_excel_data(Config,{15,7}))).
  
h11_test(doc) -> [""];
h11_test(suite) -> [];
h11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Status",read_from_excel_data(Config,{10,7})]),
  test_util:expected(true, test_util:excel_equal({string,"Status"}, read_from_excel_data(Config,{10,7}))).
  
h17_test(doc) -> [""];
h17_test(suite) -> [];
h17_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=IF(AND(B17=C17,D17=E17,F17=G17),1,0)",read_from_excel_data(Config,{16,7})]),
  test_util:expected(true, test_util:excel_equal({formula,"=IF(AND(B17=C17,D17=E17,F17=G17),1,0)"}, read_from_excel_data(Config,{16,7}))).
  
h12_test(doc) -> [""];
h12_test(suite) -> [];
h12_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=IF(AND(B12=C12,D12=E12,F12=G12),1,0)",read_from_excel_data(Config,{11,7})]),
  test_util:expected(true, test_util:excel_equal({formula,"=IF(AND(B12=C12,D12=E12,F12=G12),1,0)"}, read_from_excel_data(Config,{11,7}))).
  
h13_test(doc) -> [""];
h13_test(suite) -> [];
h13_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=IF(AND(B13=C13,D13=E13,F13=G13),1,0)",read_from_excel_data(Config,{12,7})]),
  test_util:expected(true, test_util:excel_equal({formula,"=IF(AND(B13=C13,D13=E13,F13=G13),1,0)"}, read_from_excel_data(Config,{12,7}))).
  
h14_test(doc) -> [""];
h14_test(suite) -> [];
h14_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=IF(AND(B14=C14,D14=E14,F14=G14),1,0)",read_from_excel_data(Config,{13,7})]),
  test_util:expected(true, test_util:excel_equal({formula,"=IF(AND(B14=C14,D14=E14,F14=G14),1,0)"}, read_from_excel_data(Config,{13,7}))).
  
h15_test(doc) -> [""];
h15_test(suite) -> [];
h15_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[1.0,read_from_excel_data(Config,{14,7})]),
  test_util:expected(true, test_util:excel_equal({number,1.0}, read_from_excel_data(Config,{14,7}))).
  
i16_test(doc) -> [""];
i16_test(suite) -> [];
i16_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=IF(H16,\"Ok.\",\"FAILED!!\")",read_from_excel_data(Config,{15,8})]),
  test_util:expected(true, test_util:excel_equal({formula,"=IF(H16,\"Ok.\",\"FAILED!!\")"}, read_from_excel_data(Config,{15,8}))).
  
i11_test(doc) -> [""];
i11_test(suite) -> [];
i11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Status message",read_from_excel_data(Config,{10,8})]),
  test_util:expected(true, test_util:excel_equal({string,"Status message"}, read_from_excel_data(Config,{10,8}))).
  
i17_test(doc) -> [""];
i17_test(suite) -> [];
i17_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=IF(H17,\"Ok.\",\"FAILED!!\")",read_from_excel_data(Config,{16,8})]),
  test_util:expected(true, test_util:excel_equal({formula,"=IF(H17,\"Ok.\",\"FAILED!!\")"}, read_from_excel_data(Config,{16,8}))).
  
i12_test(doc) -> [""];
i12_test(suite) -> [];
i12_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=IF(H12,\"Ok.\",\"FAILED!!\")",read_from_excel_data(Config,{11,8})]),
  test_util:expected(true, test_util:excel_equal({formula,"=IF(H12,\"Ok.\",\"FAILED!!\")"}, read_from_excel_data(Config,{11,8}))).
  
i13_test(doc) -> [""];
i13_test(suite) -> [];
i13_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=IF(H13,\"Ok.\",\"FAILED!!\")",read_from_excel_data(Config,{12,8})]),
  test_util:expected(true, test_util:excel_equal({formula,"=IF(H13,\"Ok.\",\"FAILED!!\")"}, read_from_excel_data(Config,{12,8}))).
  
i14_test(doc) -> [""];
i14_test(suite) -> [];
i14_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=IF(H14,\"Ok.\",\"FAILED!!\")",read_from_excel_data(Config,{13,8})]),
  test_util:expected(true, test_util:excel_equal({formula,"=IF(H14,\"Ok.\",\"FAILED!!\")"}, read_from_excel_data(Config,{13,8}))).
  
i15_test(doc) -> [""];
i15_test(suite) -> [];
i15_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=IF(H15,\"Ok.\",\"FAILED!!\")",read_from_excel_data(Config,{14,8})]),
  test_util:expected(true, test_util:excel_equal({formula,"=IF(H15,\"Ok.\",\"FAILED!!\")"}, read_from_excel_data(Config,{14,8}))).
  
all(doc) -> [""];
all(suite) -> 
    [a16_test,
   a11_test,
   a17_test,
   a1_test,
   a12_test,
   a7_test,
   a18_test,
   a13_test,
   a8_test,
   a3_test,
   a14_test,
   a4_test,
   a15_test,
   b16_test,
   b11_test,
   b17_test,
   b12_test,
   b7_test,
   b13_test,
   b8_test,
   b14_test,
   b15_test,
   c16_test,
   c11_test,
   c17_test,
   c12_test,
   c13_test,
   c14_test,
   c15_test,
   d16_test,
   d11_test,
   d17_test,
   d12_test,
   d13_test,
   d14_test,
   d15_test,
   e16_test,
   e11_test,
   e17_test,
   e12_test,
   e13_test,
   e14_test,
   e15_test,
   f16_test,
   f11_test,
   f17_test,
   f12_test,
   f13_test,
   f14_test,
   f15_test,
   g16_test,
   g11_test,
   g17_test,
   g12_test,
   g13_test,
   g14_test,
   g15_test,
   h16_test,
   h11_test,
   h17_test,
   h12_test,
   h13_test,
   h14_test,
   h15_test,
   i16_test,
   i11_test,
   i17_test,
   i12_test,
   i13_test,
   i14_test,
   i15_test
    ].
  
