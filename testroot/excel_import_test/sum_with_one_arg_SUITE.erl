% This module has been generated by generatetest.rb
% DO NOT EDIT MANUALLY.
%
% Source file: sum_with_one_arg.xls
% Generated on: Wed Jan 23 09:59:03 +0000 2008

-module(sum_with_one_arg_SUITE).
-compile(export_all).
-include("test_server.hrl").


init_per_suite(Config) ->
    code:add_patha("../../ebin"),
    production_boot:setup_paths(),
    Data = test_util:read_excel_file("/Win Excel 2007 (as 97)/sum_with_one_arg.xls"),
    io:format("in init_per_suite Data is ~p~n",[Data]),
    lists:merge([Config, [{sum_with_one_arg_SUITE, Data}]]).
  
end_per_suite(_Config) ->
    ok.
  
init_per_testcase(_TestCase, Config) -> Config.

end_per_testcase(_TestCase, _Config) -> ok.

read_from_excel_data(Config, {Row,Col}) ->
    {value, Result} = lists:keysearch(sum_with_one_arg_SUITE, 1, Config),
    Data = element(2, Result),
    Key={{row_index,Row},{col_index,Col}},
    {value, Result2} = lists:keysearch(Key, 1, Data),
    El=element(2, Result2),
    io:format("El is ~p~n",[El]),
    case El of
        {value, number, Number} -> {number,Number};
        {string,String}         -> {string,String};
        {formula,Formula}       -> {formula,Formula};
        {value,boolean,Boolean} -> {boolean,Boolean};
        {value,error,Error}     -> {error, Error};
        Other                   -> io:format("(in generatetest.rb - fix me Other is ~p~n",[Other])
    end.

a5_test(doc) -> [""];
a5_test(suite) -> [];
a5_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=SUM(B5)",read_from_excel_data(Config,{4,0})]),
  test_util:expected(true, test_util:excel_equal({formula,"=SUM(B5)"}, read_from_excel_data(Config,{4,0}))).
  
a11_test(doc) -> [""];
a11_test(suite) -> [];
a11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=SUM(B11:C11 D11:E11,F11:H11)",read_from_excel_data(Config,{10,0})]),
  test_util:expected(true, test_util:excel_equal({formula,"=SUM(B11:C11 D11:E11,F11:H11)"}, read_from_excel_data(Config,{10,0}))).
  
a6_test(doc) -> [""];
a6_test(suite) -> [];
a6_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=SUM({1})",read_from_excel_data(Config,{5,0})]),
  test_util:expected(true, test_util:excel_equal({formula,"=SUM({1})"}, read_from_excel_data(Config,{5,0}))).
  
a1_test(doc) -> [""];
a1_test(suite) -> [];
a1_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Special Test For Sum With 1 Parameter",read_from_excel_data(Config,{0,0})]),
  test_util:expected(true, test_util:excel_equal({string,"Special Test For Sum With 1 Parameter"}, read_from_excel_data(Config,{0,0}))).
  
a7_test(doc) -> [""];
a7_test(suite) -> [];
a7_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=SUM({1,2,3,4})",read_from_excel_data(Config,{6,0})]),
  test_util:expected(true, test_util:excel_equal({formula,"=SUM({1,2,3,4})"}, read_from_excel_data(Config,{6,0}))).
  
a2_test(doc) -> [""];
a2_test(suite) -> [];
a2_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["See Section 3.10 of the excelfileformat.v1.40.pdf",read_from_excel_data(Config,{1,0})]),
  test_util:expected(true, test_util:excel_equal({string,"See Section 3.10 of the excelfileformat.v1.40.pdf"}, read_from_excel_data(Config,{1,0}))).
  
a8_test(doc) -> [""];
a8_test(suite) -> [];
a8_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=SUM(1+2)",read_from_excel_data(Config,{7,0})]),
  test_util:expected(true, test_util:excel_equal({formula,"=SUM(1+2)"}, read_from_excel_data(Config,{7,0}))).
  
a3_test(doc) -> [""];
a3_test(suite) -> [];
a3_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["When sum has a single parameter is is converted into an attribute token",read_from_excel_data(Config,{2,0})]),
  test_util:expected(true, test_util:excel_equal({string,"When sum has a single parameter is is converted into an attribute token"}, read_from_excel_data(Config,{2,0}))).
  
a9_test(doc) -> [""];
a9_test(suite) -> [];
a9_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=SUM(B9:C9)",read_from_excel_data(Config,{8,0})]),
  test_util:expected(true, test_util:excel_equal({formula,"=SUM(B9:C9)"}, read_from_excel_data(Config,{8,0}))).
  
a4_test(doc) -> [""];
a4_test(suite) -> [];
a4_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=SUM(1)",read_from_excel_data(Config,{3,0})]),
  test_util:expected(true, test_util:excel_equal({formula,"=SUM(1)"}, read_from_excel_data(Config,{3,0}))).
  
a10_test(doc) -> [""];
a10_test(suite) -> [];
a10_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=SUM(B10:C10 C10:E10,F10:H10)",read_from_excel_data(Config,{9,0})]),
  test_util:expected(true, test_util:excel_equal({formula,"=SUM(B10:C10 C10:E10,F10:H10)"}, read_from_excel_data(Config,{9,0}))).
  
b5_test(doc) -> [""];
b5_test(suite) -> [];
b5_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[4.0,read_from_excel_data(Config,{4,1})]),
  test_util:expected(true, test_util:excel_equal({number,4.0}, read_from_excel_data(Config,{4,1}))).
  
b11_test(doc) -> [""];
b11_test(suite) -> [];
b11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[1.0,read_from_excel_data(Config,{10,1})]),
  test_util:expected(true, test_util:excel_equal({number,1.0}, read_from_excel_data(Config,{10,1}))).
  
b9_test(doc) -> [""];
b9_test(suite) -> [];
b9_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[1.0,read_from_excel_data(Config,{8,1})]),
  test_util:expected(true, test_util:excel_equal({number,1.0}, read_from_excel_data(Config,{8,1}))).
  
b10_test(doc) -> [""];
b10_test(suite) -> [];
b10_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[1.0,read_from_excel_data(Config,{9,1})]),
  test_util:expected(true, test_util:excel_equal({number,1.0}, read_from_excel_data(Config,{9,1}))).
  
c11_test(doc) -> [""];
c11_test(suite) -> [];
c11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[2.0,read_from_excel_data(Config,{10,2})]),
  test_util:expected(true, test_util:excel_equal({number,2.0}, read_from_excel_data(Config,{10,2}))).
  
c9_test(doc) -> [""];
c9_test(suite) -> [];
c9_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[2.0,read_from_excel_data(Config,{8,2})]),
  test_util:expected(true, test_util:excel_equal({number,2.0}, read_from_excel_data(Config,{8,2}))).
  
c10_test(doc) -> [""];
c10_test(suite) -> [];
c10_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[2.0,read_from_excel_data(Config,{9,2})]),
  test_util:expected(true, test_util:excel_equal({number,2.0}, read_from_excel_data(Config,{9,2}))).
  
d11_test(doc) -> [""];
d11_test(suite) -> [];
d11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[3.0,read_from_excel_data(Config,{10,3})]),
  test_util:expected(true, test_util:excel_equal({number,3.0}, read_from_excel_data(Config,{10,3}))).
  
d10_test(doc) -> [""];
d10_test(suite) -> [];
d10_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[3.0,read_from_excel_data(Config,{9,3})]),
  test_util:expected(true, test_util:excel_equal({number,3.0}, read_from_excel_data(Config,{9,3}))).
  
e11_test(doc) -> [""];
e11_test(suite) -> [];
e11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[4.0,read_from_excel_data(Config,{10,4})]),
  test_util:expected(true, test_util:excel_equal({number,4.0}, read_from_excel_data(Config,{10,4}))).
  
e10_test(doc) -> [""];
e10_test(suite) -> [];
e10_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[4.0,read_from_excel_data(Config,{9,4})]),
  test_util:expected(true, test_util:excel_equal({number,4.0}, read_from_excel_data(Config,{9,4}))).
  
f11_test(doc) -> [""];
f11_test(suite) -> [];
f11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[5.0,read_from_excel_data(Config,{10,5})]),
  test_util:expected(true, test_util:excel_equal({number,5.0}, read_from_excel_data(Config,{10,5}))).
  
f10_test(doc) -> [""];
f10_test(suite) -> [];
f10_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[5.0,read_from_excel_data(Config,{9,5})]),
  test_util:expected(true, test_util:excel_equal({number,5.0}, read_from_excel_data(Config,{9,5}))).
  
g11_test(doc) -> [""];
g11_test(suite) -> [];
g11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[6.0,read_from_excel_data(Config,{10,6})]),
  test_util:expected(true, test_util:excel_equal({number,6.0}, read_from_excel_data(Config,{10,6}))).
  
g10_test(doc) -> [""];
g10_test(suite) -> [];
g10_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[6.0,read_from_excel_data(Config,{9,6})]),
  test_util:expected(true, test_util:excel_equal({number,6.0}, read_from_excel_data(Config,{9,6}))).
  
h11_test(doc) -> [""];
h11_test(suite) -> [];
h11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[7.0,read_from_excel_data(Config,{10,7})]),
  test_util:expected(true, test_util:excel_equal({number,7.0}, read_from_excel_data(Config,{10,7}))).
  
h10_test(doc) -> [""];
h10_test(suite) -> [];
h10_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[7.0,read_from_excel_data(Config,{9,7})]),
  test_util:expected(true, test_util:excel_equal({number,7.0}, read_from_excel_data(Config,{9,7}))).
  
i11_test(doc) -> [""];
i11_test(suite) -> [];
i11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[8.0,read_from_excel_data(Config,{10,8})]),
  test_util:expected(true, test_util:excel_equal({number,8.0}, read_from_excel_data(Config,{10,8}))).
  
i10_test(doc) -> [""];
i10_test(suite) -> [];
i10_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[8.0,read_from_excel_data(Config,{9,8})]),
  test_util:expected(true, test_util:excel_equal({number,8.0}, read_from_excel_data(Config,{9,8}))).
  
all(doc) -> [""];
all(suite) -> 
    [a5_test,
   a11_test,
   a6_test,
   a1_test,
   a7_test,
   a2_test,
   a8_test,
   a3_test,
   a9_test,
   a4_test,
   a10_test,
   b5_test,
   b11_test,
   b9_test,
   b10_test,
   c11_test,
   c9_test,
   c10_test,
   d11_test,
   d10_test,
   e11_test,
   e10_test,
   f11_test,
   f10_test,
   g11_test,
   g10_test,
   h11_test,
   h10_test,
   i11_test,
   i10_test
    ].
  
