% This module has been generated by generatetest.rb
% DO NOT EDIT MANUALLY.
%
% Source file: simple_arrays_and_ranges.xls
% Generated on: Wed Jan 23 21:09:50 +0000 2008

-module(simple_arrays_and_ranges_SUITE).
-compile(export_all).
-include("test_server.hrl").


init_per_suite(Config) ->
    code:add_patha("../../ebin"),
    production_boot:setup_paths(),
    Data = test_util:read_excel_file("/Win Excel 2007 (as 97)/simple_arrays_and_ranges.xls"),
    %%io:format("in init_per_suite Data is ~p~n",[Data]),
    lists:merge([Config, [{simple_arrays_and_ranges_SUITE, Data}]]).
  
end_per_suite(_Config) ->
    ok.
  
init_per_testcase(_TestCase, Config) -> Config.

end_per_testcase(_TestCase, _Config) -> ok.

read_from_excel_data(Config, {Row,Col}) ->
    {value, Result} = lists:keysearch(simple_arrays_and_ranges_SUITE, 1, Config),
    Data = element(2, Result),
    Key={{row_index,Row},{col_index,Col}},
    {value, Result2} = lists:keysearch(Key, 1, Data),
    El=element(2, Result2),
    %%io:format("El is ~p~n",[El]),
    case El of
        {value, number, Number} -> {number,Number};
        {string,String}         -> {string,String};
        {formula,Formula}       -> {formula,Formula};
        {value,boolean,Boolean} -> {boolean,Boolean};
        {value,error,Error}     -> {error, Error};
        Other                   -> io:format("(in generatetest.rb - fix me Other is ~p~n",[Other])
    end.

a8_test(doc) -> [""];
a8_test(suite) -> [];
a8_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Bruk ->",read_from_excel_data(Config,{7,0})]),
  test_util:expected(true, test_util:excel_equal({string,"Bruk ->"}, read_from_excel_data(Config,{7,0}))).
  
a9_test(doc) -> [""];
a9_test(suite) -> [];
a9_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Bruk ->",read_from_excel_data(Config,{8,0})]),
  test_util:expected(true, test_util:excel_equal({string,"Bruk ->"}, read_from_excel_data(Config,{8,0}))).
  
b5_test(doc) -> [""];
b5_test(suite) -> [];
b5_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Multiple Element Array",read_from_excel_data(Config,{4,1})]),
  test_util:expected(true, test_util:excel_equal({string,"Multiple Element Array"}, read_from_excel_data(Config,{4,1}))).
  
b11_test(doc) -> [""];
b11_test(suite) -> [];
b11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Complex I",read_from_excel_data(Config,{10,1})]),
  test_util:expected(true, test_util:excel_equal({string,"Complex I"}, read_from_excel_data(Config,{10,1}))).
  
b6_test(doc) -> [""];
b6_test(suite) -> [];
b6_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["2D Array",read_from_excel_data(Config,{5,1})]),
  test_util:expected(true, test_util:excel_equal({string,"2D Array"}, read_from_excel_data(Config,{5,1}))).
  
b1_test(doc) -> [""];
b1_test(suite) -> [];
b1_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Single Element Array I",read_from_excel_data(Config,{0,1})]),
  test_util:expected(true, test_util:excel_equal({string,"Single Element Array I"}, read_from_excel_data(Config,{0,1}))).
  
b12_test(doc) -> [""];
b12_test(suite) -> [];
b12_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Complex II",read_from_excel_data(Config,{11,1})]),
  test_util:expected(true, test_util:excel_equal({string,"Complex II"}, read_from_excel_data(Config,{11,1}))).
  
b7_test(doc) -> [""];
b7_test(suite) -> [];
b7_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["3D Array",read_from_excel_data(Config,{6,1})]),
  test_util:expected(true, test_util:excel_equal({string,"3D Array"}, read_from_excel_data(Config,{6,1}))).
  
b2_test(doc) -> [""];
b2_test(suite) -> [];
b2_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Single Element Array 2",read_from_excel_data(Config,{1,1})]),
  test_util:expected(true, test_util:excel_equal({string,"Single Element Array 2"}, read_from_excel_data(Config,{1,1}))).
  
b8_test(doc) -> [""];
b8_test(suite) -> [];
b8_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Range",read_from_excel_data(Config,{7,1})]),
  test_util:expected(true, test_util:excel_equal({string,"Range"}, read_from_excel_data(Config,{7,1}))).
  
b3_test(doc) -> [""];
b3_test(suite) -> [];
b3_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Single Element Array 3",read_from_excel_data(Config,{2,1})]),
  test_util:expected(true, test_util:excel_equal({string,"Single Element Array 3"}, read_from_excel_data(Config,{2,1}))).
  
b9_test(doc) -> [""];
b9_test(suite) -> [];
b9_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Intersection",read_from_excel_data(Config,{8,1})]),
  test_util:expected(true, test_util:excel_equal({string,"Intersection"}, read_from_excel_data(Config,{8,1}))).
  
b4_test(doc) -> [""];
b4_test(suite) -> [];
b4_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Single Element Array 4",read_from_excel_data(Config,{3,1})]),
  test_util:expected(true, test_util:excel_equal({string,"Single Element Array 4"}, read_from_excel_data(Config,{3,1}))).
  
b10_test(doc) -> [""];
b10_test(suite) -> [];
b10_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["Union",read_from_excel_data(Config,{9,1})]),
  test_util:expected(true, test_util:excel_equal({string,"Union"}, read_from_excel_data(Config,{9,1}))).
  
c5_test(doc) -> [""];
c5_test(suite) -> [];
c5_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["={2,1,\"old son\",#NULL!,TRUE,\"\"}",read_from_excel_data(Config,{4,2})]),
  test_util:expected(true, test_util:excel_equal({formula,"={2,1,\"old son\",#NULL!,TRUE,\"\"}"}, read_from_excel_data(Config,{4,2}))).
  
c11_test(doc) -> [""];
c11_test(suite) -> [];
c11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=SUM(D11:E11,F11:G11 E11:I11,{4})",read_from_excel_data(Config,{10,2})]),
  test_util:expected(true, test_util:excel_equal({formula,"=SUM(D11:E11,F11:G11 E11:I11,{4})"}, read_from_excel_data(Config,{10,2}))).
  
c6_test(doc) -> [""];
c6_test(suite) -> [];
c6_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["={33,44,55;66,77,88}",read_from_excel_data(Config,{5,2})]),
  test_util:expected(true, test_util:excel_equal({formula,"={33,44,55;66,77,88}"}, read_from_excel_data(Config,{5,2}))).
  
c1_test(doc) -> [""];
c1_test(suite) -> [];
c1_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["={1}",read_from_excel_data(Config,{0,2})]),
  test_util:expected(true, test_util:excel_equal({formula,"={1}"}, read_from_excel_data(Config,{0,2}))).
  
c12_test(doc) -> [""];
c12_test(suite) -> [];
c12_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["={1}+D12:E12 E12:G12+{2}",read_from_excel_data(Config,{11,2})]),
  test_util:expected(true, test_util:excel_equal({formula,"={1}+D12:E12 E12:G12+{2}"}, read_from_excel_data(Config,{11,2}))).
  
c7_test(doc) -> [""];
c7_test(suite) -> [];
c7_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["={44,55;66,77;88,99}",read_from_excel_data(Config,{6,2})]),
  test_util:expected(true, test_util:excel_equal({formula,"={44,55;66,77;88,99}"}, read_from_excel_data(Config,{6,2}))).
  
c2_test(doc) -> [""];
c2_test(suite) -> [];
c2_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["={\"2\"}",read_from_excel_data(Config,{1,2})]),
  test_util:expected(true, test_util:excel_equal({formula,"={\"2\"}"}, read_from_excel_data(Config,{1,2}))).
  
c8_test(doc) -> [""];
c8_test(suite) -> [];
c8_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=SUM(D8:F8)",read_from_excel_data(Config,{7,2})]),
  test_util:expected(true, test_util:excel_equal({formula,"=SUM(D8:F8)"}, read_from_excel_data(Config,{7,2}))).
  
c3_test(doc) -> [""];
c3_test(suite) -> [];
c3_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["={TRUE}",read_from_excel_data(Config,{2,2})]),
  test_util:expected(true, test_util:excel_equal({formula,"={TRUE}"}, read_from_excel_data(Config,{2,2}))).
  
c9_test(doc) -> [""];
c9_test(suite) -> [];
c9_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=SUM(D9:E9 E9:G9)",read_from_excel_data(Config,{8,2})]),
  test_util:expected(true, test_util:excel_equal({formula,"=SUM(D9:E9 E9:G9)"}, read_from_excel_data(Config,{8,2}))).
  
c4_test(doc) -> [""];
c4_test(suite) -> [];
c4_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["={#NULL!}",read_from_excel_data(Config,{3,2})]),
  test_util:expected(true, test_util:excel_equal({formula,"={#NULL!}"}, read_from_excel_data(Config,{3,2}))).
  
c10_test(doc) -> [""];
c10_test(suite) -> [];
c10_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",["=SUM(D10:E10,F10:G10)",read_from_excel_data(Config,{9,2})]),
  test_util:expected(true, test_util:excel_equal({formula,"=SUM(D10:E10,F10:G10)"}, read_from_excel_data(Config,{9,2}))).
  
d11_test(doc) -> [""];
d11_test(suite) -> [];
d11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[9.0,read_from_excel_data(Config,{10,3})]),
  test_util:expected(true, test_util:excel_equal({number,9.0}, read_from_excel_data(Config,{10,3}))).
  
d12_test(doc) -> [""];
d12_test(suite) -> [];
d12_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[3.0,read_from_excel_data(Config,{11,3})]),
  test_util:expected(true, test_util:excel_equal({number,3.0}, read_from_excel_data(Config,{11,3}))).
  
d8_test(doc) -> [""];
d8_test(suite) -> [];
d8_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[1.0,read_from_excel_data(Config,{7,3})]),
  test_util:expected(true, test_util:excel_equal({number,1.0}, read_from_excel_data(Config,{7,3}))).
  
d9_test(doc) -> [""];
d9_test(suite) -> [];
d9_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[1.0,read_from_excel_data(Config,{8,3})]),
  test_util:expected(true, test_util:excel_equal({number,1.0}, read_from_excel_data(Config,{8,3}))).
  
d10_test(doc) -> [""];
d10_test(suite) -> [];
d10_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[444.0,read_from_excel_data(Config,{9,3})]),
  test_util:expected(true, test_util:excel_equal({number,444.0}, read_from_excel_data(Config,{9,3}))).
  
e11_test(doc) -> [""];
e11_test(suite) -> [];
e11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[8.0,read_from_excel_data(Config,{10,4})]),
  test_util:expected(true, test_util:excel_equal({number,8.0}, read_from_excel_data(Config,{10,4}))).
  
e12_test(doc) -> [""];
e12_test(suite) -> [];
e12_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[4.0,read_from_excel_data(Config,{11,4})]),
  test_util:expected(true, test_util:excel_equal({number,4.0}, read_from_excel_data(Config,{11,4}))).
  
e8_test(doc) -> [""];
e8_test(suite) -> [];
e8_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[2.0,read_from_excel_data(Config,{7,4})]),
  test_util:expected(true, test_util:excel_equal({number,2.0}, read_from_excel_data(Config,{7,4}))).
  
e9_test(doc) -> [""];
e9_test(suite) -> [];
e9_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[555.0,read_from_excel_data(Config,{8,4})]),
  test_util:expected(true, test_util:excel_equal({number,555.0}, read_from_excel_data(Config,{8,4}))).
  
e10_test(doc) -> [""];
e10_test(suite) -> [];
e10_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[555.0,read_from_excel_data(Config,{9,4})]),
  test_util:expected(true, test_util:excel_equal({number,555.0}, read_from_excel_data(Config,{9,4}))).
  
f11_test(doc) -> [""];
f11_test(suite) -> [];
f11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[7.0,read_from_excel_data(Config,{10,5})]),
  test_util:expected(true, test_util:excel_equal({number,7.0}, read_from_excel_data(Config,{10,5}))).
  
f12_test(doc) -> [""];
f12_test(suite) -> [];
f12_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[5.0,read_from_excel_data(Config,{11,5})]),
  test_util:expected(true, test_util:excel_equal({number,5.0}, read_from_excel_data(Config,{11,5}))).
  
f8_test(doc) -> [""];
f8_test(suite) -> [];
f8_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[3.0,read_from_excel_data(Config,{7,5})]),
  test_util:expected(true, test_util:excel_equal({number,3.0}, read_from_excel_data(Config,{7,5}))).
  
f9_test(doc) -> [""];
f9_test(suite) -> [];
f9_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[1.0,read_from_excel_data(Config,{8,5})]),
  test_util:expected(true, test_util:excel_equal({number,1.0}, read_from_excel_data(Config,{8,5}))).
  
f10_test(doc) -> [""];
f10_test(suite) -> [];
f10_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[666.0,read_from_excel_data(Config,{9,5})]),
  test_util:expected(true, test_util:excel_equal({number,666.0}, read_from_excel_data(Config,{9,5}))).
  
g11_test(doc) -> [""];
g11_test(suite) -> [];
g11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[6.0,read_from_excel_data(Config,{10,6})]),
  test_util:expected(true, test_util:excel_equal({number,6.0}, read_from_excel_data(Config,{10,6}))).
  
g12_test(doc) -> [""];
g12_test(suite) -> [];
g12_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[6.0,read_from_excel_data(Config,{11,6})]),
  test_util:expected(true, test_util:excel_equal({number,6.0}, read_from_excel_data(Config,{11,6}))).
  
g9_test(doc) -> [""];
g9_test(suite) -> [];
g9_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[1.0,read_from_excel_data(Config,{8,6})]),
  test_util:expected(true, test_util:excel_equal({number,1.0}, read_from_excel_data(Config,{8,6}))).
  
g10_test(doc) -> [""];
g10_test(suite) -> [];
g10_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[777.0,read_from_excel_data(Config,{9,6})]),
  test_util:expected(true, test_util:excel_equal({number,777.0}, read_from_excel_data(Config,{9,6}))).
  
h11_test(doc) -> [""];
h11_test(suite) -> [];
h11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[5.0,read_from_excel_data(Config,{10,7})]),
  test_util:expected(true, test_util:excel_equal({number,5.0}, read_from_excel_data(Config,{10,7}))).
  
i11_test(doc) -> [""];
i11_test(suite) -> [];
i11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[4.0,read_from_excel_data(Config,{10,8})]),
  test_util:expected(true, test_util:excel_equal({number,4.0}, read_from_excel_data(Config,{10,8}))).
  
all(doc) -> [""];
all(suite) -> 
    [a8_test,
   a9_test,
   b5_test,
   b11_test,
   b6_test,
   b1_test,
   b12_test,
   b7_test,
   b2_test,
   b8_test,
   b3_test,
   b9_test,
   b4_test,
   b10_test,
   c5_test,
   c11_test,
   c6_test,
   c1_test,
   c12_test,
   c7_test,
   c2_test,
   c8_test,
   c3_test,
   c9_test,
   c4_test,
   c10_test,
   d11_test,
   d12_test,
   d8_test,
   d9_test,
   d10_test,
   e11_test,
   e12_test,
   e8_test,
   e9_test,
   e10_test,
   f11_test,
   f12_test,
   f8_test,
   f9_test,
   f10_test,
   g11_test,
   g12_test,
   g9_test,
   g10_test,
   h11_test,
   i11_test
    ].
  
