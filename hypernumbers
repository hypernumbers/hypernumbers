#!/bin/bash

cd `dirname $0`
ROOT=`pwd`

NODE=arrian
HOST=$(hostname)
COOKIE=abc
ETS_TABLES=18000

BOOTFILE=ebin/hypernumbers
SSLBOOT=ebin/start_ssl
CONFIG=var/sys.config

RUN_SSL='-ssl_dist_opt server_certfile "priv/keys/servercert.pem"
-ssl_dist_opt client_certfile "priv/keys/clientcert.pem" 
-ssl_dist_opt keyfile "priv/keys/key.pem" 
-proto_dist inet_ssl'

HN_DIR="lib/hypernumbers-1.0"
MOCHI_DIR="lib/mochiweb"

## Create mnesia and log directories
## and config file if they dont exist
mkdir -p var 
[ -f $CONFIG ] || cp priv/sys.config.default $CONFIG 

if [ priv/sys.config.default -nt $CONFIG ] 
then 
    echo -e "\n***WARNING*** Default Config File has been updated\n"
fi

function build
{
    if [ $# -lt 1 ] 
    then
        echo "==============================="
        echo "      Compiling DEPTS          "
        echo "==============================="
        mkdir -p ./lib/mochiweb/ebin
        cd ./lib/mochiweb/
        make
        cd ../../
        cd ./lib/gettext/
        make
        cd ../../
        echo "==============================="
        echo "      Compiling Starling       "
        echo "==============================="
        cd ./lib/starling/
        rake
        cd ../../
        echo "==============================="
        echo " Generating Lexers And Parsers "
        echo "==============================="
        cd ./lib/formula_engine-1.0/priv/
        ./generate.escript
        cd ../../..
    fi

    echo "==============================="
    echo "       Compiling Compiler      "
    echo "==============================="
    erlc -o ebin src/compile_code.erl
    echo "==============================="
    echo "      Generating ms_util       "
    echo "==============================="
    erlc -o $HN_DIR/ebin +debug_info -I $HN_DIR/include priv/ms_util/make_ms_util.erl
    erl -pa $HN_DIR/ebin -noshell -s make_ms_util make -s init stop
    mv ms_util2.erl $HN_DIR/src
    echo "==============================="
    echo "            Compiling          "
    echo "==============================="
    cd ebin
    erl -pa ebin -noshell -s compile_code -s init stop
}

function start 
{
    NAME=$1
    DETACHED=$2
    DEVELOPMENT=$3
    RELOAD=$4
    SSL=$5

    erl -name $NAME@$HOST \
        -setcookie $COOKIE \
        -config $CONFIG \
        -boot $BOOTFILE \
        $DETACHED \
        $SSL \
        -env ERL_MAX_ETS_TABLES $ETS_TABLES \
        -hypernumbers environment $DEVELOPMENT \
        $RELOAD
}
    
function visualise
{
    cd ./priv/test_visualiser/
    ruby visualise_tests.rb
    cd ../../
}

function statsvn
{
    svn log -v --xml > ./logs/statsvn/svn.log
    cd ./logs/statsvn
    java -Xms512m -Xmx1024m -jar ../../priv/statsvn/statsvn.jar \
         ./svn.log ../../\
         -exclude tests/**:lib/eunit/**:lib/yaws-1.76/**:lib/mochi-1.0/**:**/*.java:**/*.jar:testroot/**
}

function debug
{
    erl -name debug-$(date +%s)@$HOST \
        -setcookie $COOKIE \
        -remsh $NODE@$HOST
}

function debug_remote
{
    if [ "$1" == "" ]
    then
        echo "Need a remote target"
        exit 1
    fi

    erl -name debug-$(date +%s) \
        -boot $SSLBOOT \
        -hidden \
        $RUN_SSL \
        -setcookie $COOKIE \
        -remsh $1
}


function stop
{
    erl -detached \
        -name $1-ctrl@$HOST \
        -setcookie $COOKIE \
        -eval "rpc:call('$1@$HOST',init,stop,[])" \
        -s init stop
}

function stop_remote
{
    if [ "$1" == "" ]
    then
        echo "Need a remote target"
        exit 1
    fi

    erl -detached \
        -name debug-$(date +%s) \
        -boot $SSLBOOT \
        $RUN_SSL \
        -hidden \
        -setcookie $COOKIE \
        -eval "rpc:call($1,init,stop,[])" \
        -s init stop
}

function mergemod
{
    cd lib/sitemods/priv/$1/docroot
    DEST=$ROOT/lib/sitemods/priv/$2/docroot
    find . \( ! -regex '.*/\..*' \) -print | cpio -dump  $DEST
}


COMMAND=$1
shift

case $COMMAND in 

    #eugh, would prefer the parsing done elsewhere
    start) 
        
        SSL=""
        DETACHED=""
        DEVELOPMENT="development"
        RELOAD="-run reloader start"
        
        while [ "$1" != "" ]; do
            case $1 in
                -node ) 
                    shift
                    NODE=$1
                    ;;
                -detached ) 
                    DETACHED="-detached"
                    ;;
                -production ) 
                    DEVELOPMENT="production"
                    RELOAD=""
                    SSL=$RUN_SSL
                    ;;
                * )
                    echo "Invalid parameters $1"
                    exit 1
            esac
            shift
        done

        start "$NODE" "$DETACHED" "$DEVELOPMENT" "$RELOAD" "$SSL";;

    debug)            debug;;
    debug_remote)     debug_remote $1;;
    stop)             stop $1;;
    stop_remote)      stop_remote $1;;
    build)            build $1;;
    mergemod)         mergemod $1 $2;;
    statsvn)          statsvn;;
    visualise)        visualise;;
    *)                echo "invalid parameters passed into hypernumbers script";;
esac