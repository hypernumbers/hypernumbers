% This module has been generated by gen_rev_comp_test.rb
% DO NOT EDIT MANUALLY.
%
% Source file: e_gnumeric_operators.xls
% Generated on: Mon May 05 12:34:59 +0100 2008

-module(e_gnumeric_operators_test_SUITE).
-compile(export_all).
-include("ct.hrl").


init_per_suite(Config) ->
    code:add_patha("../../../../../ebin"),
    production_boot:setup_paths(),
    Data = test_util:read_excel_file("../../../../excel_files/Win_Excel07_As_97/e_gnumeric_operators.xls"),
    %% io:format("in init_per_suite Data is ~p~n",[Data]),
    Pid=spawn(test_util,test_state,[Data]),
    io:format("in init_per_suite Pid is ~p~n",[Pid]),
    [{?MODULE,Pid}|Config].
  
end_per_suite(_Config) ->
    ok.
  
init_per_testcase(_TestCase, Config) -> Config.

end_per_testcase(_TestCase, _Config) -> ok.

read_from_excel_data(Config,{Sheet,Row,Col}) ->
  test_util:read_from_excel_data(Config,e_gnumeric_operators_test_SUITE,{Sheet,Row,Col}).

sheet1_A1(doc) -> [{userdata,[{""}]}];
sheet1_A1(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Result",0,0}]),
  Pid ! {msg,self(),?MODULE,{"Result",0,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"EQUAL"}]),
      test_util:expected2(Msg, {string,"EQUAL"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_C1(doc) -> [{userdata,[{""}]}];
sheet1_C1(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Result",0,2}]),
  Pid ! {msg,self(),?MODULE,{"Result",0,2}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"Success"}]),
      test_util:expected2(Msg, {string,"Success"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_A2(doc) -> [{userdata,[{""}]}];
sheet1_A2(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Result",1,0}]),
  Pid ! {msg,self(),?MODULE,{"Result",1,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"GT"}]),
      test_util:expected2(Msg, {string,"GT"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_C2(doc) -> [{userdata,[{""}]}];
sheet1_C2(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Result",1,2}]),
  Pid ! {msg,self(),?MODULE,{"Result",1,2}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"Success"}]),
      test_util:expected2(Msg, {string,"Success"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_A3(doc) -> [{userdata,[{""}]}];
sheet1_A3(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Result",2,0}]),
  Pid ! {msg,self(),?MODULE,{"Result",2,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"LT"}]),
      test_util:expected2(Msg, {string,"LT"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_C3(doc) -> [{userdata,[{""}]}];
sheet1_C3(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Result",2,2}]),
  Pid ! {msg,self(),?MODULE,{"Result",2,2}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"Success"}]),
      test_util:expected2(Msg, {string,"Success"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_A4(doc) -> [{userdata,[{""}]}];
sheet1_A4(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Result",3,0}]),
  Pid ! {msg,self(),?MODULE,{"Result",3,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"GTE"}]),
      test_util:expected2(Msg, {string,"GTE"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_C4(doc) -> [{userdata,[{""}]}];
sheet1_C4(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Result",3,2}]),
  Pid ! {msg,self(),?MODULE,{"Result",3,2}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"Success"}]),
      test_util:expected2(Msg, {string,"Success"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_A5(doc) -> [{userdata,[{""}]}];
sheet1_A5(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Result",4,0}]),
  Pid ! {msg,self(),?MODULE,{"Result",4,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"LTE"}]),
      test_util:expected2(Msg, {string,"LTE"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_C5(doc) -> [{userdata,[{""}]}];
sheet1_C5(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Result",4,2}]),
  Pid ! {msg,self(),?MODULE,{"Result",4,2}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"Success"}]),
      test_util:expected2(Msg, {string,"Success"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_A6(doc) -> [{userdata,[{""}]}];
sheet1_A6(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Result",5,0}]),
  Pid ! {msg,self(),?MODULE,{"Result",5,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"NOT_EQUAL"}]),
      test_util:expected2(Msg, {string,"NOT_EQUAL"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_C6(doc) -> [{userdata,[{""}]}];
sheet1_C6(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Result",5,2}]),
  Pid ! {msg,self(),?MODULE,{"Result",5,2}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"Success"}]),
      test_util:expected2(Msg, {string,"Success"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_A7(doc) -> [{userdata,[{""}]}];
sheet1_A7(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Result",6,0}]),
  Pid ! {msg,self(),?MODULE,{"Result",6,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"ADD"}]),
      test_util:expected2(Msg, {string,"ADD"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_C7(doc) -> [{userdata,[{""}]}];
sheet1_C7(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Result",6,2}]),
  Pid ! {msg,self(),?MODULE,{"Result",6,2}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"Success"}]),
      test_util:expected2(Msg, {string,"Success"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_A8(doc) -> [{userdata,[{""}]}];
sheet1_A8(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Result",7,0}]),
  Pid ! {msg,self(),?MODULE,{"Result",7,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"SUB"}]),
      test_util:expected2(Msg, {string,"SUB"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_C8(doc) -> [{userdata,[{""}]}];
sheet1_C8(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Result",7,2}]),
  Pid ! {msg,self(),?MODULE,{"Result",7,2}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"Success"}]),
      test_util:expected2(Msg, {string,"Success"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_A9(doc) -> [{userdata,[{""}]}];
sheet1_A9(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Result",8,0}]),
  Pid ! {msg,self(),?MODULE,{"Result",8,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"MULT"}]),
      test_util:expected2(Msg, {string,"MULT"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_C9(doc) -> [{userdata,[{""}]}];
sheet1_C9(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Result",8,2}]),
  Pid ! {msg,self(),?MODULE,{"Result",8,2}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"Success"}]),
      test_util:expected2(Msg, {string,"Success"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_A10(doc) -> [{userdata,[{""}]}];
sheet1_A10(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Result",9,0}]),
  Pid ! {msg,self(),?MODULE,{"Result",9,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"DIV"}]),
      test_util:expected2(Msg, {string,"DIV"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_C10(doc) -> [{userdata,[{""}]}];
sheet1_C10(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Result",9,2}]),
  Pid ! {msg,self(),?MODULE,{"Result",9,2}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"Success"}]),
      test_util:expected2(Msg, {string,"Success"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_A11(doc) -> [{userdata,[{""}]}];
sheet1_A11(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Result",10,0}]),
  Pid ! {msg,self(),?MODULE,{"Result",10,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"EXP"}]),
      test_util:expected2(Msg, {string,"EXP"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_C11(doc) -> [{userdata,[{""}]}];
sheet1_C11(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Result",10,2}]),
  Pid ! {msg,self(),?MODULE,{"Result",10,2}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"Success"}]),
      test_util:expected2(Msg, {string,"Success"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_A12(doc) -> [{userdata,[{""}]}];
sheet1_A12(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Result",11,0}]),
  Pid ! {msg,self(),?MODULE,{"Result",11,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"CONCAT"}]),
      test_util:expected2(Msg, {string,"CONCAT"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_C12(doc) -> [{userdata,[{""}]}];
sheet1_C12(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Result",11,2}]),
  Pid ! {msg,self(),?MODULE,{"Result",11,2}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"Success"}]),
      test_util:expected2(Msg, {string,"Success"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_A16(doc) -> [{userdata,[{""}]}];
sheet1_A16(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Result",15,0}]),
  Pid ! {msg,self(),?MODULE,{"Result",15,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"Epsilon :"}]),
      test_util:expected2(Msg, {string,"Epsilon :"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_B16(doc) -> [{userdata,[{""}]}];
sheet1_B16(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Result",15,1}]),
  Pid ! {msg,self(),?MODULE,{"Result",15,1}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{number,1.0e-06}]),
      test_util:expected2(Msg, {number,1.0e-06})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
all() -> 
    [sheet1_A1,
   sheet1_C1,
   sheet1_A2,
   sheet1_C2,
   sheet1_A3,
   sheet1_C3,
   sheet1_A4,
   sheet1_C4,
   sheet1_A5,
   sheet1_C5,
   sheet1_A6,
   sheet1_C6,
   sheet1_A7,
   sheet1_C7,
   sheet1_A8,
   sheet1_C8,
   sheet1_A9,
   sheet1_C9,
   sheet1_A10,
   sheet1_C10,
   sheet1_A11,
   sheet1_C11,
   sheet1_A12,
   sheet1_C12,
   sheet1_A16,
   sheet1_B16
    ].
  
