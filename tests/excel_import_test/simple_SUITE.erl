% This module has been generated by generatetest.rb
% DO NOT EDIT MANUALLY.
%
% Source file: simple.xls
% Generated on: Sat Jan 26 01:08:37 +0000 2008

-module(simple_SUITE).
-compile(export_all).
-include("ct.hrl").


init_per_suite(Config) ->
    code:add_patha("../../../../../ebin"),
    production_boot:setup_paths(),
    Data = test_util:read_excel_file("/Win Excel 2007 (as 97)/simple.xls"),
    %% io:format("in init_per_suite Data is ~p~n",[Data]),
    lists:merge([Config, [{simple_SUITE, Data}]]).
  
end_per_suite(_Config) ->
    ok.
  
init_per_testcase(_TestCase, Config) -> Config.

end_per_testcase(_TestCase, _Config) -> ok.

read_from_excel_data(Config, {Row,Col}) ->
    {value, Result} = lists:keysearch(simple_SUITE, 1, Config),
    Data = element(2, Result),
    Key={{row_index,Row},{col_index,Col}},
    {value, Result2} = lists:keysearch(Key, 1, Data),
    El=element(2, Result2),
    %% io:format("El is ~p~n",[El]),
    case El of
        {value, number, Number} -> {number,Number};
        {string,String}         -> {string,String};
        {formula,Formula}       -> {formula,Formula};
        {value,boolean,Boolean} -> {boolean,Boolean};
        {value,error,Error}     -> {error, Error};
        Other                   -> io:format("(in generatetest.rb - fix me Other is ~p~n",[Other])
    end.

a1_test(doc) -> [{userdata,[{""}]}];
a1_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{string,"This is a simple introductory test"},read_from_excel_data(Config,{0,0})]),
  test_util:expected2(read_from_excel_data(Config,{0,0}), {string,"This is a simple introductory test"}).
  
a2_test(doc) -> [{userdata,[{""}]}];
a2_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{string,"Integer"},read_from_excel_data(Config,{1,0})]),
  test_util:expected2(read_from_excel_data(Config,{1,0}), {string,"Integer"}).
  
a3_test(doc) -> [{userdata,[{""}]}];
a3_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{string,"Float"},read_from_excel_data(Config,{2,0})]),
  test_util:expected2(read_from_excel_data(Config,{2,0}), {string,"Float"}).
  
b2_test(doc) -> [{userdata,[{""}]}];
b2_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{number,1.0},read_from_excel_data(Config,{1,1})]),
  test_util:expected2(read_from_excel_data(Config,{1,1}), {number,1.0}).
  
b3_test(doc) -> [{userdata,[{""}]}];
b3_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{number,1.2},read_from_excel_data(Config,{2,1})]),
  test_util:expected2(read_from_excel_data(Config,{2,1}), {number,1.2}).
  
all() -> 
    [a1_test,
   a2_test,
   a3_test,
   b2_test,
   b3_test
    ].
  
