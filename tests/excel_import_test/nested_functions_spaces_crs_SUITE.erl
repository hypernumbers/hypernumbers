% This module has been generated by generatetest.rb
% DO NOT EDIT MANUALLY.
%
% Source file: nested_functions_spaces_crs.xls
% Generated on: Sat Jan 26 01:08:44 +0000 2008

-module(nested_functions_spaces_crs_SUITE).
-compile(export_all).
-include("ct.hrl").


init_per_suite(Config) ->
    code:add_patha("../../../../../ebin"),
    production_boot:setup_paths(),
    Data = test_util:read_excel_file("/Win Excel 2007 (as 97)/nested_functions_spaces_crs.xls"),
    %% io:format("in init_per_suite Data is ~p~n",[Data]),
    lists:merge([Config, [{nested_functions_spaces_crs_SUITE, Data}]]).
  
end_per_suite(_Config) ->
    ok.
  
init_per_testcase(_TestCase, Config) -> Config.

end_per_testcase(_TestCase, _Config) -> ok.

read_from_excel_data(Config, {Row,Col}) ->
    {value, Result} = lists:keysearch(nested_functions_spaces_crs_SUITE, 1, Config),
    Data = element(2, Result),
    Key={{row_index,Row},{col_index,Col}},
    {value, Result2} = lists:keysearch(Key, 1, Data),
    El=element(2, Result2),
    %% io:format("El is ~p~n",[El]),
    case El of
        {value, number, Number} -> {number,Number};
        {string,String}         -> {string,String};
        {formula,Formula}       -> {formula,Formula};
        {value,boolean,Boolean} -> {boolean,Boolean};
        {value,error,Error}     -> {error, Error};
        Other                   -> io:format("(in generatetest.rb - fix me Other is ~p~n",[Other])
    end.

a16_test(doc) -> [{userdata,[{""}]}];
a16_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{string,"Multiply nested functions, spaces and CR"},read_from_excel_data(Config,{15,0})]),
  test_util:expected2(read_from_excel_data(Config,{15,0}), {string,"Multiply nested functions, spaces and CR"}).
  
a11_test(doc) -> [{userdata,[{""}]}];
a11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{string,"Single nested functions and spaces"},read_from_excel_data(Config,{10,0})]),
  test_util:expected2(read_from_excel_data(Config,{10,0}), {string,"Single nested functions and spaces"}).
  
a6_test(doc) -> [{userdata,[{""}]}];
a6_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{string,"Argument with operators"},read_from_excel_data(Config,{5,0})]),
  test_util:expected2(read_from_excel_data(Config,{5,0}), {string,"Argument with operators"}).
  
a1_test(doc) -> [{userdata,[{""}]}];
a1_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{string,"This spreadsheet test nested function calls, spaces and formula formatting"},read_from_excel_data(Config,{0,0})]),
  test_util:expected2(read_from_excel_data(Config,{0,0}), {string,"This spreadsheet test nested function calls, spaces and formula formatting"}).
  
a12_test(doc) -> [{userdata,[{""}]}];
a12_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{string,"Single nested functions, spaces and CR"},read_from_excel_data(Config,{11,0})]),
  test_util:expected2(read_from_excel_data(Config,{11,0}), {string,"Single nested functions, spaces and CR"}).
  
a7_test(doc) -> [{userdata,[{""}]}];
a7_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{string,"Argument with operators and spaces"},read_from_excel_data(Config,{6,0})]),
  test_util:expected2(read_from_excel_data(Config,{6,0}), {string,"Argument with operators and spaces"}).
  
a2_test(doc) -> [{userdata,[{""}]}];
a2_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{string,"Argument with operators"},read_from_excel_data(Config,{1,0})]),
  test_util:expected2(read_from_excel_data(Config,{1,0}), {string,"Argument with operators"}).
  
a8_test(doc) -> [{userdata,[{""}]}];
a8_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{string,"Argument with operators, spaces and CR"},read_from_excel_data(Config,{7,0})]),
  test_util:expected2(read_from_excel_data(Config,{7,0}), {string,"Argument with operators, spaces and CR"}).
  
a3_test(doc) -> [{userdata,[{""}]}];
a3_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{string,"Argument with operators and spaces"},read_from_excel_data(Config,{2,0})]),
  test_util:expected2(read_from_excel_data(Config,{2,0}), {string,"Argument with operators and spaces"}).
  
a14_test(doc) -> [{userdata,[{""}]}];
a14_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{string,"Multiply nested functions"},read_from_excel_data(Config,{13,0})]),
  test_util:expected2(read_from_excel_data(Config,{13,0}), {string,"Multiply nested functions"}).
  
a4_test(doc) -> [{userdata,[{""}]}];
a4_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{string,"Argument with operators, spaces and CR"},read_from_excel_data(Config,{3,0})]),
  test_util:expected2(read_from_excel_data(Config,{3,0}), {string,"Argument with operators, spaces and CR"}).
  
a15_test(doc) -> [{userdata,[{""}]}];
a15_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{string,"Multiply nested functions and spaces"},read_from_excel_data(Config,{14,0})]),
  test_util:expected2(read_from_excel_data(Config,{14,0}), {string,"Multiply nested functions and spaces"}).
  
a10_test(doc) -> [{userdata,[{""}]}];
a10_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{string,"Single nested functions"},read_from_excel_data(Config,{9,0})]),
  test_util:expected2(read_from_excel_data(Config,{9,0}), {string,"Single nested functions"}).
  
b16_test(doc) -> [{userdata,[{""}]}];
b16_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{formula,"=SUM(   SUM(    SUM(5,
6, 7)+
5-SUM(
3 ),
4 )-
SUM( 4,
5)   )"},read_from_excel_data(Config,{15,1})]),
  test_util:expected2(read_from_excel_data(Config,{15,1}), {formula,"=SUM(   SUM(    SUM(5,
6, 7)+
5-SUM(
3 ),
4 )-
SUM( 4,
5)   )"}).
  
b11_test(doc) -> [{userdata,[{""}]}];
b11_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{formula,"=SUM(   SUM(   3,  4  )  -    SUM(   4,  5  )  )"},read_from_excel_data(Config,{10,1})]),
  test_util:expected2(read_from_excel_data(Config,{10,1}), {formula,"=SUM(   SUM(   3,  4  )  -    SUM(   4,  5  )  )"}).
  
b6_test(doc) -> [{userdata,[{""}]}];
b6_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{formula,"=SUM(1+2,(3*5+4))"},read_from_excel_data(Config,{5,1})]),
  test_util:expected2(read_from_excel_data(Config,{5,1}), {formula,"=SUM(1+2,(3*5+4))"}).
  
b12_test(doc) -> [{userdata,[{""}]}];
b12_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{formula,"=SUM(   SUM(   3,  4  )  -
SUM(   4,  5  )  )"},read_from_excel_data(Config,{11,1})]),
  test_util:expected2(read_from_excel_data(Config,{11,1}), {formula,"=SUM(   SUM(   3,  4  )  -
SUM(   4,  5  )  )"}).
  
b7_test(doc) -> [{userdata,[{""}]}];
b7_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{formula,"= SUM(1 + 2, ( 3    *  5  +  4  )   )"},read_from_excel_data(Config,{6,1})]),
  test_util:expected2(read_from_excel_data(Config,{6,1}), {formula,"= SUM(1 + 2, ( 3    *  5  +  4  )   )"}).
  
b2_test(doc) -> [{userdata,[{""}]}];
b2_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{formula,"=SUM(1+2)"},read_from_excel_data(Config,{1,1})]),
  test_util:expected2(read_from_excel_data(Config,{1,1}), {formula,"=SUM(1+2)"}).
  
b8_test(doc) -> [{userdata,[{""}]}];
b8_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{formula,"= SUM(1 + 2, ( 3    *
5  +  4  )   )"},read_from_excel_data(Config,{7,1})]),
  test_util:expected2(read_from_excel_data(Config,{7,1}), {formula,"= SUM(1 + 2, ( 3    *
5  +  4  )   )"}).
  
b3_test(doc) -> [{userdata,[{""}]}];
b3_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{formula,"= SUM(  1 +2 )"},read_from_excel_data(Config,{2,1})]),
  test_util:expected2(read_from_excel_data(Config,{2,1}), {formula,"= SUM(  1 +2 )"}).
  
b14_test(doc) -> [{userdata,[{""}]}];
b14_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{formula,"=SUM(SUM(SUM(5,6,7)+5-SUM(3),4)-SUM(4,5))"},read_from_excel_data(Config,{13,1})]),
  test_util:expected2(read_from_excel_data(Config,{13,1}), {formula,"=SUM(SUM(SUM(5,6,7)+5-SUM(3),4)-SUM(4,5))"}).
  
b4_test(doc) -> [{userdata,[{""}]}];
b4_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{formula,"= SUM(  1
+2 )"},read_from_excel_data(Config,{3,1})]),
  test_util:expected2(read_from_excel_data(Config,{3,1}), {formula,"= SUM(  1
+2 )"}).
  
b15_test(doc) -> [{userdata,[{""}]}];
b15_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{formula,"=SUM(   SUM(    SUM(5,  6, 7)+  5-SUM(  3 ),  4 )-  SUM( 4,5)   )"},read_from_excel_data(Config,{14,1})]),
  test_util:expected2(read_from_excel_data(Config,{14,1}), {formula,"=SUM(   SUM(    SUM(5,  6, 7)+  5-SUM(  3 ),  4 )-  SUM( 4,5)   )"}).
  
b10_test(doc) -> [{userdata,[{""}]}];
b10_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{formula,"=SUM(SUM(3,4)-SUM(4,5))"},read_from_excel_data(Config,{9,1})]),
  test_util:expected2(read_from_excel_data(Config,{9,1}), {formula,"=SUM(SUM(3,4)-SUM(4,5))"}).
  
all() -> 
    [a16_test,
   a11_test,
   a6_test,
   a1_test,
   a12_test,
   a7_test,
   a2_test,
   a8_test,
   a3_test,
   a14_test,
   a4_test,
   a15_test,
   a10_test,
   b16_test,
   b11_test,
   b6_test,
   b12_test,
   b7_test,
   b2_test,
   b8_test,
   b3_test,
   b14_test,
   b4_test,
   b15_test,
   b10_test
    ].
  
