% This module has been generated by gen_rev_comp_test.rb
% DO NOT EDIT MANUALLY.
%
% Source file: b_three_dee_ref.xls
% Generated on: Mon May 05 12:34:30 +0100 2008

-module(b_three_dee_ref_test_SUITE).
-compile(export_all).
-include("ct.hrl").


init_per_suite(Config) ->
    code:add_patha("../../../../../ebin"),
    production_boot:setup_paths(),
    Data = test_util:read_excel_file("../../../../excel_files/Win_Excel07_As_97/b_three_dee_ref.xls"),
    %% io:format("in init_per_suite Data is ~p~n",[Data]),
    Pid=spawn(test_util,test_state,[Data]),
    io:format("in init_per_suite Pid is ~p~n",[Pid]),
    [{?MODULE,Pid}|Config].
  
end_per_suite(_Config) ->
    ok.
  
init_per_testcase(_TestCase, Config) -> Config.

end_per_testcase(_TestCase, _Config) -> ok.

read_from_excel_data(Config,{Sheet,Row,Col}) ->
  test_util:read_from_excel_data(Config,b_three_dee_ref_test_SUITE,{Sheet,Row,Col}).

sheet1_A1(doc) -> [{userdata,[{""}]}];
sheet1_A1(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Tom",0,0}]),
  Pid ! {msg,self(),?MODULE,{"Tom",0,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"This Spreadsheet tests 3D references"}]),
      test_util:expected2(Msg, {string,"This Spreadsheet tests 3D references"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_A2(doc) -> [{userdata,[{""}]}];
sheet1_A2(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Tom",1,0}]),
  Pid ! {msg,self(),?MODULE,{"Tom",1,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"Simple Ref"}]),
      test_util:expected2(Msg, {string,"Simple Ref"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_B2(doc) -> [{userdata,[{""}]}];
sheet1_B2(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Tom",1,1}]),
  Pid ! {msg,self(),?MODULE,{"Tom",1,1}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{number,444.0}]),
      test_util:expected2(Msg, {number,444.0})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_A3(doc) -> [{userdata,[{""}]}];
sheet1_A3(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Tom",2,0}]),
  Pid ! {msg,self(),?MODULE,{"Tom",2,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"Simple Range"}]),
      test_util:expected2(Msg, {string,"Simple Range"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_B3(doc) -> [{userdata,[{""}]}];
sheet1_B3(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Tom",2,1}]),
  Pid ! {msg,self(),?MODULE,{"Tom",2,1}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{number,10.0}]),
      test_util:expected2(Msg, {number,10.0})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_A4(doc) -> [{userdata,[{""}]}];
sheet1_A4(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Tom",3,0}]),
  Pid ! {msg,self(),?MODULE,{"Tom",3,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"3D Range"}]),
      test_util:expected2(Msg, {string,"3D Range"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_B4(doc) -> [{userdata,[{""}]}];
sheet1_B4(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Tom",3,1}]),
  Pid ! {msg,self(),?MODULE,{"Tom",3,1}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{number,999.0}]),
      test_util:expected2(Msg, {number,999.0})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_A6(doc) -> [{userdata,[{""}]}];
sheet1_A6(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Tom",5,0}]),
  Pid ! {msg,self(),?MODULE,{"Tom",5,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"And now some errors - the sheet bob has been deleted"}]),
      test_util:expected2(Msg, {string,"And now some errors - the sheet bob has been deleted"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_A7(doc) -> [{userdata,[{""}]}];
sheet1_A7(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Tom",6,0}]),
  Pid ! {msg,self(),?MODULE,{"Tom",6,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"Simple Ref"}]),
      test_util:expected2(Msg, {string,"Simple Ref"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_B7(doc) -> [{userdata,[{""}]}];
sheet1_B7(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Tom",6,1}]),
  Pid ! {msg,self(),?MODULE,{"Tom",6,1}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{number,-2146826265}]),
      test_util:expected2(Msg, {number,-2146826265})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_A8(doc) -> [{userdata,[{""}]}];
sheet1_A8(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Tom",7,0}]),
  Pid ! {msg,self(),?MODULE,{"Tom",7,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"Simple Range"}]),
      test_util:expected2(Msg, {string,"Simple Range"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_B8(doc) -> [{userdata,[{""}]}];
sheet1_B8(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Tom",7,1}]),
  Pid ! {msg,self(),?MODULE,{"Tom",7,1}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{number,-2146826265}]),
      test_util:expected2(Msg, {number,-2146826265})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet2_A1(doc) -> [{userdata,[{""}]}];
sheet2_A1(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Dick",0,0}]),
  Pid ! {msg,self(),?MODULE,{"Dick",0,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{number,444.0}]),
      test_util:expected2(Msg, {number,444.0})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet2_A2(doc) -> [{userdata,[{""}]}];
sheet2_A2(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Dick",1,0}]),
  Pid ! {msg,self(),?MODULE,{"Dick",1,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{number,1.0}]),
      test_util:expected2(Msg, {number,1.0})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet2_B2(doc) -> [{userdata,[{""}]}];
sheet2_B2(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Dick",1,1}]),
  Pid ! {msg,self(),?MODULE,{"Dick",1,1}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{number,2.0}]),
      test_util:expected2(Msg, {number,2.0})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet2_C2(doc) -> [{userdata,[{""}]}];
sheet2_C2(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Dick",1,2}]),
  Pid ! {msg,self(),?MODULE,{"Dick",1,2}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{number,3.0}]),
      test_util:expected2(Msg, {number,3.0})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet2_D2(doc) -> [{userdata,[{""}]}];
sheet2_D2(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Dick",1,3}]),
  Pid ! {msg,self(),?MODULE,{"Dick",1,3}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{number,4.0}]),
      test_util:expected2(Msg, {number,4.0})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet3_A1(doc) -> [{userdata,[{""}]}];
sheet3_A1(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Harry",0,0}]),
  Pid ! {msg,self(),?MODULE,{"Harry",0,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{number,555.0}]),
      test_util:expected2(Msg, {number,555.0})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
all() -> 
    [sheet1_A1,
   sheet1_A2,
   sheet1_B2,
   sheet1_A3,
   sheet1_B3,
   sheet1_A4,
   sheet1_B4,
   sheet1_A6,
   sheet1_A7,
   sheet1_B7,
   sheet1_A8,
   sheet1_B8,
   sheet2_A1,
   sheet2_A2,
   sheet2_B2,
   sheet2_C2,
   sheet2_D2,
   sheet3_A1
    ].
  
