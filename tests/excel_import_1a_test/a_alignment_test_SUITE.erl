% This module has been generated by gen_rev_comp_test.rb
% DO NOT EDIT MANUALLY.
%
% Source file: a_alignment.xls
% Generated on: Mon May 05 12:34:25 +0100 2008

-module(a_alignment_test_SUITE).
-compile(export_all).
-include("ct.hrl").


init_per_suite(Config) ->
    code:add_patha("../../../../../ebin"),
    production_boot:setup_paths(),
    Data = test_util:read_excel_file("../../../../excel_files/Win_Excel07_As_97/a_alignment.xls"),
    %% io:format("in init_per_suite Data is ~p~n",[Data]),
    Pid=spawn(test_util,test_state,[Data]),
    io:format("in init_per_suite Pid is ~p~n",[Pid]),
    [{?MODULE,Pid}|Config].
  
end_per_suite(_Config) ->
    ok.
  
init_per_testcase(_TestCase, Config) -> Config.

end_per_testcase(_TestCase, _Config) -> ok.

read_from_excel_data(Config,{Sheet,Row,Col}) ->
  test_util:read_from_excel_data(Config,a_alignment_test_SUITE,{Sheet,Row,Col}).

sheet1_A1(doc) -> [{userdata,[{""}]}];
sheet1_A1(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Sheet1",0,0}]),
  Pid ! {msg,self(),?MODULE,{"Sheet1",0,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"This tests that the various test generated have got their columns and rows right with all fence post errors fixed for good measure"}]),
      test_util:expected2(Msg, {string,"This tests that the various test generated have got their columns and rows right with all fence post errors fixed for good measure"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_A2(doc) -> [{userdata,[{""}]}];
sheet1_A2(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Sheet1",1,0}]),
  Pid ! {msg,self(),?MODULE,{"Sheet1",1,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"This is a cell A2 on Sheet1"}]),
      test_util:expected2(Msg, {string,"This is a cell A2 on Sheet1"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_B2(doc) -> [{userdata,[{""}]}];
sheet1_B2(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Sheet1",1,1}]),
  Pid ! {msg,self(),?MODULE,{"Sheet1",1,1}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"This is cell B2 on Sheet1"}]),
      test_util:expected2(Msg, {string,"This is cell B2 on Sheet1"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_A3(doc) -> [{userdata,[{""}]}];
sheet1_A3(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Sheet1",2,0}]),
  Pid ! {msg,self(),?MODULE,{"Sheet1",2,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"This is cell A3 on Sheet1"}]),
      test_util:expected2(Msg, {string,"This is cell A3 on Sheet1"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_B3(doc) -> [{userdata,[{""}]}];
sheet1_B3(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Sheet1",2,1}]),
  Pid ! {msg,self(),?MODULE,{"Sheet1",2,1}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"This is cell B3 on Sheet1"}]),
      test_util:expected2(Msg, {string,"This is cell B3 on Sheet1"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_B4(doc) -> [{userdata,[{""}]}];
sheet1_B4(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Sheet1",3,1}]),
  Pid ! {msg,self(),?MODULE,{"Sheet1",3,1}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"This is cell B4 on Sheet1"}]),
      test_util:expected2(Msg, {string,"This is cell B4 on Sheet1"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_D6(doc) -> [{userdata,[{""}]}];
sheet1_D6(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Sheet1",5,3}]),
  Pid ! {msg,self(),?MODULE,{"Sheet1",5,3}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"This is cell D6 on Sheet1"}]),
      test_util:expected2(Msg, {string,"This is cell D6 on Sheet1"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet1_H12(doc) -> [{userdata,[{""}]}];
sheet1_H12(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Sheet1",11,7}]),
  Pid ! {msg,self(),?MODULE,{"Sheet1",11,7}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"This is cell H12 on Sheet1"}]),
      test_util:expected2(Msg, {string,"This is cell H12 on Sheet1"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet2_A1(doc) -> [{userdata,[{""}]}];
sheet2_A1(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Sheet2",0,0}]),
  Pid ! {msg,self(),?MODULE,{"Sheet2",0,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"This tests that the various test generates have got their columns and rows right with all fence post errors fixed for good measure"}]),
      test_util:expected2(Msg, {string,"This tests that the various test generates have got their columns and rows right with all fence post errors fixed for good measure"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet2_A2(doc) -> [{userdata,[{""}]}];
sheet2_A2(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Sheet2",1,0}]),
  Pid ! {msg,self(),?MODULE,{"Sheet2",1,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"This is a cell A2 on Sheet2"}]),
      test_util:expected2(Msg, {string,"This is a cell A2 on Sheet2"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet2_B2(doc) -> [{userdata,[{""}]}];
sheet2_B2(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Sheet2",1,1}]),
  Pid ! {msg,self(),?MODULE,{"Sheet2",1,1}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"This is cell B2 on Sheet2"}]),
      test_util:expected2(Msg, {string,"This is cell B2 on Sheet2"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet2_A3(doc) -> [{userdata,[{""}]}];
sheet2_A3(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Sheet2",2,0}]),
  Pid ! {msg,self(),?MODULE,{"Sheet2",2,0}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"This is cell A3 on Sheet2"}]),
      test_util:expected2(Msg, {string,"This is cell A3 on Sheet2"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet2_B3(doc) -> [{userdata,[{""}]}];
sheet2_B3(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Sheet2",2,1}]),
  Pid ! {msg,self(),?MODULE,{"Sheet2",2,1}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"This is cell B3 on Sheet2"}]),
      test_util:expected2(Msg, {string,"This is cell B3 on Sheet2"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet2_B4(doc) -> [{userdata,[{""}]}];
sheet2_B4(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Sheet2",3,1}]),
  Pid ! {msg,self(),?MODULE,{"Sheet2",3,1}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"This is cell B4 on Sheet2"}]),
      test_util:expected2(Msg, {string,"This is cell B4 on Sheet2"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet2_D6(doc) -> [{userdata,[{""}]}];
sheet2_D6(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Sheet2",5,3}]),
  Pid ! {msg,self(),?MODULE,{"Sheet2",5,3}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"This is cell D6 on Sheet2"}]),
      test_util:expected2(Msg, {string,"This is cell D6 on Sheet2"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
sheet2_H12(doc) -> [{userdata,[{""}]}];
sheet2_H12(Config) -> 
  {value,{_,Pid}}=lists:keysearch(?MODULE,1,Config),
  io:format("in test case Pid is ~p MODULE is ~p~n Key is ~p",[Pid,?MODULE,{"Sheet2",11,7}]),
  Pid ! {msg,self(),?MODULE,{"Sheet2",11,7}},
  receive
    Msg -> 
      io:format("Expected is :~p~nGot is      :~p~n",[Msg,{string,"This is cell H12 on Sheet2"}]),
      test_util:expected2(Msg, {string,"This is cell H12 on Sheet2"})
  after
    500 -> io:format("timed out in test case!~n"),
            exit("die in flames!")
  end.
  
all() -> 
    [sheet1_A1,
   sheet1_A2,
   sheet1_B2,
   sheet1_A3,
   sheet1_B3,
   sheet1_B4,
   sheet1_D6,
   sheet1_H12,
   sheet2_A1,
   sheet2_A2,
   sheet2_B2,
   sheet2_A3,
   sheet2_B3,
   sheet2_B4,
   sheet2_D6,
   sheet2_H12
    ].
  
