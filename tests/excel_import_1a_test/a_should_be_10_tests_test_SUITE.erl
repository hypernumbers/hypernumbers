% This module has been generated by gen_rev_comp_test.rb
% DO NOT EDIT MANUALLY.
%
% Source file: a_should_be_10_tests.xls
% Generated on: Tue Feb 12 08:59:04 +0000 2008

-module(a_should_be_10_tests_test_SUITE).
-compile(export_all).
-include("ct.hrl").


init_per_suite(Config) ->
    code:add_patha("../../../../../ebin"),
    production_boot:setup_paths(),
    Data = test_util:read_excel_file("/Win Excel 2007 (as 97)/a_should_be_10_tests.xls"),
    %% io:format("in init_per_suite Data is ~p~n",[Data]),
    lists:merge([Config, [{a_should_be_10_tests_test_SUITE, Data}]]).
  
end_per_suite(_Config) ->
    ok.
  
init_per_testcase(_TestCase, Config) -> Config.

end_per_testcase(_TestCase, _Config) -> ok.

read_from_excel_data(Config,{Sheet,Row,Col}) ->
  test_util:read_from_excel_data(Config,a_should_be_10_tests_test_SUITE,{Sheet,Row,Col}).

sheet1_a1_test(doc) -> [{userdata,[{""}]}];
sheet1_a1_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{string,"This spreadsheet should have 10 tests - it tests the alignment of the test generators and makes sure that it it pulling out the range correctly and not transposed"},read_from_excel_data(Config,{"Sheet1",0,0})]),
  test_util:expected2(read_from_excel_data(Config,{"Sheet1",0,0}), {string,"This spreadsheet should have 10 tests - it tests the alignment of the test generators and makes sure that it it pulling out the range correctly and not transposed"}).
  
sheet1_a2_test(doc) -> [{userdata,[{""}]}];
sheet1_a2_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{string,"If this test fails there will only be two tests - this one and the introductary text - none of them will be for integers."},read_from_excel_data(Config,{"Sheet1",1,0})]),
  test_util:expected2(read_from_excel_data(Config,{"Sheet1",1,0}), {string,"If this test fails there will only be two tests - this one and the introductary text - none of them will be for integers."}).
  
sheet1_b1_test(doc) -> [{userdata,[{""}]}];
sheet1_b1_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{number,2.0},read_from_excel_data(Config,{"Sheet1",0,1})]),
  test_util:expected2(read_from_excel_data(Config,{"Sheet1",0,1}), {number,2.0}).
  
sheet1_b2_test(doc) -> [{userdata,[{""}]}];
sheet1_b2_test(Config) -> 
  io:format("Expected : ~p~nGot      : ~p~n",[{number,7.0},read_from_excel_data(Config,{"Sheet1",1,1})]),
  test_util:expected2(read_from_excel_data(Config,{"Sheet1",1,1}), {number,7.0}).
  
all() -> 
    [sheet1_a1_test,
   sheet1_a2_test,
   sheet1_b1_test,
   sheet1_b2_test
    ].
  
